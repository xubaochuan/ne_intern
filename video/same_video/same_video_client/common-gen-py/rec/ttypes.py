#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class SEARCH_TYPE:
  PC_RELATED = 1
  MOBILE_RELATED = 2
  PC_RECOMMEND = 3
  MOBILE_RECOMMEND = 4
  PUSH = 6
  RT_SEARCH = 12

  _VALUES_TO_NAMES = {
    1: "PC_RELATED",
    2: "MOBILE_RELATED",
    3: "PC_RECOMMEND",
    4: "MOBILE_RECOMMEND",
    6: "PUSH",
    12: "RT_SEARCH",
  }

  _NAMES_TO_VALUES = {
    "PC_RELATED": 1,
    "MOBILE_RELATED": 2,
    "PC_RECOMMEND": 3,
    "MOBILE_RECOMMEND": 4,
    "PUSH": 6,
    "RT_SEARCH": 12,
  }

class CHANNEL_TYPE:
  OTHER = 0
  SPORT = 1
  HEADLINE = 2

  _VALUES_TO_NAMES = {
    0: "OTHER",
    1: "SPORT",
    2: "HEADLINE",
  }

  _NAMES_TO_VALUES = {
    "OTHER": 0,
    "SPORT": 1,
    "HEADLINE": 2,
  }

class DEVICE_TYPE:
  OTHER = 0
  PC = 1
  MOBILE = 2
  TABLET = 3

  _VALUES_TO_NAMES = {
    0: "OTHER",
    1: "PC",
    2: "MOBILE",
    3: "TABLET",
  }

  _NAMES_TO_VALUES = {
    "OTHER": 0,
    "PC": 1,
    "MOBILE": 2,
    "TABLET": 3,
  }

class OS_TYPE:
  OTHER = 0
  ANDROID = 1
  IOS = 2
  WINPHONE = 3

  _VALUES_TO_NAMES = {
    0: "OTHER",
    1: "ANDROID",
    2: "IOS",
    3: "WINPHONE",
  }

  _NAMES_TO_VALUES = {
    "OTHER": 0,
    "ANDROID": 1,
    "IOS": 2,
    "WINPHONE": 3,
  }

class ORIENTATION:
  OTHER = 0
  LAND = 1
  PORT = 2

  _VALUES_TO_NAMES = {
    0: "OTHER",
    1: "LAND",
    2: "PORT",
  }

  _NAMES_TO_VALUES = {
    "OTHER": 0,
    "LAND": 1,
    "PORT": 2,
  }

class NET_TYPE:
  MOBILE = 0
  WIFI = 1
  WIMAX = 6
  ETHERNET = 9
  TYPE_VPN = 17

  _VALUES_TO_NAMES = {
    0: "MOBILE",
    1: "WIFI",
    6: "WIMAX",
    9: "ETHERNET",
    17: "TYPE_VPN",
  }

  _NAMES_TO_VALUES = {
    "MOBILE": 0,
    "WIFI": 1,
    "WIMAX": 6,
    "ETHERNET": 9,
    "TYPE_VPN": 17,
  }

class MOB_NET_TYPE:
  M_0G = 0
  M_1G = 1
  M_2G = 2
  M_3G = 3
  M_4G = 4
  M_5G = 5

  _VALUES_TO_NAMES = {
    0: "M_0G",
    1: "M_1G",
    2: "M_2G",
    3: "M_3G",
    4: "M_4G",
    5: "M_5G",
  }

  _NAMES_TO_VALUES = {
    "M_0G": 0,
    "M_1G": 1,
    "M_2G": 2,
    "M_3G": 3,
    "M_4G": 4,
    "M_5G": 5,
  }

class SUB_NET_TYPE:
  RTT = 7
  CDMA = 4
  EDGE = 2
  EHRPD = 14
  EVDO_0 = 5
  EVDO_A = 6
  EVDO_B = 12
  GPRS = 1
  HSDPA = 8
  HSPA = 10
  HSPAP = 15
  HSUPA = 9
  IDEN = 11
  LTE = 13
  UMTS = 3
  NEW_SUBTYPE = 999

  _VALUES_TO_NAMES = {
    7: "RTT",
    4: "CDMA",
    2: "EDGE",
    14: "EHRPD",
    5: "EVDO_0",
    6: "EVDO_A",
    12: "EVDO_B",
    1: "GPRS",
    8: "HSDPA",
    10: "HSPA",
    15: "HSPAP",
    9: "HSUPA",
    11: "IDEN",
    13: "LTE",
    3: "UMTS",
    999: "NEW_SUBTYPE",
  }

  _NAMES_TO_VALUES = {
    "RTT": 7,
    "CDMA": 4,
    "EDGE": 2,
    "EHRPD": 14,
    "EVDO_0": 5,
    "EVDO_A": 6,
    "EVDO_B": 12,
    "GPRS": 1,
    "HSDPA": 8,
    "HSPA": 10,
    "HSPAP": 15,
    "HSUPA": 9,
    "IDEN": 11,
    "LTE": 13,
    "UMTS": 3,
    "NEW_SUBTYPE": 999,
  }

class GPS_TYPE:
  WGS84 = 1
  GCJ02 = 2

  _VALUES_TO_NAMES = {
    1: "WGS84",
    2: "GCJ02",
  }

  _NAMES_TO_VALUES = {
    "WGS84": 1,
    "GCJ02": 2,
  }

class LOCATION_TYPE:
  L_GPS = 1
  L_CELLULAR = 2
  L_NETGATE = 3
  L_ETHERNET = 4

  _VALUES_TO_NAMES = {
    1: "L_GPS",
    2: "L_CELLULAR",
    3: "L_NETGATE",
    4: "L_ETHERNET",
  }

  _NAMES_TO_VALUES = {
    "L_GPS": 1,
    "L_CELLULAR": 2,
    "L_NETGATE": 3,
    "L_ETHERNET": 4,
  }

class CVF_TYPE:
  USER_ID_CTR = 1

  _VALUES_TO_NAMES = {
    1: "USER_ID_CTR",
  }

  _NAMES_TO_VALUES = {
    "USER_ID_CTR": 1,
  }

class SEARCH_MATCH_TYPE:
  PARTIAL_MATCH = 1
  EXTRACT_MATCH = 2

  _VALUES_TO_NAMES = {
    1: "PARTIAL_MATCH",
    2: "EXTRACT_MATCH",
  }

  _NAMES_TO_VALUES = {
    "PARTIAL_MATCH": 1,
    "EXTRACT_MATCH": 2,
  }

class TIME_TYPE:
  CLICK = 1

  _VALUES_TO_NAMES = {
    1: "CLICK",
  }

  _NAMES_TO_VALUES = {
    "CLICK": 1,
  }

class UID_TYPE:
  OTHER = 0
  COOKIE = 1
  DEVICE_ID = 2
  PASSPORT = 3
  PUSH_ID = 4

  _VALUES_TO_NAMES = {
    0: "OTHER",
    1: "COOKIE",
    2: "DEVICE_ID",
    3: "PASSPORT",
    4: "PUSH_ID",
  }

  _NAMES_TO_VALUES = {
    "OTHER": 0,
    "COOKIE": 1,
    "DEVICE_ID": 2,
    "PASSPORT": 3,
    "PUSH_ID": 4,
  }

class PAGE_TYPE:
  CHANNEL = 1
  CONTENT = 2
  COMMENT = 3

  _VALUES_TO_NAMES = {
    1: "CHANNEL",
    2: "CONTENT",
    3: "COMMENT",
  }

  _NAMES_TO_VALUES = {
    "CHANNEL": 1,
    "CONTENT": 2,
    "COMMENT": 3,
  }

class LABEL_TYPE:
  LDA = 1
  W2V_CLUSTERING = 2
  FST_CLUSTERING = 3
  ITEM_CF = 4
  KW = 5
  TITLE_KW = 6
  HOT = 7
  MANUALLY_DEFINED = 8
  USER_CF = 9
  TITLE_SEGMENT = 10
  DOC_SEGMENT = 11
  MANUALLY_KW = 12
  TITLE_W2V = 13
  TITLE_FST = 14
  TITLE_LDA = 15
  LOCATION = 16
  CONTENT_CF = 17
  MANUALLY_CATEGORY = 18
  VIDEO_CF = 19
  MANUALLY_INTEREST = 20
  W2V_EVENT = 21
  DOC_RELATED_VIDEO = 22
  DOC_DETAIL_CATEGORY = 23
  DOC_CATEGORY = 24

  _VALUES_TO_NAMES = {
    1: "LDA",
    2: "W2V_CLUSTERING",
    3: "FST_CLUSTERING",
    4: "ITEM_CF",
    5: "KW",
    6: "TITLE_KW",
    7: "HOT",
    8: "MANUALLY_DEFINED",
    9: "USER_CF",
    10: "TITLE_SEGMENT",
    11: "DOC_SEGMENT",
    12: "MANUALLY_KW",
    13: "TITLE_W2V",
    14: "TITLE_FST",
    15: "TITLE_LDA",
    16: "LOCATION",
    17: "CONTENT_CF",
    18: "MANUALLY_CATEGORY",
    19: "VIDEO_CF",
    20: "MANUALLY_INTEREST",
    21: "W2V_EVENT",
    22: "DOC_RELATED_VIDEO",
    23: "DOC_DETAIL_CATEGORY",
    24: "DOC_CATEGORY",
  }

  _NAMES_TO_VALUES = {
    "LDA": 1,
    "W2V_CLUSTERING": 2,
    "FST_CLUSTERING": 3,
    "ITEM_CF": 4,
    "KW": 5,
    "TITLE_KW": 6,
    "HOT": 7,
    "MANUALLY_DEFINED": 8,
    "USER_CF": 9,
    "TITLE_SEGMENT": 10,
    "DOC_SEGMENT": 11,
    "MANUALLY_KW": 12,
    "TITLE_W2V": 13,
    "TITLE_FST": 14,
    "TITLE_LDA": 15,
    "LOCATION": 16,
    "CONTENT_CF": 17,
    "MANUALLY_CATEGORY": 18,
    "VIDEO_CF": 19,
    "MANUALLY_INTEREST": 20,
    "W2V_EVENT": 21,
    "DOC_RELATED_VIDEO": 22,
    "DOC_DETAIL_CATEGORY": 23,
    "DOC_CATEGORY": 24,
  }

class ITEM_TYPE:
  DOC = 1
  SPECIAL = 2
  IMG = 3
  VIDEO = 4
  AUDIO = 5
  QA = 6
  TOPIC = 7
  LIVE = 8
  COMMENT = 9
  H5 = 10
  AD = 11
  LUOBO = 12
  WEB = 13

  _VALUES_TO_NAMES = {
    1: "DOC",
    2: "SPECIAL",
    3: "IMG",
    4: "VIDEO",
    5: "AUDIO",
    6: "QA",
    7: "TOPIC",
    8: "LIVE",
    9: "COMMENT",
    10: "H5",
    11: "AD",
    12: "LUOBO",
    13: "WEB",
  }

  _NAMES_TO_VALUES = {
    "DOC": 1,
    "SPECIAL": 2,
    "IMG": 3,
    "VIDEO": 4,
    "AUDIO": 5,
    "QA": 6,
    "TOPIC": 7,
    "LIVE": 8,
    "COMMENT": 9,
    "H5": 10,
    "AD": 11,
    "LUOBO": 12,
    "WEB": 13,
  }

class TARGET_TYPE:
  htt = 1
  rtt = 2
  hkt = 3
  rkt = 4
  hct = 5
  rct = 6
  st = 9
  hot = 7
  lt = 8

  _VALUES_TO_NAMES = {
    1: "htt",
    2: "rtt",
    3: "hkt",
    4: "rkt",
    5: "hct",
    6: "rct",
    9: "st",
    7: "hot",
    8: "lt",
  }

  _NAMES_TO_VALUES = {
    "htt": 1,
    "rtt": 2,
    "hkt": 3,
    "rkt": 4,
    "hct": 5,
    "rct": 6,
    "st": 9,
    "hot": 7,
    "lt": 8,
  }

class SITE_ID:
  SITE_REC = 0
  SITE_P = 1
  SITE_S = 2
  SITE_APLUS = 3
  SITE_A = 4
  SITE_B = 5
  SITE_LOC = 6
  SITE_911_NETEASE = 7
  SITE_911_LONGTIME = 8
  SITE_HZ = 23

  _VALUES_TO_NAMES = {
    0: "SITE_REC",
    1: "SITE_P",
    2: "SITE_S",
    3: "SITE_APLUS",
    4: "SITE_A",
    5: "SITE_B",
    6: "SITE_LOC",
    7: "SITE_911_NETEASE",
    8: "SITE_911_LONGTIME",
    23: "SITE_HZ",
  }

  _NAMES_TO_VALUES = {
    "SITE_REC": 0,
    "SITE_P": 1,
    "SITE_S": 2,
    "SITE_APLUS": 3,
    "SITE_A": 4,
    "SITE_B": 5,
    "SITE_LOC": 6,
    "SITE_911_NETEASE": 7,
    "SITE_911_LONGTIME": 8,
    "SITE_HZ": 23,
  }

class TimeDimension:
  TD_HISTORY = 0
  TD_REALTIME = 1

  _VALUES_TO_NAMES = {
    0: "TD_HISTORY",
    1: "TD_REALTIME",
  }

  _NAMES_TO_VALUES = {
    "TD_HISTORY": 0,
    "TD_REALTIME": 1,
  }

class GENDER:
  UNKNOW = 0
  MALE = 1
  FEMALE = 2
  THIRD_GENDER = 3

  _VALUES_TO_NAMES = {
    0: "UNKNOW",
    1: "MALE",
    2: "FEMALE",
    3: "THIRD_GENDER",
  }

  _NAMES_TO_VALUES = {
    "UNKNOW": 0,
    "MALE": 1,
    "FEMALE": 2,
    "THIRD_GENDER": 3,
  }

class UNLIKE_TYPE:
  CATEGORY = 1
  INTERESTS = 2
  KEYWORD = 3
  SOURCE = 4
  LOCAL = 5
  OTHER = 6

  _VALUES_TO_NAMES = {
    1: "CATEGORY",
    2: "INTERESTS",
    3: "KEYWORD",
    4: "SOURCE",
    5: "LOCAL",
    6: "OTHER",
  }

  _NAMES_TO_VALUES = {
    "CATEGORY": 1,
    "INTERESTS": 2,
    "KEYWORD": 3,
    "SOURCE": 4,
    "LOCAL": 5,
    "OTHER": 6,
  }

class OP_TYPE:
  ADD = 0
  MOD = 1
  DEL = 2

  _VALUES_TO_NAMES = {
    0: "ADD",
    1: "MOD",
    2: "DEL",
  }

  _NAMES_TO_VALUES = {
    "ADD": 0,
    "MOD": 1,
    "DEL": 2,
  }

class ABTEST_MODULE:
  GRAY = 8
  RANK = 1
  RETRIEVAL = 2
  INDEX = 3
  UFS = 4
  PFS = 5
  CTR = 6

  _VALUES_TO_NAMES = {
    8: "GRAY",
    1: "RANK",
    2: "RETRIEVAL",
    3: "INDEX",
    4: "UFS",
    5: "PFS",
    6: "CTR",
  }

  _NAMES_TO_VALUES = {
    "GRAY": 8,
    "RANK": 1,
    "RETRIEVAL": 2,
    "INDEX": 3,
    "UFS": 4,
    "PFS": 5,
    "CTR": 6,
  }

class ABTEST_DIVERSION:
  UUID = 1
  UID = 2
  DEVID = 3

  _VALUES_TO_NAMES = {
    1: "UUID",
    2: "UID",
    3: "DEVID",
  }

  _NAMES_TO_VALUES = {
    "UUID": 1,
    "UID": 2,
    "DEVID": 3,
  }

class CONTROL_LEVEL:
  FIRST_CLASS = 1
  SECOND_CLASS = 2
  THIRD_CLASS = 3
  COMMON_CLASS = 4

  _VALUES_TO_NAMES = {
    1: "FIRST_CLASS",
    2: "SECOND_CLASS",
    3: "THIRD_CLASS",
    4: "COMMON_CLASS",
  }

  _NAMES_TO_VALUES = {
    "FIRST_CLASS": 1,
    "SECOND_CLASS": 2,
    "THIRD_CLASS": 3,
    "COMMON_CLASS": 4,
  }

class CONTROL_GRADE:
  GRADE_A = 1
  GRADE_B = 2

  _VALUES_TO_NAMES = {
    1: "GRADE_A",
    2: "GRADE_B",
  }

  _NAMES_TO_VALUES = {
    "GRADE_A": 1,
    "GRADE_B": 2,
  }

class INDEX_CMD_OP_TYPE:
  SEARCH_DOCID_BY_LABELID = 1
  SEARCH_DETAIL_BY_DOCID = 2
  SEARCH_DOCID_BY_KW = 3
  SEARCH_DOCID_BY_TITLE_KW = 4

  _VALUES_TO_NAMES = {
    1: "SEARCH_DOCID_BY_LABELID",
    2: "SEARCH_DETAIL_BY_DOCID",
    3: "SEARCH_DOCID_BY_KW",
    4: "SEARCH_DOCID_BY_TITLE_KW",
  }

  _NAMES_TO_VALUES = {
    "SEARCH_DOCID_BY_LABELID": 1,
    "SEARCH_DETAIL_BY_DOCID": 2,
    "SEARCH_DOCID_BY_KW": 3,
    "SEARCH_DOCID_BY_TITLE_KW": 4,
  }

class PREDICT_TYPE:
  PALL = 0
  PCTR = 1
  PSS = 2

  _VALUES_TO_NAMES = {
    0: "PALL",
    1: "PCTR",
    2: "PSS",
  }

  _NAMES_TO_VALUES = {
    "PALL": 0,
    "PCTR": 1,
    "PSS": 2,
  }

class EXTRACT_TYPE:
  ARTICLE = 0
  TEXT = 1

  _VALUES_TO_NAMES = {
    0: "ARTICLE",
    1: "TEXT",
  }

  _NAMES_TO_VALUES = {
    "ARTICLE": 0,
    "TEXT": 1,
  }

class EXTRACT_LOAD_TYPE:
  DICT = 0
  W2V = 1
  TOPIC = 2

  _VALUES_TO_NAMES = {
    0: "DICT",
    1: "W2V",
    2: "TOPIC",
  }

  _NAMES_TO_VALUES = {
    "DICT": 0,
    "W2V": 1,
    "TOPIC": 2,
  }


class Version:
  """
  Attributes:
   - _major
   - _minor
   - _micro
   - _build
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, '_major', None, None, ), # 1
    (2, TType.I32, '_minor', None, None, ), # 2
    (3, TType.I32, '_micro', None, None, ), # 3
    (4, TType.I32, '_build', None, None, ), # 4
  )

  def __init__(self, _major=None, _minor=None, _micro=None, _build=None,):
    self._major = _major
    self._minor = _minor
    self._micro = _micro
    self._build = _build

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self._major = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self._minor = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self._micro = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self._build = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Version')
    if self._major is not None:
      oprot.writeFieldBegin('_major', TType.I32, 1)
      oprot.writeI32(self._major)
      oprot.writeFieldEnd()
    if self._minor is not None:
      oprot.writeFieldBegin('_minor', TType.I32, 2)
      oprot.writeI32(self._minor)
      oprot.writeFieldEnd()
    if self._micro is not None:
      oprot.writeFieldBegin('_micro', TType.I32, 3)
      oprot.writeI32(self._micro)
      oprot.writeFieldEnd()
    if self._build is not None:
      oprot.writeFieldBegin('_build', TType.I32, 4)
      oprot.writeI32(self._build)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DeviceID:
  """
  Attributes:
   - devid
   - mac
   - imei
   - uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'devid', None, None, ), # 1
    (2, TType.STRING, 'mac', None, None, ), # 2
    (3, TType.STRING, 'imei', None, None, ), # 3
    (4, TType.STRING, 'uuid', None, None, ), # 4
  )

  def __init__(self, devid=None, mac=None, imei=None, uuid=None,):
    self.devid = devid
    self.mac = mac
    self.imei = imei
    self.uuid = uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.devid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mac = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.imei = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DeviceID')
    if self.devid is not None:
      oprot.writeFieldBegin('devid', TType.STRING, 1)
      oprot.writeString(self.devid)
      oprot.writeFieldEnd()
    if self.mac is not None:
      oprot.writeFieldBegin('mac', TType.STRING, 2)
      oprot.writeString(self.mac)
      oprot.writeFieldEnd()
    if self.imei is not None:
      oprot.writeFieldBegin('imei', TType.STRING, 3)
      oprot.writeString(self.imei)
      oprot.writeFieldEnd()
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 4)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Device:
  """
  Attributes:
   - device_type
   - os_type
   - os_version
   - device_id
   - orientation
   - vendor
   - model
   - screen_density
   - useragent
   - cookie
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'device_type', None, None, ), # 1
    (2, TType.I32, 'os_type', None, None, ), # 2
    (3, TType.STRUCT, 'os_version', (Version, Version.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'device_id', (DeviceID, DeviceID.thrift_spec), None, ), # 4
    (5, TType.I32, 'orientation', None, None, ), # 5
    (6, TType.STRING, 'vendor', None, None, ), # 6
    (7, TType.STRING, 'model', None, None, ), # 7
    (8, TType.DOUBLE, 'screen_density', None, None, ), # 8
    (9, TType.STRING, 'useragent', None, None, ), # 9
    (10, TType.STRING, 'cookie', None, None, ), # 10
  )

  def __init__(self, device_type=None, os_type=None, os_version=None, device_id=None, orientation=None, vendor=None, model=None, screen_density=None, useragent=None, cookie=None,):
    self.device_type = device_type
    self.os_type = os_type
    self.os_version = os_version
    self.device_id = device_id
    self.orientation = orientation
    self.vendor = vendor
    self.model = model
    self.screen_density = screen_density
    self.useragent = useragent
    self.cookie = cookie

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.device_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.os_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.os_version = Version()
          self.os_version.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.device_id = DeviceID()
          self.device_id.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.orientation = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.vendor = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.model = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.screen_density = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.useragent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.cookie = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Device')
    if self.device_type is not None:
      oprot.writeFieldBegin('device_type', TType.I32, 1)
      oprot.writeI32(self.device_type)
      oprot.writeFieldEnd()
    if self.os_type is not None:
      oprot.writeFieldBegin('os_type', TType.I32, 2)
      oprot.writeI32(self.os_type)
      oprot.writeFieldEnd()
    if self.os_version is not None:
      oprot.writeFieldBegin('os_version', TType.STRUCT, 3)
      self.os_version.write(oprot)
      oprot.writeFieldEnd()
    if self.device_id is not None:
      oprot.writeFieldBegin('device_id', TType.STRUCT, 4)
      self.device_id.write(oprot)
      oprot.writeFieldEnd()
    if self.orientation is not None:
      oprot.writeFieldBegin('orientation', TType.I32, 5)
      oprot.writeI32(self.orientation)
      oprot.writeFieldEnd()
    if self.vendor is not None:
      oprot.writeFieldBegin('vendor', TType.STRING, 6)
      oprot.writeString(self.vendor)
      oprot.writeFieldEnd()
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRING, 7)
      oprot.writeString(self.model)
      oprot.writeFieldEnd()
    if self.screen_density is not None:
      oprot.writeFieldBegin('screen_density', TType.DOUBLE, 8)
      oprot.writeDouble(self.screen_density)
      oprot.writeFieldEnd()
    if self.useragent is not None:
      oprot.writeFieldBegin('useragent', TType.STRING, 9)
      oprot.writeString(self.useragent)
      oprot.writeFieldEnd()
    if self.cookie is not None:
      oprot.writeFieldBegin('cookie', TType.STRING, 10)
      oprot.writeString(self.cookie)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WiFiAp:
  """
  Attributes:
   - mac
   - rssi
   - ssid
   - is_connect
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mac', None, None, ), # 1
    (2, TType.I32, 'rssi', None, None, ), # 2
    (3, TType.STRING, 'ssid', None, None, ), # 3
    (4, TType.BOOL, 'is_connect', None, None, ), # 4
  )

  def __init__(self, mac=None, rssi=None, ssid=None, is_connect=None,):
    self.mac = mac
    self.rssi = rssi
    self.ssid = ssid
    self.is_connect = is_connect

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mac = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rssi = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ssid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.is_connect = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WiFiAp')
    if self.mac is not None:
      oprot.writeFieldBegin('mac', TType.STRING, 1)
      oprot.writeString(self.mac)
      oprot.writeFieldEnd()
    if self.rssi is not None:
      oprot.writeFieldBegin('rssi', TType.I32, 2)
      oprot.writeI32(self.rssi)
      oprot.writeFieldEnd()
    if self.ssid is not None:
      oprot.writeFieldBegin('ssid', TType.STRING, 3)
      oprot.writeString(self.ssid)
      oprot.writeFieldEnd()
    if self.is_connect is not None:
      oprot.writeFieldBegin('is_connect', TType.BOOL, 4)
      oprot.writeBool(self.is_connect)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Network:
  """
  Attributes:
   - ipv4
   - ipv6
   - net_type
   - sub_net_type
   - wifi_aps
   - operator_id
   - cellular_id
   - mob_net_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ipv4', None, None, ), # 1
    (2, TType.STRING, 'ipv6', None, None, ), # 2
    (3, TType.I32, 'net_type', None, None, ), # 3
    (4, TType.I32, 'sub_net_type', None, None, ), # 4
    (5, TType.LIST, 'wifi_aps', (TType.STRUCT,(WiFiAp, WiFiAp.thrift_spec)), None, ), # 5
    (6, TType.I32, 'operator_id', None, None, ), # 6
    (7, TType.STRING, 'cellular_id', None, None, ), # 7
    (8, TType.I32, 'mob_net_type', None, None, ), # 8
  )

  def __init__(self, ipv4=None, ipv6=None, net_type=None, sub_net_type=None, wifi_aps=None, operator_id=None, cellular_id=None, mob_net_type=None,):
    self.ipv4 = ipv4
    self.ipv6 = ipv6
    self.net_type = net_type
    self.sub_net_type = sub_net_type
    self.wifi_aps = wifi_aps
    self.operator_id = operator_id
    self.cellular_id = cellular_id
    self.mob_net_type = mob_net_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ipv4 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ipv6 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.net_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.sub_net_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.wifi_aps = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = WiFiAp()
            _elem5.read(iprot)
            self.wifi_aps.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.operator_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.cellular_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.mob_net_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Network')
    if self.ipv4 is not None:
      oprot.writeFieldBegin('ipv4', TType.STRING, 1)
      oprot.writeString(self.ipv4)
      oprot.writeFieldEnd()
    if self.ipv6 is not None:
      oprot.writeFieldBegin('ipv6', TType.STRING, 2)
      oprot.writeString(self.ipv6)
      oprot.writeFieldEnd()
    if self.net_type is not None:
      oprot.writeFieldBegin('net_type', TType.I32, 3)
      oprot.writeI32(self.net_type)
      oprot.writeFieldEnd()
    if self.sub_net_type is not None:
      oprot.writeFieldBegin('sub_net_type', TType.I32, 4)
      oprot.writeI32(self.sub_net_type)
      oprot.writeFieldEnd()
    if self.wifi_aps is not None:
      oprot.writeFieldBegin('wifi_aps', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.wifi_aps))
      for iter6 in self.wifi_aps:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.operator_id is not None:
      oprot.writeFieldBegin('operator_id', TType.I32, 6)
      oprot.writeI32(self.operator_id)
      oprot.writeFieldEnd()
    if self.cellular_id is not None:
      oprot.writeFieldBegin('cellular_id', TType.STRING, 7)
      oprot.writeString(self.cellular_id)
      oprot.writeFieldEnd()
    if self.mob_net_type is not None:
      oprot.writeFieldBegin('mob_net_type', TType.I32, 8)
      oprot.writeI32(self.mob_net_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Gps:
  """
  Attributes:
   - gps_type
   - longitude
   - latitude
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'gps_type', None, None, ), # 1
    (2, TType.DOUBLE, 'longitude', None, None, ), # 2
    (3, TType.DOUBLE, 'latitude', None, None, ), # 3
    (4, TType.I64, 'timestamp', None, None, ), # 4
  )

  def __init__(self, gps_type=None, longitude=None, latitude=None, timestamp=None,):
    self.gps_type = gps_type
    self.longitude = longitude
    self.latitude = latitude
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.gps_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Gps')
    if self.gps_type is not None:
      oprot.writeFieldBegin('gps_type', TType.I32, 1)
      oprot.writeI32(self.gps_type)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 3)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 4)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Location:
  """
  Attributes:
   - location_type
   - location_code
   - location_name
   - poi_id
   - poi_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'location_type', None, None, ), # 1
    (2, TType.I32, 'location_code', None, None, ), # 2
    (3, TType.STRING, 'location_name', None, None, ), # 3
    (4, TType.I32, 'poi_id', None, None, ), # 4
    (5, TType.STRING, 'poi_name', None, None, ), # 5
  )

  def __init__(self, location_type=None, location_code=None, location_name=None, poi_id=None, poi_name=None,):
    self.location_type = location_type
    self.location_code = location_code
    self.location_name = location_name
    self.poi_id = poi_id
    self.poi_name = poi_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.location_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.location_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.location_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.poi_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.poi_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Location')
    if self.location_type is not None:
      oprot.writeFieldBegin('location_type', TType.I32, 1)
      oprot.writeI32(self.location_type)
      oprot.writeFieldEnd()
    if self.location_code is not None:
      oprot.writeFieldBegin('location_code', TType.I32, 2)
      oprot.writeI32(self.location_code)
      oprot.writeFieldEnd()
    if self.location_name is not None:
      oprot.writeFieldBegin('location_name', TType.STRING, 3)
      oprot.writeString(self.location_name)
      oprot.writeFieldEnd()
    if self.poi_id is not None:
      oprot.writeFieldBegin('poi_id', TType.I32, 4)
      oprot.writeI32(self.poi_id)
      oprot.writeFieldEnd()
    if self.poi_name is not None:
      oprot.writeFieldBegin('poi_name', TType.STRING, 5)
      oprot.writeString(self.poi_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class App:
  """
  Attributes:
   - pkg_name
   - version
   - market
   - market_group
   - campaign
   - spever
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'pkg_name', None, None, ), # 1
    (2, TType.STRUCT, 'version', (Version, Version.thrift_spec), None, ), # 2
    (3, TType.STRING, 'market', None, None, ), # 3
    (4, TType.STRING, 'market_group', None, None, ), # 4
    (5, TType.STRING, 'campaign', None, None, ), # 5
    (6, TType.BOOL, 'spever', None, None, ), # 6
  )

  def __init__(self, pkg_name=None, version=None, market=None, market_group=None, campaign=None, spever=None,):
    self.pkg_name = pkg_name
    self.version = version
    self.market = market
    self.market_group = market_group
    self.campaign = campaign
    self.spever = spever

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.pkg_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.version = Version()
          self.version.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.market = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.market_group = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.campaign = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.spever = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('App')
    if self.pkg_name is not None:
      oprot.writeFieldBegin('pkg_name', TType.STRING, 1)
      oprot.writeString(self.pkg_name)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRUCT, 2)
      self.version.write(oprot)
      oprot.writeFieldEnd()
    if self.market is not None:
      oprot.writeFieldBegin('market', TType.STRING, 3)
      oprot.writeString(self.market)
      oprot.writeFieldEnd()
    if self.market_group is not None:
      oprot.writeFieldBegin('market_group', TType.STRING, 4)
      oprot.writeString(self.market_group)
      oprot.writeFieldEnd()
    if self.campaign is not None:
      oprot.writeFieldBegin('campaign', TType.STRING, 5)
      oprot.writeString(self.campaign)
      oprot.writeFieldEnd()
    if self.spever is not None:
      oprot.writeFieldBegin('spever', TType.BOOL, 6)
      oprot.writeBool(self.spever)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserRequest:
  """
  Attributes:
   - uid_type
   - uid
   - device
   - network
   - gps
   - app
   - location
   - user_source
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid_type', None, None, ), # 1
    (2, TType.STRING, 'uid', None, None, ), # 2
    (3, TType.STRUCT, 'device', (Device, Device.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'network', (Network, Network.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'gps', (Gps, Gps.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'app', (App, App.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'location', (Location, Location.thrift_spec), None, ), # 7
    (8, TType.STRING, 'user_source', None, None, ), # 8
  )

  def __init__(self, uid_type=None, uid=None, device=None, network=None, gps=None, app=None, location=None, user_source=None,):
    self.uid_type = uid_type
    self.uid = uid
    self.device = device
    self.network = network
    self.gps = gps
    self.app = app
    self.location = location
    self.user_source = user_source

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.device = Device()
          self.device.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.network = Network()
          self.network.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.gps = Gps()
          self.gps.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.app = App()
          self.app.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.location = Location()
          self.location.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.user_source = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserRequest')
    if self.uid_type is not None:
      oprot.writeFieldBegin('uid_type', TType.I32, 1)
      oprot.writeI32(self.uid_type)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.STRING, 2)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.device is not None:
      oprot.writeFieldBegin('device', TType.STRUCT, 3)
      self.device.write(oprot)
      oprot.writeFieldEnd()
    if self.network is not None:
      oprot.writeFieldBegin('network', TType.STRUCT, 4)
      self.network.write(oprot)
      oprot.writeFieldEnd()
    if self.gps is not None:
      oprot.writeFieldBegin('gps', TType.STRUCT, 5)
      self.gps.write(oprot)
      oprot.writeFieldEnd()
    if self.app is not None:
      oprot.writeFieldBegin('app', TType.STRUCT, 6)
      self.app.write(oprot)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRUCT, 7)
      self.location.write(oprot)
      oprot.writeFieldEnd()
    if self.user_source is not None:
      oprot.writeFieldBegin('user_source', TType.STRING, 8)
      oprot.writeString(self.user_source)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageRequest:
  """
  Attributes:
   - page_type
   - page_id
   - refer_type
   - refer
   - url
   - url_refer
   - open
   - open_path
   - fresh_num
   - offset
   - location_source
   - query_id
   - query_text
   - search_time
   - last_doc
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'page_type', None, None, ), # 1
    (2, TType.STRING, 'page_id', None, None, ), # 2
    (3, TType.I32, 'refer_type', None, None, ), # 3
    (4, TType.STRING, 'refer', None, None, ), # 4
    (5, TType.STRING, 'url', None, None, ), # 5
    (6, TType.STRING, 'url_refer', None, None, ), # 6
    (7, TType.STRING, 'open', None, None, ), # 7
    (8, TType.STRING, 'open_path', None, None, ), # 8
    (9, TType.I32, 'fresh_num', None, None, ), # 9
    (10, TType.I32, 'offset', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'location_source', None, None, ), # 20
    (21, TType.STRING, 'query_id', None, None, ), # 21
    (22, TType.STRING, 'query_text', None, None, ), # 22
    (23, TType.I64, 'search_time', None, None, ), # 23
    (24, TType.STRING, 'last_doc', None, None, ), # 24
  )

  def __init__(self, page_type=None, page_id=None, refer_type=None, refer=None, url=None, url_refer=None, open=None, open_path=None, fresh_num=None, offset=None, location_source=None, query_id=None, query_text=None, search_time=None, last_doc=None,):
    self.page_type = page_type
    self.page_id = page_id
    self.refer_type = refer_type
    self.refer = refer
    self.url = url
    self.url_refer = url_refer
    self.open = open
    self.open_path = open_path
    self.fresh_num = fresh_num
    self.offset = offset
    self.location_source = location_source
    self.query_id = query_id
    self.query_text = query_text
    self.search_time = search_time
    self.last_doc = last_doc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.page_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.page_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.refer_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.refer = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.url_refer = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.open = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.open_path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.fresh_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.location_source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.query_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.query_text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I64:
          self.search_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.last_doc = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageRequest')
    if self.page_type is not None:
      oprot.writeFieldBegin('page_type', TType.I32, 1)
      oprot.writeI32(self.page_type)
      oprot.writeFieldEnd()
    if self.page_id is not None:
      oprot.writeFieldBegin('page_id', TType.STRING, 2)
      oprot.writeString(self.page_id)
      oprot.writeFieldEnd()
    if self.refer_type is not None:
      oprot.writeFieldBegin('refer_type', TType.I32, 3)
      oprot.writeI32(self.refer_type)
      oprot.writeFieldEnd()
    if self.refer is not None:
      oprot.writeFieldBegin('refer', TType.STRING, 4)
      oprot.writeString(self.refer)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 5)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.url_refer is not None:
      oprot.writeFieldBegin('url_refer', TType.STRING, 6)
      oprot.writeString(self.url_refer)
      oprot.writeFieldEnd()
    if self.open is not None:
      oprot.writeFieldBegin('open', TType.STRING, 7)
      oprot.writeString(self.open)
      oprot.writeFieldEnd()
    if self.open_path is not None:
      oprot.writeFieldBegin('open_path', TType.STRING, 8)
      oprot.writeString(self.open_path)
      oprot.writeFieldEnd()
    if self.fresh_num is not None:
      oprot.writeFieldBegin('fresh_num', TType.I32, 9)
      oprot.writeI32(self.fresh_num)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 10)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    if self.location_source is not None:
      oprot.writeFieldBegin('location_source', TType.STRING, 20)
      oprot.writeString(self.location_source)
      oprot.writeFieldEnd()
    if self.query_id is not None:
      oprot.writeFieldBegin('query_id', TType.STRING, 21)
      oprot.writeString(self.query_id)
      oprot.writeFieldEnd()
    if self.query_text is not None:
      oprot.writeFieldBegin('query_text', TType.STRING, 22)
      oprot.writeString(self.query_text)
      oprot.writeFieldEnd()
    if self.search_time is not None:
      oprot.writeFieldBegin('search_time', TType.I64, 23)
      oprot.writeI64(self.search_time)
      oprot.writeFieldEnd()
    if self.last_doc is not None:
      oprot.writeFieldBegin('last_doc', TType.STRING, 24)
      oprot.writeString(self.last_doc)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LabelInfo:
  """
  Attributes:
   - label_type
   - label_id
   - label_score
   - show
   - clk
   - label_word
   - level_id
   - match_num
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'label_type', None, None, ), # 1
    (2, TType.I32, 'label_id', None, None, ), # 2
    (3, TType.DOUBLE, 'label_score', None, None, ), # 3
    (4, TType.I32, 'show', None, None, ), # 4
    (5, TType.I32, 'clk', None, None, ), # 5
    (6, TType.STRING, 'label_word', None, None, ), # 6
    (7, TType.I32, 'level_id', None, None, ), # 7
    (8, TType.I32, 'match_num', None, None, ), # 8
  )

  def __init__(self, label_type=None, label_id=None, label_score=None, show=None, clk=None, label_word=None, level_id=None, match_num=None,):
    self.label_type = label_type
    self.label_id = label_id
    self.label_score = label_score
    self.show = show
    self.clk = clk
    self.label_word = label_word
    self.level_id = level_id
    self.match_num = match_num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.label_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.label_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.label_score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.show = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.clk = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.label_word = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.level_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.match_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LabelInfo')
    if self.label_type is not None:
      oprot.writeFieldBegin('label_type', TType.I32, 1)
      oprot.writeI32(self.label_type)
      oprot.writeFieldEnd()
    if self.label_id is not None:
      oprot.writeFieldBegin('label_id', TType.I32, 2)
      oprot.writeI32(self.label_id)
      oprot.writeFieldEnd()
    if self.label_score is not None:
      oprot.writeFieldBegin('label_score', TType.DOUBLE, 3)
      oprot.writeDouble(self.label_score)
      oprot.writeFieldEnd()
    if self.show is not None:
      oprot.writeFieldBegin('show', TType.I32, 4)
      oprot.writeI32(self.show)
      oprot.writeFieldEnd()
    if self.clk is not None:
      oprot.writeFieldBegin('clk', TType.I32, 5)
      oprot.writeI32(self.clk)
      oprot.writeFieldEnd()
    if self.label_word is not None:
      oprot.writeFieldBegin('label_word', TType.STRING, 6)
      oprot.writeString(self.label_word)
      oprot.writeFieldEnd()
    if self.level_id is not None:
      oprot.writeFieldBegin('level_id', TType.I32, 7)
      oprot.writeI32(self.level_id)
      oprot.writeFieldEnd()
    if self.match_num is not None:
      oprot.writeFieldBegin('match_num', TType.I32, 8)
      oprot.writeI32(self.match_num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ItemTimeInfo:
  """
  Attributes:
   - create_time
   - modify_time
   - publish_time
   - delete_time
   - expire_time
   - expire_time2
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'create_time', None, None, ), # 1
    (2, TType.I64, 'modify_time', None, None, ), # 2
    (3, TType.I64, 'publish_time', None, None, ), # 3
    (4, TType.I64, 'delete_time', None, None, ), # 4
    (5, TType.I64, 'expire_time', None, None, ), # 5
    (6, TType.I64, 'expire_time2', None, None, ), # 6
  )

  def __init__(self, create_time=None, modify_time=None, publish_time=None, delete_time=None, expire_time=None, expire_time2=None,):
    self.create_time = create_time
    self.modify_time = modify_time
    self.publish_time = publish_time
    self.delete_time = delete_time
    self.expire_time = expire_time
    self.expire_time2 = expire_time2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.create_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.modify_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.publish_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.delete_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.expire_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.expire_time2 = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ItemTimeInfo')
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I64, 1)
      oprot.writeI64(self.create_time)
      oprot.writeFieldEnd()
    if self.modify_time is not None:
      oprot.writeFieldBegin('modify_time', TType.I64, 2)
      oprot.writeI64(self.modify_time)
      oprot.writeFieldEnd()
    if self.publish_time is not None:
      oprot.writeFieldBegin('publish_time', TType.I64, 3)
      oprot.writeI64(self.publish_time)
      oprot.writeFieldEnd()
    if self.delete_time is not None:
      oprot.writeFieldBegin('delete_time', TType.I64, 4)
      oprot.writeI64(self.delete_time)
      oprot.writeFieldEnd()
    if self.expire_time is not None:
      oprot.writeFieldBegin('expire_time', TType.I64, 5)
      oprot.writeI64(self.expire_time)
      oprot.writeFieldEnd()
    if self.expire_time2 is not None:
      oprot.writeFieldBegin('expire_time2', TType.I64, 6)
      oprot.writeI64(self.expire_time2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MatchInfo:
  """
  Attributes:
   - home_score
   - away_score
   - source
   - status
   - away_name
   - home_name
   - away_flag
   - home_flag
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'home_score', None, None, ), # 1
    (2, TType.I32, 'away_score', None, None, ), # 2
    (3, TType.STRING, 'source', None, None, ), # 3
    (4, TType.STRING, 'status', None, None, ), # 4
    (5, TType.STRING, 'away_name', None, None, ), # 5
    (6, TType.STRING, 'home_name', None, None, ), # 6
    (7, TType.STRING, 'away_flag', None, None, ), # 7
    (8, TType.STRING, 'home_flag', None, None, ), # 8
  )

  def __init__(self, home_score=None, away_score=None, source=None, status=None, away_name=None, home_name=None, away_flag=None, home_flag=None,):
    self.home_score = home_score
    self.away_score = away_score
    self.source = source
    self.status = status
    self.away_name = away_name
    self.home_name = home_name
    self.away_flag = away_flag
    self.home_flag = home_flag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.home_score = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.away_score = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.away_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.home_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.away_flag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.home_flag = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MatchInfo')
    if self.home_score is not None:
      oprot.writeFieldBegin('home_score', TType.I32, 1)
      oprot.writeI32(self.home_score)
      oprot.writeFieldEnd()
    if self.away_score is not None:
      oprot.writeFieldBegin('away_score', TType.I32, 2)
      oprot.writeI32(self.away_score)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 3)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 4)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.away_name is not None:
      oprot.writeFieldBegin('away_name', TType.STRING, 5)
      oprot.writeString(self.away_name)
      oprot.writeFieldEnd()
    if self.home_name is not None:
      oprot.writeFieldBegin('home_name', TType.STRING, 6)
      oprot.writeString(self.home_name)
      oprot.writeFieldEnd()
    if self.away_flag is not None:
      oprot.writeFieldBegin('away_flag', TType.STRING, 7)
      oprot.writeString(self.away_flag)
      oprot.writeFieldEnd()
    if self.home_flag is not None:
      oprot.writeFieldBegin('home_flag', TType.STRING, 8)
      oprot.writeString(self.home_flag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LiveInfo:
  """
  Attributes:
   - room_id
   - type
   - start_time
   - end_time
   - user_count
   - video
   - match_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'room_id', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.STRING, 'start_time', None, None, ), # 3
    (4, TType.STRING, 'end_time', None, None, ), # 4
    (5, TType.I32, 'user_count', None, None, ), # 5
    (6, TType.BOOL, 'video', None, None, ), # 6
    (7, TType.STRUCT, 'match_info', (MatchInfo, MatchInfo.thrift_spec), None, ), # 7
  )

  def __init__(self, room_id=None, type=None, start_time=None, end_time=None, user_count=None, video=None, match_info=None,):
    self.room_id = room_id
    self.type = type
    self.start_time = start_time
    self.end_time = end_time
    self.user_count = user_count
    self.video = video
    self.match_info = match_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.room_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.start_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.end_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.user_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.video = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.match_info = MatchInfo()
          self.match_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LiveInfo')
    if self.room_id is not None:
      oprot.writeFieldBegin('room_id', TType.I32, 1)
      oprot.writeI32(self.room_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.STRING, 3)
      oprot.writeString(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.STRING, 4)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.user_count is not None:
      oprot.writeFieldBegin('user_count', TType.I32, 5)
      oprot.writeI32(self.user_count)
      oprot.writeFieldEnd()
    if self.video is not None:
      oprot.writeFieldBegin('video', TType.BOOL, 6)
      oprot.writeBool(self.video)
      oprot.writeFieldEnd()
    if self.match_info is not None:
      oprot.writeFieldBegin('match_info', TType.STRUCT, 7)
      self.match_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EditorInfo:
  """
  Attributes:
   - editor_name
   - editor_img
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'editor_name', None, None, ), # 1
    (2, TType.STRING, 'editor_img', None, None, ), # 2
  )

  def __init__(self, editor_name=None, editor_img=None,):
    self.editor_name = editor_name
    self.editor_img = editor_img

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.editor_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.editor_img = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EditorInfo')
    if self.editor_name is not None:
      oprot.writeFieldBegin('editor_name', TType.STRING, 1)
      oprot.writeString(self.editor_name)
      oprot.writeFieldEnd()
    if self.editor_img is not None:
      oprot.writeFieldBegin('editor_img', TType.STRING, 2)
      oprot.writeString(self.editor_img)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LableTimeDimension:
  """
  Attributes:
   - label_type
   - time_dimension
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'label_type', None, None, ), # 1
    (2, TType.I32, 'time_dimension', None, None, ), # 2
  )

  def __init__(self, label_type=None, time_dimension=None,):
    self.label_type = label_type
    self.time_dimension = time_dimension

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.label_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.time_dimension = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LableTimeDimension')
    if self.label_type is not None:
      oprot.writeFieldBegin('label_type', TType.I32, 1)
      oprot.writeI32(self.label_type)
      oprot.writeFieldEnd()
    if self.time_dimension is not None:
      oprot.writeFieldBegin('time_dimension', TType.I32, 2)
      oprot.writeI32(self.time_dimension)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ItemInfo:
  """
  Attributes:
   - item_type
   - label_infos
   - item_id
   - list_title
   - original_title
   - source
   - item_time_info
   - desc
   - imgs
   - page_type
   - comment_ids
   - comment_id
   - url
   - sub_title
   - doc_quality
   - rt_label_infos
   - site_id
   - priority
   - label_sequence
   - labels
   - publisher
   - image_count
   - image_group_count
   - image_count_in_group
   - title_char_count
   - title_word_count
   - title_byte_count
   - doc_char_count
   - doc_word_count
   - doc_byte_count
   - doc_passage_count
   - is_santu
   - source_type
   - sansu_score
   - pctr
   - score
   - match_type
   - skip_id
   - board_id
   - rec_source
   - img_type
   - tags
   - pic_count
   - live_info
   - unlike_reason
   - editor
   - dkeys
   - newstype
   - channel_name
   - comment_url
   - comment_num
   - recommend
   - tlastid
   - label
   - topic_link
   - show_keywords
   - sim_hash
   - title_sign
   - titleword_sign
   - target_type
   - column_id
   - pc_weight
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'item_type', None, None, ), # 1
    (2, TType.MAP, 'label_infos', (TType.I32,None,TType.LIST,(TType.STRUCT,(LabelInfo, LabelInfo.thrift_spec))), None, ), # 2
    (3, TType.STRING, 'item_id', None, None, ), # 3
    (4, TType.STRING, 'list_title', None, None, ), # 4
    (5, TType.STRING, 'original_title', None, None, ), # 5
    (6, TType.STRING, 'source', None, None, ), # 6
    (7, TType.STRUCT, 'item_time_info', (ItemTimeInfo, ItemTimeInfo.thrift_spec), None, ), # 7
    (8, TType.STRING, 'desc', None, None, ), # 8
    (9, TType.LIST, 'imgs', (TType.STRING,None), None, ), # 9
    (10, TType.I32, 'page_type', None, None, ), # 10
    (11, TType.LIST, 'comment_ids', (TType.STRING,None), None, ), # 11
    (12, TType.STRING, 'url', None, None, ), # 12
    (13, TType.STRING, 'skip_id', None, None, ), # 13
    (14, TType.STRING, 'board_id', None, None, ), # 14
    (15, TType.STRING, 'rec_source', None, None, ), # 15
    (16, TType.I32, 'img_type', None, None, ), # 16
    (17, TType.STRING, 'tags', None, None, ), # 17
    (18, TType.I32, 'pic_count', None, None, ), # 18
    (19, TType.STRUCT, 'live_info', (LiveInfo, LiveInfo.thrift_spec), None, ), # 19
    None, # 20
    (21, TType.STRING, 'newstype', None, None, ), # 21
    (22, TType.STRING, 'channel_name', None, None, ), # 22
    (23, TType.STRING, 'comment_url', None, None, ), # 23
    (24, TType.I32, 'comment_num', None, None, ), # 24
    (25, TType.BOOL, 'recommend', None, None, ), # 25
    (26, TType.STRING, 'tlastid', None, None, ), # 26
    (27, TType.STRING, 'label', None, None, ), # 27
    (28, TType.STRING, 'topic_link', None, None, ), # 28
    (29, TType.LIST, 'show_keywords', (TType.MAP,(TType.STRING,None,TType.STRING,None)), None, ), # 29
    (30, TType.MAP, 'rt_label_infos', (TType.I32,None,TType.LIST,(TType.STRUCT,(LabelInfo, LabelInfo.thrift_spec))), None, ), # 30
    (31, TType.I32, 'site_id', None, None, ), # 31
    (32, TType.I32, 'priority', None, None, ), # 32
    (33, TType.LIST, 'label_sequence', (TType.STRUCT,(LableTimeDimension, LableTimeDimension.thrift_spec)), None, ), # 33
    (34, TType.MAP, 'labels', (TType.I32,None,TType.LIST,(TType.STRUCT,(LabelInfo, LabelInfo.thrift_spec))), None, ), # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I64, 'sim_hash', None, None, ), # 40
    (41, TType.I64, 'title_sign', None, None, ), # 41
    (42, TType.I64, 'titleword_sign', None, None, ), # 42
    (43, TType.LIST, 'unlike_reason', (TType.STRING,None), None, ), # 43
    (44, TType.LIST, 'editor', (TType.STRUCT,(EditorInfo, EditorInfo.thrift_spec)), None, ), # 44
    (45, TType.STRING, 'dkeys', None, None, ), # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRING, 'publisher', None, None, ), # 50
    (51, TType.I32, 'image_count', None, None, ), # 51
    (52, TType.I32, 'image_group_count', None, None, ), # 52
    (53, TType.I32, 'image_count_in_group', None, None, ), # 53
    (54, TType.I32, 'title_char_count', None, None, ), # 54
    (55, TType.I32, 'title_word_count', None, None, ), # 55
    (56, TType.I32, 'title_byte_count', None, None, ), # 56
    (57, TType.I32, 'doc_char_count', None, None, ), # 57
    (58, TType.I32, 'doc_word_count', None, None, ), # 58
    (59, TType.I32, 'doc_byte_count', None, None, ), # 59
    (60, TType.I32, 'doc_passage_count', None, None, ), # 60
    (61, TType.I32, 'is_santu', None, None, ), # 61
    (62, TType.STRING, 'sub_title', None, None, ), # 62
    (63, TType.STRING, 'comment_id', None, None, ), # 63
    (64, TType.I32, 'source_type', None, None, ), # 64
    (65, TType.I32, 'sansu_score', None, None, ), # 65
    (66, TType.I32, 'doc_quality', None, None, ), # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    (80, TType.I32, 'pctr', None, None, ), # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    None, # 130
    None, # 131
    None, # 132
    None, # 133
    None, # 134
    None, # 135
    None, # 136
    None, # 137
    None, # 138
    None, # 139
    None, # 140
    None, # 141
    None, # 142
    None, # 143
    None, # 144
    None, # 145
    None, # 146
    None, # 147
    None, # 148
    None, # 149
    None, # 150
    None, # 151
    None, # 152
    None, # 153
    None, # 154
    None, # 155
    None, # 156
    None, # 157
    None, # 158
    None, # 159
    None, # 160
    None, # 161
    None, # 162
    None, # 163
    None, # 164
    None, # 165
    None, # 166
    None, # 167
    None, # 168
    None, # 169
    None, # 170
    None, # 171
    None, # 172
    None, # 173
    None, # 174
    None, # 175
    None, # 176
    None, # 177
    None, # 178
    None, # 179
    None, # 180
    None, # 181
    None, # 182
    None, # 183
    None, # 184
    None, # 185
    None, # 186
    None, # 187
    None, # 188
    None, # 189
    None, # 190
    None, # 191
    None, # 192
    None, # 193
    None, # 194
    None, # 195
    None, # 196
    None, # 197
    None, # 198
    None, # 199
    None, # 200
    None, # 201
    None, # 202
    None, # 203
    None, # 204
    None, # 205
    None, # 206
    None, # 207
    None, # 208
    None, # 209
    None, # 210
    None, # 211
    None, # 212
    None, # 213
    None, # 214
    None, # 215
    None, # 216
    None, # 217
    None, # 218
    None, # 219
    None, # 220
    None, # 221
    None, # 222
    None, # 223
    None, # 224
    None, # 225
    None, # 226
    None, # 227
    None, # 228
    None, # 229
    None, # 230
    None, # 231
    None, # 232
    None, # 233
    None, # 234
    None, # 235
    None, # 236
    None, # 237
    None, # 238
    None, # 239
    None, # 240
    None, # 241
    None, # 242
    None, # 243
    None, # 244
    None, # 245
    None, # 246
    None, # 247
    None, # 248
    None, # 249
    None, # 250
    None, # 251
    None, # 252
    None, # 253
    None, # 254
    None, # 255
    None, # 256
    None, # 257
    None, # 258
    None, # 259
    None, # 260
    None, # 261
    None, # 262
    None, # 263
    None, # 264
    None, # 265
    None, # 266
    None, # 267
    None, # 268
    None, # 269
    None, # 270
    None, # 271
    None, # 272
    None, # 273
    None, # 274
    None, # 275
    None, # 276
    None, # 277
    None, # 278
    None, # 279
    None, # 280
    None, # 281
    None, # 282
    None, # 283
    None, # 284
    None, # 285
    None, # 286
    None, # 287
    None, # 288
    None, # 289
    None, # 290
    None, # 291
    None, # 292
    None, # 293
    None, # 294
    None, # 295
    None, # 296
    None, # 297
    None, # 298
    None, # 299
    None, # 300
    None, # 301
    None, # 302
    None, # 303
    None, # 304
    None, # 305
    None, # 306
    None, # 307
    None, # 308
    None, # 309
    None, # 310
    None, # 311
    None, # 312
    None, # 313
    None, # 314
    None, # 315
    None, # 316
    None, # 317
    None, # 318
    None, # 319
    None, # 320
    None, # 321
    None, # 322
    None, # 323
    None, # 324
    None, # 325
    None, # 326
    None, # 327
    None, # 328
    None, # 329
    None, # 330
    None, # 331
    None, # 332
    None, # 333
    None, # 334
    None, # 335
    None, # 336
    None, # 337
    None, # 338
    None, # 339
    None, # 340
    None, # 341
    None, # 342
    None, # 343
    None, # 344
    None, # 345
    None, # 346
    None, # 347
    None, # 348
    None, # 349
    None, # 350
    None, # 351
    None, # 352
    None, # 353
    None, # 354
    None, # 355
    None, # 356
    None, # 357
    None, # 358
    None, # 359
    None, # 360
    None, # 361
    None, # 362
    None, # 363
    None, # 364
    None, # 365
    None, # 366
    None, # 367
    None, # 368
    None, # 369
    None, # 370
    None, # 371
    None, # 372
    None, # 373
    None, # 374
    None, # 375
    None, # 376
    None, # 377
    None, # 378
    None, # 379
    None, # 380
    None, # 381
    None, # 382
    None, # 383
    None, # 384
    None, # 385
    None, # 386
    None, # 387
    None, # 388
    None, # 389
    None, # 390
    None, # 391
    None, # 392
    None, # 393
    None, # 394
    None, # 395
    None, # 396
    None, # 397
    None, # 398
    None, # 399
    None, # 400
    None, # 401
    None, # 402
    None, # 403
    None, # 404
    None, # 405
    None, # 406
    None, # 407
    None, # 408
    None, # 409
    None, # 410
    None, # 411
    None, # 412
    None, # 413
    None, # 414
    None, # 415
    None, # 416
    None, # 417
    None, # 418
    None, # 419
    None, # 420
    None, # 421
    None, # 422
    None, # 423
    None, # 424
    None, # 425
    None, # 426
    None, # 427
    None, # 428
    None, # 429
    None, # 430
    None, # 431
    None, # 432
    None, # 433
    None, # 434
    None, # 435
    None, # 436
    None, # 437
    None, # 438
    None, # 439
    None, # 440
    None, # 441
    None, # 442
    None, # 443
    None, # 444
    None, # 445
    None, # 446
    None, # 447
    None, # 448
    None, # 449
    None, # 450
    None, # 451
    None, # 452
    None, # 453
    None, # 454
    None, # 455
    None, # 456
    None, # 457
    None, # 458
    None, # 459
    None, # 460
    None, # 461
    None, # 462
    None, # 463
    None, # 464
    None, # 465
    None, # 466
    None, # 467
    None, # 468
    None, # 469
    None, # 470
    None, # 471
    None, # 472
    None, # 473
    None, # 474
    None, # 475
    None, # 476
    None, # 477
    None, # 478
    None, # 479
    None, # 480
    None, # 481
    None, # 482
    None, # 483
    None, # 484
    None, # 485
    None, # 486
    None, # 487
    None, # 488
    None, # 489
    None, # 490
    None, # 491
    None, # 492
    None, # 493
    None, # 494
    None, # 495
    None, # 496
    None, # 497
    None, # 498
    None, # 499
    None, # 500
    None, # 501
    None, # 502
    None, # 503
    None, # 504
    None, # 505
    None, # 506
    None, # 507
    None, # 508
    None, # 509
    None, # 510
    None, # 511
    None, # 512
    None, # 513
    None, # 514
    None, # 515
    None, # 516
    None, # 517
    None, # 518
    None, # 519
    None, # 520
    None, # 521
    None, # 522
    None, # 523
    None, # 524
    None, # 525
    None, # 526
    None, # 527
    None, # 528
    None, # 529
    None, # 530
    None, # 531
    None, # 532
    None, # 533
    None, # 534
    None, # 535
    None, # 536
    None, # 537
    None, # 538
    None, # 539
    None, # 540
    None, # 541
    None, # 542
    None, # 543
    None, # 544
    None, # 545
    None, # 546
    None, # 547
    None, # 548
    None, # 549
    None, # 550
    None, # 551
    None, # 552
    None, # 553
    None, # 554
    None, # 555
    None, # 556
    None, # 557
    None, # 558
    None, # 559
    None, # 560
    None, # 561
    None, # 562
    None, # 563
    None, # 564
    None, # 565
    None, # 566
    None, # 567
    None, # 568
    None, # 569
    None, # 570
    None, # 571
    None, # 572
    None, # 573
    None, # 574
    None, # 575
    None, # 576
    None, # 577
    None, # 578
    None, # 579
    None, # 580
    None, # 581
    None, # 582
    None, # 583
    None, # 584
    None, # 585
    None, # 586
    None, # 587
    None, # 588
    None, # 589
    None, # 590
    None, # 591
    None, # 592
    None, # 593
    None, # 594
    None, # 595
    None, # 596
    None, # 597
    None, # 598
    None, # 599
    None, # 600
    None, # 601
    None, # 602
    None, # 603
    None, # 604
    None, # 605
    None, # 606
    None, # 607
    None, # 608
    None, # 609
    None, # 610
    None, # 611
    None, # 612
    None, # 613
    None, # 614
    None, # 615
    None, # 616
    None, # 617
    None, # 618
    None, # 619
    None, # 620
    None, # 621
    None, # 622
    None, # 623
    None, # 624
    None, # 625
    None, # 626
    None, # 627
    None, # 628
    None, # 629
    None, # 630
    None, # 631
    None, # 632
    None, # 633
    None, # 634
    None, # 635
    None, # 636
    None, # 637
    None, # 638
    None, # 639
    None, # 640
    None, # 641
    None, # 642
    None, # 643
    None, # 644
    None, # 645
    None, # 646
    None, # 647
    None, # 648
    None, # 649
    None, # 650
    None, # 651
    None, # 652
    None, # 653
    None, # 654
    None, # 655
    None, # 656
    None, # 657
    None, # 658
    None, # 659
    None, # 660
    None, # 661
    None, # 662
    None, # 663
    None, # 664
    None, # 665
    None, # 666
    None, # 667
    None, # 668
    None, # 669
    None, # 670
    None, # 671
    None, # 672
    None, # 673
    None, # 674
    None, # 675
    None, # 676
    None, # 677
    None, # 678
    None, # 679
    None, # 680
    None, # 681
    None, # 682
    None, # 683
    None, # 684
    None, # 685
    None, # 686
    None, # 687
    None, # 688
    None, # 689
    None, # 690
    None, # 691
    None, # 692
    None, # 693
    None, # 694
    None, # 695
    None, # 696
    None, # 697
    None, # 698
    None, # 699
    None, # 700
    None, # 701
    None, # 702
    None, # 703
    None, # 704
    None, # 705
    None, # 706
    None, # 707
    None, # 708
    None, # 709
    None, # 710
    None, # 711
    None, # 712
    None, # 713
    None, # 714
    None, # 715
    None, # 716
    None, # 717
    None, # 718
    None, # 719
    None, # 720
    None, # 721
    None, # 722
    None, # 723
    None, # 724
    None, # 725
    None, # 726
    None, # 727
    None, # 728
    None, # 729
    None, # 730
    None, # 731
    None, # 732
    None, # 733
    None, # 734
    None, # 735
    None, # 736
    None, # 737
    None, # 738
    None, # 739
    None, # 740
    None, # 741
    None, # 742
    None, # 743
    None, # 744
    None, # 745
    None, # 746
    None, # 747
    None, # 748
    None, # 749
    None, # 750
    None, # 751
    None, # 752
    None, # 753
    None, # 754
    None, # 755
    None, # 756
    None, # 757
    None, # 758
    None, # 759
    None, # 760
    None, # 761
    None, # 762
    None, # 763
    None, # 764
    None, # 765
    None, # 766
    None, # 767
    None, # 768
    None, # 769
    None, # 770
    None, # 771
    None, # 772
    None, # 773
    None, # 774
    None, # 775
    None, # 776
    None, # 777
    None, # 778
    None, # 779
    None, # 780
    None, # 781
    None, # 782
    None, # 783
    None, # 784
    None, # 785
    None, # 786
    None, # 787
    None, # 788
    None, # 789
    None, # 790
    None, # 791
    None, # 792
    None, # 793
    None, # 794
    None, # 795
    None, # 796
    None, # 797
    None, # 798
    None, # 799
    None, # 800
    None, # 801
    None, # 802
    None, # 803
    None, # 804
    None, # 805
    None, # 806
    None, # 807
    None, # 808
    None, # 809
    None, # 810
    None, # 811
    None, # 812
    None, # 813
    None, # 814
    None, # 815
    None, # 816
    None, # 817
    None, # 818
    None, # 819
    None, # 820
    None, # 821
    None, # 822
    None, # 823
    None, # 824
    None, # 825
    None, # 826
    None, # 827
    None, # 828
    None, # 829
    None, # 830
    None, # 831
    None, # 832
    None, # 833
    None, # 834
    None, # 835
    None, # 836
    None, # 837
    None, # 838
    None, # 839
    None, # 840
    None, # 841
    None, # 842
    None, # 843
    None, # 844
    None, # 845
    None, # 846
    None, # 847
    None, # 848
    None, # 849
    None, # 850
    None, # 851
    None, # 852
    None, # 853
    None, # 854
    None, # 855
    None, # 856
    None, # 857
    None, # 858
    None, # 859
    None, # 860
    None, # 861
    None, # 862
    None, # 863
    None, # 864
    None, # 865
    None, # 866
    None, # 867
    None, # 868
    None, # 869
    None, # 870
    None, # 871
    None, # 872
    None, # 873
    None, # 874
    None, # 875
    None, # 876
    None, # 877
    None, # 878
    None, # 879
    None, # 880
    None, # 881
    None, # 882
    None, # 883
    None, # 884
    None, # 885
    None, # 886
    None, # 887
    None, # 888
    None, # 889
    None, # 890
    None, # 891
    None, # 892
    None, # 893
    None, # 894
    None, # 895
    None, # 896
    None, # 897
    None, # 898
    None, # 899
    None, # 900
    None, # 901
    None, # 902
    None, # 903
    None, # 904
    None, # 905
    None, # 906
    None, # 907
    None, # 908
    None, # 909
    None, # 910
    None, # 911
    None, # 912
    None, # 913
    None, # 914
    None, # 915
    None, # 916
    None, # 917
    None, # 918
    None, # 919
    None, # 920
    None, # 921
    None, # 922
    None, # 923
    None, # 924
    None, # 925
    None, # 926
    None, # 927
    None, # 928
    None, # 929
    None, # 930
    None, # 931
    None, # 932
    None, # 933
    None, # 934
    None, # 935
    None, # 936
    None, # 937
    None, # 938
    None, # 939
    None, # 940
    None, # 941
    None, # 942
    None, # 943
    None, # 944
    None, # 945
    None, # 946
    None, # 947
    None, # 948
    None, # 949
    None, # 950
    None, # 951
    None, # 952
    None, # 953
    None, # 954
    None, # 955
    None, # 956
    None, # 957
    None, # 958
    None, # 959
    None, # 960
    None, # 961
    None, # 962
    None, # 963
    None, # 964
    None, # 965
    None, # 966
    None, # 967
    None, # 968
    None, # 969
    None, # 970
    None, # 971
    None, # 972
    None, # 973
    None, # 974
    None, # 975
    None, # 976
    None, # 977
    None, # 978
    None, # 979
    None, # 980
    None, # 981
    None, # 982
    None, # 983
    None, # 984
    None, # 985
    None, # 986
    None, # 987
    None, # 988
    None, # 989
    None, # 990
    None, # 991
    None, # 992
    None, # 993
    None, # 994
    None, # 995
    None, # 996
    None, # 997
    None, # 998
    None, # 999
    (1000, TType.DOUBLE, 'score', None, None, ), # 1000
    (1001, TType.I32, 'match_type', None, None, ), # 1001
    None, # 1002
    None, # 1003
    None, # 1004
    None, # 1005
    None, # 1006
    None, # 1007
    None, # 1008
    None, # 1009
    None, # 1010
    None, # 1011
    None, # 1012
    None, # 1013
    None, # 1014
    None, # 1015
    None, # 1016
    None, # 1017
    None, # 1018
    None, # 1019
    None, # 1020
    None, # 1021
    None, # 1022
    None, # 1023
    None, # 1024
    None, # 1025
    None, # 1026
    None, # 1027
    None, # 1028
    None, # 1029
    None, # 1030
    None, # 1031
    None, # 1032
    None, # 1033
    None, # 1034
    None, # 1035
    None, # 1036
    None, # 1037
    None, # 1038
    None, # 1039
    None, # 1040
    None, # 1041
    None, # 1042
    None, # 1043
    None, # 1044
    None, # 1045
    None, # 1046
    None, # 1047
    None, # 1048
    None, # 1049
    None, # 1050
    None, # 1051
    None, # 1052
    None, # 1053
    None, # 1054
    None, # 1055
    None, # 1056
    None, # 1057
    None, # 1058
    None, # 1059
    None, # 1060
    None, # 1061
    None, # 1062
    None, # 1063
    None, # 1064
    None, # 1065
    None, # 1066
    None, # 1067
    None, # 1068
    None, # 1069
    None, # 1070
    None, # 1071
    None, # 1072
    None, # 1073
    None, # 1074
    None, # 1075
    None, # 1076
    None, # 1077
    None, # 1078
    None, # 1079
    None, # 1080
    None, # 1081
    None, # 1082
    None, # 1083
    None, # 1084
    None, # 1085
    None, # 1086
    None, # 1087
    None, # 1088
    None, # 1089
    None, # 1090
    None, # 1091
    None, # 1092
    None, # 1093
    None, # 1094
    None, # 1095
    None, # 1096
    None, # 1097
    None, # 1098
    None, # 1099
    None, # 1100
    None, # 1101
    None, # 1102
    None, # 1103
    None, # 1104
    None, # 1105
    None, # 1106
    None, # 1107
    None, # 1108
    None, # 1109
    None, # 1110
    None, # 1111
    None, # 1112
    None, # 1113
    None, # 1114
    None, # 1115
    None, # 1116
    None, # 1117
    None, # 1118
    None, # 1119
    None, # 1120
    None, # 1121
    None, # 1122
    None, # 1123
    None, # 1124
    None, # 1125
    None, # 1126
    None, # 1127
    None, # 1128
    None, # 1129
    None, # 1130
    None, # 1131
    None, # 1132
    None, # 1133
    None, # 1134
    None, # 1135
    None, # 1136
    None, # 1137
    None, # 1138
    None, # 1139
    None, # 1140
    None, # 1141
    None, # 1142
    None, # 1143
    None, # 1144
    None, # 1145
    None, # 1146
    None, # 1147
    None, # 1148
    None, # 1149
    None, # 1150
    None, # 1151
    None, # 1152
    None, # 1153
    None, # 1154
    None, # 1155
    None, # 1156
    None, # 1157
    None, # 1158
    None, # 1159
    None, # 1160
    None, # 1161
    None, # 1162
    None, # 1163
    None, # 1164
    None, # 1165
    None, # 1166
    None, # 1167
    None, # 1168
    None, # 1169
    None, # 1170
    None, # 1171
    None, # 1172
    None, # 1173
    None, # 1174
    None, # 1175
    None, # 1176
    None, # 1177
    None, # 1178
    None, # 1179
    None, # 1180
    None, # 1181
    None, # 1182
    None, # 1183
    None, # 1184
    None, # 1185
    None, # 1186
    None, # 1187
    None, # 1188
    None, # 1189
    None, # 1190
    None, # 1191
    None, # 1192
    None, # 1193
    None, # 1194
    None, # 1195
    None, # 1196
    None, # 1197
    None, # 1198
    None, # 1199
    None, # 1200
    None, # 1201
    None, # 1202
    None, # 1203
    None, # 1204
    None, # 1205
    None, # 1206
    None, # 1207
    None, # 1208
    None, # 1209
    None, # 1210
    None, # 1211
    None, # 1212
    None, # 1213
    None, # 1214
    None, # 1215
    None, # 1216
    None, # 1217
    None, # 1218
    None, # 1219
    None, # 1220
    None, # 1221
    None, # 1222
    None, # 1223
    None, # 1224
    None, # 1225
    None, # 1226
    None, # 1227
    None, # 1228
    None, # 1229
    None, # 1230
    None, # 1231
    None, # 1232
    None, # 1233
    None, # 1234
    None, # 1235
    None, # 1236
    None, # 1237
    None, # 1238
    None, # 1239
    None, # 1240
    None, # 1241
    None, # 1242
    None, # 1243
    None, # 1244
    None, # 1245
    None, # 1246
    None, # 1247
    None, # 1248
    None, # 1249
    None, # 1250
    None, # 1251
    None, # 1252
    None, # 1253
    None, # 1254
    None, # 1255
    None, # 1256
    None, # 1257
    None, # 1258
    None, # 1259
    None, # 1260
    None, # 1261
    None, # 1262
    None, # 1263
    None, # 1264
    None, # 1265
    None, # 1266
    None, # 1267
    None, # 1268
    None, # 1269
    None, # 1270
    None, # 1271
    None, # 1272
    None, # 1273
    None, # 1274
    None, # 1275
    None, # 1276
    None, # 1277
    None, # 1278
    None, # 1279
    None, # 1280
    None, # 1281
    None, # 1282
    None, # 1283
    None, # 1284
    None, # 1285
    None, # 1286
    None, # 1287
    None, # 1288
    None, # 1289
    None, # 1290
    None, # 1291
    None, # 1292
    None, # 1293
    None, # 1294
    None, # 1295
    None, # 1296
    None, # 1297
    None, # 1298
    None, # 1299
    None, # 1300
    None, # 1301
    None, # 1302
    None, # 1303
    None, # 1304
    None, # 1305
    None, # 1306
    None, # 1307
    None, # 1308
    None, # 1309
    None, # 1310
    None, # 1311
    None, # 1312
    None, # 1313
    None, # 1314
    None, # 1315
    None, # 1316
    None, # 1317
    None, # 1318
    None, # 1319
    None, # 1320
    None, # 1321
    None, # 1322
    None, # 1323
    None, # 1324
    None, # 1325
    None, # 1326
    None, # 1327
    None, # 1328
    None, # 1329
    None, # 1330
    None, # 1331
    None, # 1332
    None, # 1333
    None, # 1334
    None, # 1335
    None, # 1336
    None, # 1337
    None, # 1338
    None, # 1339
    None, # 1340
    None, # 1341
    None, # 1342
    None, # 1343
    None, # 1344
    None, # 1345
    None, # 1346
    None, # 1347
    None, # 1348
    None, # 1349
    None, # 1350
    None, # 1351
    None, # 1352
    None, # 1353
    None, # 1354
    None, # 1355
    None, # 1356
    None, # 1357
    None, # 1358
    None, # 1359
    None, # 1360
    None, # 1361
    None, # 1362
    None, # 1363
    None, # 1364
    None, # 1365
    None, # 1366
    None, # 1367
    None, # 1368
    None, # 1369
    None, # 1370
    None, # 1371
    None, # 1372
    None, # 1373
    None, # 1374
    None, # 1375
    None, # 1376
    None, # 1377
    None, # 1378
    None, # 1379
    None, # 1380
    None, # 1381
    None, # 1382
    None, # 1383
    None, # 1384
    None, # 1385
    None, # 1386
    None, # 1387
    None, # 1388
    None, # 1389
    None, # 1390
    None, # 1391
    None, # 1392
    None, # 1393
    None, # 1394
    None, # 1395
    None, # 1396
    None, # 1397
    None, # 1398
    None, # 1399
    None, # 1400
    None, # 1401
    None, # 1402
    None, # 1403
    None, # 1404
    None, # 1405
    None, # 1406
    None, # 1407
    None, # 1408
    None, # 1409
    None, # 1410
    None, # 1411
    None, # 1412
    None, # 1413
    None, # 1414
    None, # 1415
    None, # 1416
    None, # 1417
    None, # 1418
    None, # 1419
    None, # 1420
    None, # 1421
    None, # 1422
    None, # 1423
    None, # 1424
    None, # 1425
    None, # 1426
    None, # 1427
    None, # 1428
    None, # 1429
    None, # 1430
    None, # 1431
    None, # 1432
    None, # 1433
    None, # 1434
    None, # 1435
    None, # 1436
    None, # 1437
    None, # 1438
    None, # 1439
    None, # 1440
    None, # 1441
    None, # 1442
    None, # 1443
    None, # 1444
    None, # 1445
    None, # 1446
    None, # 1447
    None, # 1448
    None, # 1449
    None, # 1450
    None, # 1451
    None, # 1452
    None, # 1453
    None, # 1454
    None, # 1455
    None, # 1456
    None, # 1457
    None, # 1458
    None, # 1459
    None, # 1460
    None, # 1461
    None, # 1462
    None, # 1463
    None, # 1464
    None, # 1465
    None, # 1466
    None, # 1467
    None, # 1468
    None, # 1469
    None, # 1470
    None, # 1471
    None, # 1472
    None, # 1473
    None, # 1474
    None, # 1475
    None, # 1476
    None, # 1477
    None, # 1478
    None, # 1479
    None, # 1480
    None, # 1481
    None, # 1482
    None, # 1483
    None, # 1484
    None, # 1485
    None, # 1486
    None, # 1487
    None, # 1488
    None, # 1489
    None, # 1490
    None, # 1491
    None, # 1492
    None, # 1493
    None, # 1494
    None, # 1495
    None, # 1496
    None, # 1497
    None, # 1498
    None, # 1499
    None, # 1500
    None, # 1501
    None, # 1502
    None, # 1503
    None, # 1504
    None, # 1505
    None, # 1506
    None, # 1507
    None, # 1508
    None, # 1509
    None, # 1510
    None, # 1511
    None, # 1512
    None, # 1513
    None, # 1514
    None, # 1515
    None, # 1516
    None, # 1517
    None, # 1518
    None, # 1519
    None, # 1520
    None, # 1521
    None, # 1522
    None, # 1523
    None, # 1524
    None, # 1525
    None, # 1526
    None, # 1527
    None, # 1528
    None, # 1529
    None, # 1530
    None, # 1531
    None, # 1532
    None, # 1533
    None, # 1534
    None, # 1535
    None, # 1536
    None, # 1537
    None, # 1538
    None, # 1539
    None, # 1540
    None, # 1541
    None, # 1542
    None, # 1543
    None, # 1544
    None, # 1545
    None, # 1546
    None, # 1547
    None, # 1548
    None, # 1549
    None, # 1550
    None, # 1551
    None, # 1552
    None, # 1553
    None, # 1554
    None, # 1555
    None, # 1556
    None, # 1557
    None, # 1558
    None, # 1559
    None, # 1560
    None, # 1561
    None, # 1562
    None, # 1563
    None, # 1564
    None, # 1565
    None, # 1566
    None, # 1567
    None, # 1568
    None, # 1569
    None, # 1570
    None, # 1571
    None, # 1572
    None, # 1573
    None, # 1574
    None, # 1575
    None, # 1576
    None, # 1577
    None, # 1578
    None, # 1579
    None, # 1580
    None, # 1581
    None, # 1582
    None, # 1583
    None, # 1584
    None, # 1585
    None, # 1586
    None, # 1587
    None, # 1588
    None, # 1589
    None, # 1590
    None, # 1591
    None, # 1592
    None, # 1593
    None, # 1594
    None, # 1595
    None, # 1596
    None, # 1597
    None, # 1598
    None, # 1599
    None, # 1600
    None, # 1601
    None, # 1602
    None, # 1603
    None, # 1604
    None, # 1605
    None, # 1606
    None, # 1607
    None, # 1608
    None, # 1609
    None, # 1610
    None, # 1611
    None, # 1612
    None, # 1613
    None, # 1614
    None, # 1615
    None, # 1616
    None, # 1617
    None, # 1618
    None, # 1619
    None, # 1620
    None, # 1621
    None, # 1622
    None, # 1623
    None, # 1624
    None, # 1625
    None, # 1626
    None, # 1627
    None, # 1628
    None, # 1629
    None, # 1630
    None, # 1631
    None, # 1632
    None, # 1633
    None, # 1634
    None, # 1635
    None, # 1636
    None, # 1637
    None, # 1638
    None, # 1639
    None, # 1640
    None, # 1641
    None, # 1642
    None, # 1643
    None, # 1644
    None, # 1645
    None, # 1646
    None, # 1647
    None, # 1648
    None, # 1649
    None, # 1650
    None, # 1651
    None, # 1652
    None, # 1653
    None, # 1654
    None, # 1655
    None, # 1656
    None, # 1657
    None, # 1658
    None, # 1659
    None, # 1660
    None, # 1661
    None, # 1662
    None, # 1663
    None, # 1664
    None, # 1665
    None, # 1666
    None, # 1667
    None, # 1668
    None, # 1669
    None, # 1670
    None, # 1671
    None, # 1672
    None, # 1673
    None, # 1674
    None, # 1675
    None, # 1676
    None, # 1677
    None, # 1678
    None, # 1679
    None, # 1680
    None, # 1681
    None, # 1682
    None, # 1683
    None, # 1684
    None, # 1685
    None, # 1686
    None, # 1687
    None, # 1688
    None, # 1689
    None, # 1690
    None, # 1691
    None, # 1692
    None, # 1693
    None, # 1694
    None, # 1695
    None, # 1696
    None, # 1697
    None, # 1698
    None, # 1699
    None, # 1700
    None, # 1701
    None, # 1702
    None, # 1703
    None, # 1704
    None, # 1705
    None, # 1706
    None, # 1707
    None, # 1708
    None, # 1709
    None, # 1710
    None, # 1711
    None, # 1712
    None, # 1713
    None, # 1714
    None, # 1715
    None, # 1716
    None, # 1717
    None, # 1718
    None, # 1719
    None, # 1720
    None, # 1721
    None, # 1722
    None, # 1723
    None, # 1724
    None, # 1725
    None, # 1726
    None, # 1727
    None, # 1728
    None, # 1729
    None, # 1730
    None, # 1731
    None, # 1732
    None, # 1733
    None, # 1734
    None, # 1735
    None, # 1736
    None, # 1737
    None, # 1738
    None, # 1739
    None, # 1740
    None, # 1741
    None, # 1742
    None, # 1743
    None, # 1744
    None, # 1745
    None, # 1746
    None, # 1747
    None, # 1748
    None, # 1749
    None, # 1750
    None, # 1751
    None, # 1752
    None, # 1753
    None, # 1754
    None, # 1755
    None, # 1756
    None, # 1757
    None, # 1758
    None, # 1759
    None, # 1760
    None, # 1761
    None, # 1762
    None, # 1763
    None, # 1764
    None, # 1765
    None, # 1766
    None, # 1767
    None, # 1768
    None, # 1769
    None, # 1770
    None, # 1771
    None, # 1772
    None, # 1773
    None, # 1774
    None, # 1775
    None, # 1776
    None, # 1777
    None, # 1778
    None, # 1779
    None, # 1780
    None, # 1781
    None, # 1782
    None, # 1783
    None, # 1784
    None, # 1785
    None, # 1786
    None, # 1787
    None, # 1788
    None, # 1789
    None, # 1790
    None, # 1791
    None, # 1792
    None, # 1793
    None, # 1794
    None, # 1795
    None, # 1796
    None, # 1797
    None, # 1798
    None, # 1799
    None, # 1800
    None, # 1801
    None, # 1802
    None, # 1803
    None, # 1804
    None, # 1805
    None, # 1806
    None, # 1807
    None, # 1808
    None, # 1809
    None, # 1810
    None, # 1811
    None, # 1812
    None, # 1813
    None, # 1814
    None, # 1815
    None, # 1816
    None, # 1817
    None, # 1818
    None, # 1819
    None, # 1820
    None, # 1821
    None, # 1822
    None, # 1823
    None, # 1824
    None, # 1825
    None, # 1826
    None, # 1827
    None, # 1828
    None, # 1829
    None, # 1830
    None, # 1831
    None, # 1832
    None, # 1833
    None, # 1834
    None, # 1835
    None, # 1836
    None, # 1837
    None, # 1838
    None, # 1839
    None, # 1840
    None, # 1841
    None, # 1842
    None, # 1843
    None, # 1844
    None, # 1845
    None, # 1846
    None, # 1847
    None, # 1848
    None, # 1849
    None, # 1850
    None, # 1851
    None, # 1852
    None, # 1853
    None, # 1854
    None, # 1855
    None, # 1856
    None, # 1857
    None, # 1858
    None, # 1859
    None, # 1860
    None, # 1861
    None, # 1862
    None, # 1863
    None, # 1864
    None, # 1865
    None, # 1866
    None, # 1867
    None, # 1868
    None, # 1869
    None, # 1870
    None, # 1871
    None, # 1872
    None, # 1873
    None, # 1874
    None, # 1875
    None, # 1876
    None, # 1877
    None, # 1878
    None, # 1879
    None, # 1880
    None, # 1881
    None, # 1882
    None, # 1883
    None, # 1884
    None, # 1885
    None, # 1886
    None, # 1887
    None, # 1888
    None, # 1889
    None, # 1890
    None, # 1891
    None, # 1892
    None, # 1893
    None, # 1894
    None, # 1895
    None, # 1896
    None, # 1897
    None, # 1898
    None, # 1899
    None, # 1900
    None, # 1901
    None, # 1902
    None, # 1903
    None, # 1904
    None, # 1905
    None, # 1906
    None, # 1907
    None, # 1908
    None, # 1909
    None, # 1910
    None, # 1911
    None, # 1912
    None, # 1913
    None, # 1914
    None, # 1915
    None, # 1916
    None, # 1917
    None, # 1918
    None, # 1919
    None, # 1920
    None, # 1921
    None, # 1922
    None, # 1923
    None, # 1924
    None, # 1925
    None, # 1926
    None, # 1927
    None, # 1928
    None, # 1929
    None, # 1930
    None, # 1931
    None, # 1932
    None, # 1933
    None, # 1934
    None, # 1935
    None, # 1936
    None, # 1937
    None, # 1938
    None, # 1939
    None, # 1940
    None, # 1941
    None, # 1942
    None, # 1943
    None, # 1944
    None, # 1945
    None, # 1946
    None, # 1947
    None, # 1948
    None, # 1949
    None, # 1950
    None, # 1951
    None, # 1952
    None, # 1953
    None, # 1954
    None, # 1955
    None, # 1956
    None, # 1957
    None, # 1958
    None, # 1959
    None, # 1960
    None, # 1961
    None, # 1962
    None, # 1963
    None, # 1964
    None, # 1965
    None, # 1966
    None, # 1967
    None, # 1968
    None, # 1969
    None, # 1970
    None, # 1971
    None, # 1972
    None, # 1973
    None, # 1974
    None, # 1975
    None, # 1976
    None, # 1977
    None, # 1978
    None, # 1979
    None, # 1980
    None, # 1981
    None, # 1982
    None, # 1983
    None, # 1984
    None, # 1985
    None, # 1986
    None, # 1987
    None, # 1988
    None, # 1989
    None, # 1990
    None, # 1991
    None, # 1992
    None, # 1993
    None, # 1994
    None, # 1995
    None, # 1996
    None, # 1997
    None, # 1998
    None, # 1999
    None, # 2000
    None, # 2001
    None, # 2002
    None, # 2003
    None, # 2004
    None, # 2005
    None, # 2006
    None, # 2007
    None, # 2008
    None, # 2009
    None, # 2010
    None, # 2011
    None, # 2012
    None, # 2013
    None, # 2014
    None, # 2015
    None, # 2016
    None, # 2017
    None, # 2018
    None, # 2019
    None, # 2020
    None, # 2021
    None, # 2022
    None, # 2023
    None, # 2024
    None, # 2025
    None, # 2026
    None, # 2027
    None, # 2028
    None, # 2029
    None, # 2030
    None, # 2031
    None, # 2032
    None, # 2033
    None, # 2034
    None, # 2035
    None, # 2036
    None, # 2037
    None, # 2038
    None, # 2039
    None, # 2040
    None, # 2041
    None, # 2042
    None, # 2043
    None, # 2044
    None, # 2045
    None, # 2046
    None, # 2047
    None, # 2048
    None, # 2049
    None, # 2050
    None, # 2051
    None, # 2052
    None, # 2053
    None, # 2054
    None, # 2055
    None, # 2056
    None, # 2057
    None, # 2058
    None, # 2059
    None, # 2060
    None, # 2061
    None, # 2062
    None, # 2063
    None, # 2064
    None, # 2065
    None, # 2066
    None, # 2067
    None, # 2068
    None, # 2069
    None, # 2070
    None, # 2071
    None, # 2072
    None, # 2073
    None, # 2074
    None, # 2075
    None, # 2076
    None, # 2077
    None, # 2078
    None, # 2079
    None, # 2080
    None, # 2081
    None, # 2082
    None, # 2083
    None, # 2084
    None, # 2085
    None, # 2086
    None, # 2087
    None, # 2088
    None, # 2089
    None, # 2090
    None, # 2091
    None, # 2092
    None, # 2093
    None, # 2094
    None, # 2095
    None, # 2096
    None, # 2097
    None, # 2098
    None, # 2099
    None, # 2100
    None, # 2101
    None, # 2102
    None, # 2103
    None, # 2104
    None, # 2105
    None, # 2106
    None, # 2107
    None, # 2108
    None, # 2109
    None, # 2110
    None, # 2111
    None, # 2112
    None, # 2113
    None, # 2114
    None, # 2115
    None, # 2116
    None, # 2117
    None, # 2118
    None, # 2119
    None, # 2120
    None, # 2121
    None, # 2122
    None, # 2123
    None, # 2124
    None, # 2125
    None, # 2126
    None, # 2127
    None, # 2128
    None, # 2129
    None, # 2130
    None, # 2131
    None, # 2132
    None, # 2133
    None, # 2134
    None, # 2135
    None, # 2136
    None, # 2137
    None, # 2138
    None, # 2139
    None, # 2140
    None, # 2141
    None, # 2142
    None, # 2143
    None, # 2144
    None, # 2145
    None, # 2146
    None, # 2147
    None, # 2148
    None, # 2149
    None, # 2150
    None, # 2151
    None, # 2152
    None, # 2153
    None, # 2154
    None, # 2155
    None, # 2156
    None, # 2157
    None, # 2158
    None, # 2159
    None, # 2160
    None, # 2161
    None, # 2162
    None, # 2163
    None, # 2164
    None, # 2165
    None, # 2166
    None, # 2167
    None, # 2168
    None, # 2169
    None, # 2170
    None, # 2171
    None, # 2172
    None, # 2173
    None, # 2174
    None, # 2175
    None, # 2176
    None, # 2177
    None, # 2178
    None, # 2179
    None, # 2180
    None, # 2181
    None, # 2182
    None, # 2183
    None, # 2184
    None, # 2185
    None, # 2186
    None, # 2187
    None, # 2188
    None, # 2189
    None, # 2190
    None, # 2191
    None, # 2192
    None, # 2193
    None, # 2194
    None, # 2195
    None, # 2196
    None, # 2197
    None, # 2198
    None, # 2199
    None, # 2200
    None, # 2201
    None, # 2202
    None, # 2203
    None, # 2204
    None, # 2205
    None, # 2206
    None, # 2207
    None, # 2208
    None, # 2209
    None, # 2210
    None, # 2211
    None, # 2212
    None, # 2213
    None, # 2214
    None, # 2215
    None, # 2216
    None, # 2217
    None, # 2218
    None, # 2219
    None, # 2220
    None, # 2221
    None, # 2222
    None, # 2223
    None, # 2224
    None, # 2225
    None, # 2226
    None, # 2227
    None, # 2228
    None, # 2229
    None, # 2230
    None, # 2231
    None, # 2232
    None, # 2233
    None, # 2234
    None, # 2235
    None, # 2236
    None, # 2237
    None, # 2238
    None, # 2239
    None, # 2240
    None, # 2241
    None, # 2242
    None, # 2243
    None, # 2244
    None, # 2245
    None, # 2246
    None, # 2247
    None, # 2248
    None, # 2249
    None, # 2250
    None, # 2251
    None, # 2252
    None, # 2253
    None, # 2254
    None, # 2255
    None, # 2256
    None, # 2257
    None, # 2258
    None, # 2259
    None, # 2260
    None, # 2261
    None, # 2262
    None, # 2263
    None, # 2264
    None, # 2265
    None, # 2266
    None, # 2267
    None, # 2268
    None, # 2269
    None, # 2270
    None, # 2271
    None, # 2272
    None, # 2273
    None, # 2274
    None, # 2275
    None, # 2276
    None, # 2277
    None, # 2278
    None, # 2279
    None, # 2280
    None, # 2281
    None, # 2282
    None, # 2283
    None, # 2284
    None, # 2285
    None, # 2286
    None, # 2287
    None, # 2288
    None, # 2289
    None, # 2290
    None, # 2291
    None, # 2292
    None, # 2293
    None, # 2294
    None, # 2295
    None, # 2296
    None, # 2297
    None, # 2298
    None, # 2299
    None, # 2300
    None, # 2301
    None, # 2302
    None, # 2303
    None, # 2304
    None, # 2305
    None, # 2306
    None, # 2307
    None, # 2308
    None, # 2309
    None, # 2310
    None, # 2311
    None, # 2312
    None, # 2313
    None, # 2314
    None, # 2315
    None, # 2316
    None, # 2317
    None, # 2318
    None, # 2319
    None, # 2320
    None, # 2321
    None, # 2322
    None, # 2323
    None, # 2324
    None, # 2325
    None, # 2326
    None, # 2327
    None, # 2328
    None, # 2329
    None, # 2330
    None, # 2331
    None, # 2332
    None, # 2333
    None, # 2334
    None, # 2335
    None, # 2336
    None, # 2337
    None, # 2338
    None, # 2339
    None, # 2340
    None, # 2341
    None, # 2342
    None, # 2343
    None, # 2344
    None, # 2345
    None, # 2346
    None, # 2347
    None, # 2348
    None, # 2349
    None, # 2350
    None, # 2351
    None, # 2352
    None, # 2353
    None, # 2354
    None, # 2355
    None, # 2356
    None, # 2357
    None, # 2358
    None, # 2359
    None, # 2360
    None, # 2361
    None, # 2362
    None, # 2363
    None, # 2364
    None, # 2365
    None, # 2366
    None, # 2367
    None, # 2368
    None, # 2369
    None, # 2370
    None, # 2371
    None, # 2372
    None, # 2373
    None, # 2374
    None, # 2375
    None, # 2376
    None, # 2377
    None, # 2378
    None, # 2379
    None, # 2380
    None, # 2381
    None, # 2382
    None, # 2383
    None, # 2384
    None, # 2385
    None, # 2386
    None, # 2387
    None, # 2388
    None, # 2389
    None, # 2390
    None, # 2391
    None, # 2392
    None, # 2393
    None, # 2394
    None, # 2395
    None, # 2396
    None, # 2397
    None, # 2398
    None, # 2399
    None, # 2400
    None, # 2401
    None, # 2402
    None, # 2403
    None, # 2404
    None, # 2405
    None, # 2406
    None, # 2407
    None, # 2408
    None, # 2409
    None, # 2410
    None, # 2411
    None, # 2412
    None, # 2413
    None, # 2414
    None, # 2415
    None, # 2416
    None, # 2417
    None, # 2418
    None, # 2419
    None, # 2420
    None, # 2421
    None, # 2422
    None, # 2423
    None, # 2424
    None, # 2425
    None, # 2426
    None, # 2427
    None, # 2428
    None, # 2429
    None, # 2430
    None, # 2431
    None, # 2432
    None, # 2433
    None, # 2434
    None, # 2435
    None, # 2436
    None, # 2437
    None, # 2438
    None, # 2439
    None, # 2440
    None, # 2441
    None, # 2442
    None, # 2443
    None, # 2444
    None, # 2445
    None, # 2446
    None, # 2447
    None, # 2448
    None, # 2449
    None, # 2450
    None, # 2451
    None, # 2452
    None, # 2453
    None, # 2454
    None, # 2455
    None, # 2456
    None, # 2457
    None, # 2458
    None, # 2459
    None, # 2460
    None, # 2461
    None, # 2462
    None, # 2463
    None, # 2464
    None, # 2465
    None, # 2466
    None, # 2467
    None, # 2468
    None, # 2469
    None, # 2470
    None, # 2471
    None, # 2472
    None, # 2473
    None, # 2474
    None, # 2475
    None, # 2476
    None, # 2477
    None, # 2478
    None, # 2479
    None, # 2480
    None, # 2481
    None, # 2482
    None, # 2483
    None, # 2484
    None, # 2485
    None, # 2486
    None, # 2487
    None, # 2488
    None, # 2489
    None, # 2490
    None, # 2491
    None, # 2492
    None, # 2493
    None, # 2494
    None, # 2495
    None, # 2496
    None, # 2497
    None, # 2498
    None, # 2499
    None, # 2500
    None, # 2501
    None, # 2502
    None, # 2503
    None, # 2504
    None, # 2505
    None, # 2506
    None, # 2507
    None, # 2508
    None, # 2509
    None, # 2510
    None, # 2511
    None, # 2512
    None, # 2513
    None, # 2514
    None, # 2515
    None, # 2516
    None, # 2517
    None, # 2518
    None, # 2519
    None, # 2520
    None, # 2521
    None, # 2522
    None, # 2523
    None, # 2524
    None, # 2525
    None, # 2526
    None, # 2527
    None, # 2528
    None, # 2529
    None, # 2530
    None, # 2531
    None, # 2532
    None, # 2533
    None, # 2534
    None, # 2535
    None, # 2536
    None, # 2537
    None, # 2538
    None, # 2539
    None, # 2540
    None, # 2541
    None, # 2542
    None, # 2543
    None, # 2544
    None, # 2545
    None, # 2546
    None, # 2547
    None, # 2548
    None, # 2549
    None, # 2550
    None, # 2551
    None, # 2552
    None, # 2553
    None, # 2554
    None, # 2555
    None, # 2556
    None, # 2557
    None, # 2558
    None, # 2559
    None, # 2560
    None, # 2561
    None, # 2562
    None, # 2563
    None, # 2564
    None, # 2565
    None, # 2566
    None, # 2567
    None, # 2568
    None, # 2569
    None, # 2570
    None, # 2571
    None, # 2572
    None, # 2573
    None, # 2574
    None, # 2575
    None, # 2576
    None, # 2577
    None, # 2578
    None, # 2579
    None, # 2580
    None, # 2581
    None, # 2582
    None, # 2583
    None, # 2584
    None, # 2585
    None, # 2586
    None, # 2587
    None, # 2588
    None, # 2589
    None, # 2590
    None, # 2591
    None, # 2592
    None, # 2593
    None, # 2594
    None, # 2595
    None, # 2596
    None, # 2597
    None, # 2598
    None, # 2599
    None, # 2600
    None, # 2601
    None, # 2602
    None, # 2603
    None, # 2604
    None, # 2605
    None, # 2606
    None, # 2607
    None, # 2608
    None, # 2609
    None, # 2610
    None, # 2611
    None, # 2612
    None, # 2613
    None, # 2614
    None, # 2615
    None, # 2616
    None, # 2617
    None, # 2618
    None, # 2619
    None, # 2620
    None, # 2621
    None, # 2622
    None, # 2623
    None, # 2624
    None, # 2625
    None, # 2626
    None, # 2627
    None, # 2628
    None, # 2629
    None, # 2630
    None, # 2631
    None, # 2632
    None, # 2633
    None, # 2634
    None, # 2635
    None, # 2636
    None, # 2637
    None, # 2638
    None, # 2639
    None, # 2640
    None, # 2641
    None, # 2642
    None, # 2643
    None, # 2644
    None, # 2645
    None, # 2646
    None, # 2647
    None, # 2648
    None, # 2649
    None, # 2650
    None, # 2651
    None, # 2652
    None, # 2653
    None, # 2654
    None, # 2655
    None, # 2656
    None, # 2657
    None, # 2658
    None, # 2659
    None, # 2660
    None, # 2661
    None, # 2662
    None, # 2663
    None, # 2664
    None, # 2665
    None, # 2666
    None, # 2667
    None, # 2668
    None, # 2669
    None, # 2670
    None, # 2671
    None, # 2672
    None, # 2673
    None, # 2674
    None, # 2675
    None, # 2676
    None, # 2677
    None, # 2678
    None, # 2679
    None, # 2680
    None, # 2681
    None, # 2682
    None, # 2683
    None, # 2684
    None, # 2685
    None, # 2686
    None, # 2687
    None, # 2688
    None, # 2689
    None, # 2690
    None, # 2691
    None, # 2692
    None, # 2693
    None, # 2694
    None, # 2695
    None, # 2696
    None, # 2697
    None, # 2698
    None, # 2699
    None, # 2700
    None, # 2701
    None, # 2702
    None, # 2703
    None, # 2704
    None, # 2705
    None, # 2706
    None, # 2707
    None, # 2708
    None, # 2709
    None, # 2710
    None, # 2711
    None, # 2712
    None, # 2713
    None, # 2714
    None, # 2715
    None, # 2716
    None, # 2717
    None, # 2718
    None, # 2719
    None, # 2720
    None, # 2721
    None, # 2722
    None, # 2723
    None, # 2724
    None, # 2725
    None, # 2726
    None, # 2727
    None, # 2728
    None, # 2729
    None, # 2730
    None, # 2731
    None, # 2732
    None, # 2733
    None, # 2734
    None, # 2735
    None, # 2736
    None, # 2737
    None, # 2738
    None, # 2739
    None, # 2740
    None, # 2741
    None, # 2742
    None, # 2743
    None, # 2744
    None, # 2745
    None, # 2746
    None, # 2747
    None, # 2748
    None, # 2749
    None, # 2750
    None, # 2751
    None, # 2752
    None, # 2753
    None, # 2754
    None, # 2755
    None, # 2756
    None, # 2757
    None, # 2758
    None, # 2759
    None, # 2760
    None, # 2761
    None, # 2762
    None, # 2763
    None, # 2764
    None, # 2765
    None, # 2766
    None, # 2767
    None, # 2768
    None, # 2769
    None, # 2770
    None, # 2771
    None, # 2772
    None, # 2773
    None, # 2774
    None, # 2775
    None, # 2776
    None, # 2777
    None, # 2778
    None, # 2779
    None, # 2780
    None, # 2781
    None, # 2782
    None, # 2783
    None, # 2784
    None, # 2785
    None, # 2786
    None, # 2787
    None, # 2788
    None, # 2789
    None, # 2790
    None, # 2791
    None, # 2792
    None, # 2793
    None, # 2794
    None, # 2795
    None, # 2796
    None, # 2797
    None, # 2798
    None, # 2799
    None, # 2800
    None, # 2801
    None, # 2802
    None, # 2803
    None, # 2804
    None, # 2805
    None, # 2806
    None, # 2807
    None, # 2808
    None, # 2809
    None, # 2810
    None, # 2811
    None, # 2812
    None, # 2813
    None, # 2814
    None, # 2815
    None, # 2816
    None, # 2817
    None, # 2818
    None, # 2819
    None, # 2820
    None, # 2821
    None, # 2822
    None, # 2823
    None, # 2824
    None, # 2825
    None, # 2826
    None, # 2827
    None, # 2828
    None, # 2829
    None, # 2830
    None, # 2831
    None, # 2832
    None, # 2833
    None, # 2834
    None, # 2835
    None, # 2836
    None, # 2837
    None, # 2838
    None, # 2839
    None, # 2840
    None, # 2841
    None, # 2842
    None, # 2843
    None, # 2844
    None, # 2845
    None, # 2846
    None, # 2847
    None, # 2848
    None, # 2849
    None, # 2850
    None, # 2851
    None, # 2852
    None, # 2853
    None, # 2854
    None, # 2855
    None, # 2856
    None, # 2857
    None, # 2858
    None, # 2859
    None, # 2860
    None, # 2861
    None, # 2862
    None, # 2863
    None, # 2864
    None, # 2865
    None, # 2866
    None, # 2867
    None, # 2868
    None, # 2869
    None, # 2870
    None, # 2871
    None, # 2872
    None, # 2873
    None, # 2874
    None, # 2875
    None, # 2876
    None, # 2877
    None, # 2878
    None, # 2879
    None, # 2880
    None, # 2881
    None, # 2882
    None, # 2883
    None, # 2884
    None, # 2885
    None, # 2886
    None, # 2887
    None, # 2888
    None, # 2889
    None, # 2890
    None, # 2891
    None, # 2892
    None, # 2893
    None, # 2894
    None, # 2895
    None, # 2896
    None, # 2897
    None, # 2898
    None, # 2899
    None, # 2900
    None, # 2901
    None, # 2902
    None, # 2903
    None, # 2904
    None, # 2905
    None, # 2906
    None, # 2907
    None, # 2908
    None, # 2909
    None, # 2910
    None, # 2911
    None, # 2912
    None, # 2913
    None, # 2914
    None, # 2915
    None, # 2916
    None, # 2917
    None, # 2918
    None, # 2919
    None, # 2920
    None, # 2921
    None, # 2922
    None, # 2923
    None, # 2924
    None, # 2925
    None, # 2926
    None, # 2927
    None, # 2928
    None, # 2929
    None, # 2930
    None, # 2931
    None, # 2932
    None, # 2933
    None, # 2934
    None, # 2935
    None, # 2936
    None, # 2937
    None, # 2938
    None, # 2939
    None, # 2940
    None, # 2941
    None, # 2942
    None, # 2943
    None, # 2944
    None, # 2945
    None, # 2946
    None, # 2947
    None, # 2948
    None, # 2949
    None, # 2950
    None, # 2951
    None, # 2952
    None, # 2953
    None, # 2954
    None, # 2955
    None, # 2956
    None, # 2957
    None, # 2958
    None, # 2959
    None, # 2960
    None, # 2961
    None, # 2962
    None, # 2963
    None, # 2964
    None, # 2965
    None, # 2966
    None, # 2967
    None, # 2968
    None, # 2969
    None, # 2970
    None, # 2971
    None, # 2972
    None, # 2973
    None, # 2974
    None, # 2975
    None, # 2976
    None, # 2977
    None, # 2978
    None, # 2979
    None, # 2980
    None, # 2981
    None, # 2982
    None, # 2983
    None, # 2984
    None, # 2985
    None, # 2986
    None, # 2987
    None, # 2988
    None, # 2989
    None, # 2990
    None, # 2991
    None, # 2992
    None, # 2993
    None, # 2994
    None, # 2995
    None, # 2996
    None, # 2997
    None, # 2998
    None, # 2999
    None, # 3000
    None, # 3001
    None, # 3002
    None, # 3003
    None, # 3004
    None, # 3005
    None, # 3006
    None, # 3007
    None, # 3008
    None, # 3009
    None, # 3010
    None, # 3011
    None, # 3012
    None, # 3013
    None, # 3014
    None, # 3015
    None, # 3016
    None, # 3017
    None, # 3018
    None, # 3019
    None, # 3020
    None, # 3021
    None, # 3022
    None, # 3023
    None, # 3024
    None, # 3025
    None, # 3026
    None, # 3027
    None, # 3028
    None, # 3029
    None, # 3030
    None, # 3031
    None, # 3032
    None, # 3033
    None, # 3034
    None, # 3035
    None, # 3036
    None, # 3037
    None, # 3038
    None, # 3039
    None, # 3040
    None, # 3041
    None, # 3042
    None, # 3043
    None, # 3044
    None, # 3045
    None, # 3046
    None, # 3047
    None, # 3048
    None, # 3049
    None, # 3050
    None, # 3051
    None, # 3052
    None, # 3053
    None, # 3054
    None, # 3055
    None, # 3056
    None, # 3057
    None, # 3058
    None, # 3059
    None, # 3060
    None, # 3061
    None, # 3062
    None, # 3063
    None, # 3064
    None, # 3065
    None, # 3066
    None, # 3067
    None, # 3068
    None, # 3069
    None, # 3070
    None, # 3071
    None, # 3072
    None, # 3073
    None, # 3074
    None, # 3075
    None, # 3076
    None, # 3077
    None, # 3078
    None, # 3079
    None, # 3080
    None, # 3081
    None, # 3082
    None, # 3083
    None, # 3084
    None, # 3085
    None, # 3086
    None, # 3087
    None, # 3088
    None, # 3089
    None, # 3090
    None, # 3091
    None, # 3092
    None, # 3093
    None, # 3094
    None, # 3095
    None, # 3096
    None, # 3097
    None, # 3098
    None, # 3099
    None, # 3100
    None, # 3101
    None, # 3102
    None, # 3103
    None, # 3104
    None, # 3105
    None, # 3106
    None, # 3107
    None, # 3108
    None, # 3109
    None, # 3110
    None, # 3111
    None, # 3112
    None, # 3113
    None, # 3114
    None, # 3115
    None, # 3116
    None, # 3117
    None, # 3118
    None, # 3119
    None, # 3120
    None, # 3121
    None, # 3122
    None, # 3123
    None, # 3124
    None, # 3125
    None, # 3126
    None, # 3127
    None, # 3128
    None, # 3129
    None, # 3130
    None, # 3131
    None, # 3132
    None, # 3133
    None, # 3134
    None, # 3135
    None, # 3136
    None, # 3137
    None, # 3138
    None, # 3139
    None, # 3140
    None, # 3141
    None, # 3142
    None, # 3143
    None, # 3144
    None, # 3145
    None, # 3146
    None, # 3147
    None, # 3148
    None, # 3149
    None, # 3150
    None, # 3151
    None, # 3152
    None, # 3153
    None, # 3154
    None, # 3155
    None, # 3156
    None, # 3157
    None, # 3158
    None, # 3159
    None, # 3160
    None, # 3161
    None, # 3162
    None, # 3163
    None, # 3164
    None, # 3165
    None, # 3166
    None, # 3167
    None, # 3168
    None, # 3169
    None, # 3170
    None, # 3171
    None, # 3172
    None, # 3173
    None, # 3174
    None, # 3175
    None, # 3176
    None, # 3177
    None, # 3178
    None, # 3179
    None, # 3180
    None, # 3181
    None, # 3182
    None, # 3183
    None, # 3184
    None, # 3185
    None, # 3186
    None, # 3187
    None, # 3188
    None, # 3189
    None, # 3190
    None, # 3191
    None, # 3192
    None, # 3193
    None, # 3194
    None, # 3195
    None, # 3196
    None, # 3197
    None, # 3198
    None, # 3199
    None, # 3200
    None, # 3201
    None, # 3202
    None, # 3203
    None, # 3204
    None, # 3205
    None, # 3206
    None, # 3207
    None, # 3208
    None, # 3209
    None, # 3210
    None, # 3211
    None, # 3212
    None, # 3213
    None, # 3214
    None, # 3215
    None, # 3216
    None, # 3217
    None, # 3218
    None, # 3219
    None, # 3220
    None, # 3221
    None, # 3222
    None, # 3223
    None, # 3224
    None, # 3225
    None, # 3226
    None, # 3227
    None, # 3228
    None, # 3229
    None, # 3230
    None, # 3231
    None, # 3232
    None, # 3233
    None, # 3234
    None, # 3235
    None, # 3236
    None, # 3237
    None, # 3238
    None, # 3239
    None, # 3240
    None, # 3241
    None, # 3242
    None, # 3243
    None, # 3244
    None, # 3245
    None, # 3246
    None, # 3247
    None, # 3248
    None, # 3249
    None, # 3250
    None, # 3251
    None, # 3252
    None, # 3253
    None, # 3254
    None, # 3255
    None, # 3256
    None, # 3257
    None, # 3258
    None, # 3259
    None, # 3260
    None, # 3261
    None, # 3262
    None, # 3263
    None, # 3264
    None, # 3265
    None, # 3266
    None, # 3267
    None, # 3268
    None, # 3269
    None, # 3270
    None, # 3271
    None, # 3272
    None, # 3273
    None, # 3274
    None, # 3275
    None, # 3276
    None, # 3277
    None, # 3278
    None, # 3279
    None, # 3280
    None, # 3281
    None, # 3282
    None, # 3283
    None, # 3284
    None, # 3285
    None, # 3286
    None, # 3287
    None, # 3288
    None, # 3289
    None, # 3290
    None, # 3291
    None, # 3292
    None, # 3293
    None, # 3294
    None, # 3295
    None, # 3296
    None, # 3297
    None, # 3298
    None, # 3299
    None, # 3300
    None, # 3301
    None, # 3302
    None, # 3303
    None, # 3304
    None, # 3305
    None, # 3306
    None, # 3307
    None, # 3308
    None, # 3309
    None, # 3310
    None, # 3311
    None, # 3312
    None, # 3313
    None, # 3314
    None, # 3315
    None, # 3316
    None, # 3317
    None, # 3318
    None, # 3319
    None, # 3320
    None, # 3321
    None, # 3322
    None, # 3323
    None, # 3324
    None, # 3325
    None, # 3326
    None, # 3327
    None, # 3328
    None, # 3329
    None, # 3330
    None, # 3331
    None, # 3332
    None, # 3333
    None, # 3334
    None, # 3335
    None, # 3336
    None, # 3337
    None, # 3338
    None, # 3339
    None, # 3340
    None, # 3341
    None, # 3342
    None, # 3343
    None, # 3344
    None, # 3345
    None, # 3346
    None, # 3347
    None, # 3348
    None, # 3349
    None, # 3350
    None, # 3351
    None, # 3352
    None, # 3353
    None, # 3354
    None, # 3355
    None, # 3356
    None, # 3357
    None, # 3358
    None, # 3359
    None, # 3360
    None, # 3361
    None, # 3362
    None, # 3363
    None, # 3364
    None, # 3365
    None, # 3366
    None, # 3367
    None, # 3368
    None, # 3369
    None, # 3370
    None, # 3371
    None, # 3372
    None, # 3373
    None, # 3374
    None, # 3375
    None, # 3376
    None, # 3377
    None, # 3378
    None, # 3379
    None, # 3380
    None, # 3381
    None, # 3382
    None, # 3383
    None, # 3384
    None, # 3385
    None, # 3386
    None, # 3387
    None, # 3388
    None, # 3389
    None, # 3390
    None, # 3391
    None, # 3392
    None, # 3393
    None, # 3394
    None, # 3395
    None, # 3396
    None, # 3397
    None, # 3398
    None, # 3399
    None, # 3400
    None, # 3401
    None, # 3402
    None, # 3403
    None, # 3404
    None, # 3405
    None, # 3406
    None, # 3407
    None, # 3408
    None, # 3409
    None, # 3410
    None, # 3411
    None, # 3412
    None, # 3413
    None, # 3414
    None, # 3415
    None, # 3416
    None, # 3417
    None, # 3418
    None, # 3419
    None, # 3420
    None, # 3421
    None, # 3422
    None, # 3423
    None, # 3424
    None, # 3425
    None, # 3426
    None, # 3427
    None, # 3428
    None, # 3429
    None, # 3430
    None, # 3431
    None, # 3432
    None, # 3433
    None, # 3434
    None, # 3435
    None, # 3436
    None, # 3437
    None, # 3438
    None, # 3439
    None, # 3440
    None, # 3441
    None, # 3442
    None, # 3443
    None, # 3444
    None, # 3445
    None, # 3446
    None, # 3447
    None, # 3448
    None, # 3449
    None, # 3450
    None, # 3451
    None, # 3452
    None, # 3453
    None, # 3454
    None, # 3455
    None, # 3456
    None, # 3457
    None, # 3458
    None, # 3459
    None, # 3460
    None, # 3461
    None, # 3462
    None, # 3463
    None, # 3464
    None, # 3465
    None, # 3466
    None, # 3467
    None, # 3468
    None, # 3469
    None, # 3470
    None, # 3471
    None, # 3472
    None, # 3473
    None, # 3474
    None, # 3475
    None, # 3476
    None, # 3477
    None, # 3478
    None, # 3479
    None, # 3480
    None, # 3481
    None, # 3482
    None, # 3483
    None, # 3484
    None, # 3485
    None, # 3486
    None, # 3487
    None, # 3488
    None, # 3489
    None, # 3490
    None, # 3491
    None, # 3492
    None, # 3493
    None, # 3494
    None, # 3495
    None, # 3496
    None, # 3497
    None, # 3498
    None, # 3499
    None, # 3500
    None, # 3501
    None, # 3502
    None, # 3503
    None, # 3504
    None, # 3505
    None, # 3506
    None, # 3507
    None, # 3508
    None, # 3509
    None, # 3510
    None, # 3511
    None, # 3512
    None, # 3513
    None, # 3514
    None, # 3515
    None, # 3516
    None, # 3517
    None, # 3518
    None, # 3519
    None, # 3520
    None, # 3521
    None, # 3522
    None, # 3523
    None, # 3524
    None, # 3525
    None, # 3526
    None, # 3527
    None, # 3528
    None, # 3529
    None, # 3530
    None, # 3531
    None, # 3532
    None, # 3533
    None, # 3534
    None, # 3535
    None, # 3536
    None, # 3537
    None, # 3538
    None, # 3539
    None, # 3540
    None, # 3541
    None, # 3542
    None, # 3543
    None, # 3544
    None, # 3545
    None, # 3546
    None, # 3547
    None, # 3548
    None, # 3549
    None, # 3550
    None, # 3551
    None, # 3552
    None, # 3553
    None, # 3554
    None, # 3555
    None, # 3556
    None, # 3557
    None, # 3558
    None, # 3559
    None, # 3560
    None, # 3561
    None, # 3562
    None, # 3563
    None, # 3564
    None, # 3565
    None, # 3566
    None, # 3567
    None, # 3568
    None, # 3569
    None, # 3570
    None, # 3571
    None, # 3572
    None, # 3573
    None, # 3574
    None, # 3575
    None, # 3576
    None, # 3577
    None, # 3578
    None, # 3579
    None, # 3580
    None, # 3581
    None, # 3582
    None, # 3583
    None, # 3584
    None, # 3585
    None, # 3586
    None, # 3587
    None, # 3588
    None, # 3589
    None, # 3590
    None, # 3591
    None, # 3592
    None, # 3593
    None, # 3594
    None, # 3595
    None, # 3596
    None, # 3597
    None, # 3598
    None, # 3599
    None, # 3600
    None, # 3601
    None, # 3602
    None, # 3603
    None, # 3604
    None, # 3605
    None, # 3606
    None, # 3607
    None, # 3608
    None, # 3609
    None, # 3610
    None, # 3611
    None, # 3612
    None, # 3613
    None, # 3614
    None, # 3615
    None, # 3616
    None, # 3617
    None, # 3618
    None, # 3619
    None, # 3620
    None, # 3621
    None, # 3622
    None, # 3623
    None, # 3624
    None, # 3625
    None, # 3626
    None, # 3627
    None, # 3628
    None, # 3629
    None, # 3630
    None, # 3631
    None, # 3632
    None, # 3633
    None, # 3634
    None, # 3635
    None, # 3636
    None, # 3637
    None, # 3638
    None, # 3639
    None, # 3640
    None, # 3641
    None, # 3642
    None, # 3643
    None, # 3644
    None, # 3645
    None, # 3646
    None, # 3647
    None, # 3648
    None, # 3649
    None, # 3650
    None, # 3651
    None, # 3652
    None, # 3653
    None, # 3654
    None, # 3655
    None, # 3656
    None, # 3657
    None, # 3658
    None, # 3659
    None, # 3660
    None, # 3661
    None, # 3662
    None, # 3663
    None, # 3664
    None, # 3665
    None, # 3666
    None, # 3667
    None, # 3668
    None, # 3669
    None, # 3670
    None, # 3671
    None, # 3672
    None, # 3673
    None, # 3674
    None, # 3675
    None, # 3676
    None, # 3677
    None, # 3678
    None, # 3679
    None, # 3680
    None, # 3681
    None, # 3682
    None, # 3683
    None, # 3684
    None, # 3685
    None, # 3686
    None, # 3687
    None, # 3688
    None, # 3689
    None, # 3690
    None, # 3691
    None, # 3692
    None, # 3693
    None, # 3694
    None, # 3695
    None, # 3696
    None, # 3697
    None, # 3698
    None, # 3699
    None, # 3700
    None, # 3701
    None, # 3702
    None, # 3703
    None, # 3704
    None, # 3705
    None, # 3706
    None, # 3707
    None, # 3708
    None, # 3709
    None, # 3710
    None, # 3711
    None, # 3712
    None, # 3713
    None, # 3714
    None, # 3715
    None, # 3716
    None, # 3717
    None, # 3718
    None, # 3719
    None, # 3720
    None, # 3721
    None, # 3722
    None, # 3723
    None, # 3724
    None, # 3725
    None, # 3726
    None, # 3727
    None, # 3728
    None, # 3729
    None, # 3730
    None, # 3731
    None, # 3732
    None, # 3733
    None, # 3734
    None, # 3735
    None, # 3736
    None, # 3737
    None, # 3738
    None, # 3739
    None, # 3740
    None, # 3741
    None, # 3742
    None, # 3743
    None, # 3744
    None, # 3745
    None, # 3746
    None, # 3747
    None, # 3748
    None, # 3749
    None, # 3750
    None, # 3751
    None, # 3752
    None, # 3753
    None, # 3754
    None, # 3755
    None, # 3756
    None, # 3757
    None, # 3758
    None, # 3759
    None, # 3760
    None, # 3761
    None, # 3762
    None, # 3763
    None, # 3764
    None, # 3765
    None, # 3766
    None, # 3767
    None, # 3768
    None, # 3769
    None, # 3770
    None, # 3771
    None, # 3772
    None, # 3773
    None, # 3774
    None, # 3775
    None, # 3776
    None, # 3777
    None, # 3778
    None, # 3779
    None, # 3780
    None, # 3781
    None, # 3782
    None, # 3783
    None, # 3784
    None, # 3785
    None, # 3786
    None, # 3787
    None, # 3788
    None, # 3789
    None, # 3790
    None, # 3791
    None, # 3792
    None, # 3793
    None, # 3794
    None, # 3795
    None, # 3796
    None, # 3797
    None, # 3798
    None, # 3799
    None, # 3800
    None, # 3801
    None, # 3802
    None, # 3803
    None, # 3804
    None, # 3805
    None, # 3806
    None, # 3807
    None, # 3808
    None, # 3809
    None, # 3810
    None, # 3811
    None, # 3812
    None, # 3813
    None, # 3814
    None, # 3815
    None, # 3816
    None, # 3817
    None, # 3818
    None, # 3819
    None, # 3820
    None, # 3821
    None, # 3822
    None, # 3823
    None, # 3824
    None, # 3825
    None, # 3826
    None, # 3827
    None, # 3828
    None, # 3829
    None, # 3830
    None, # 3831
    None, # 3832
    None, # 3833
    None, # 3834
    None, # 3835
    None, # 3836
    None, # 3837
    None, # 3838
    None, # 3839
    None, # 3840
    None, # 3841
    None, # 3842
    None, # 3843
    None, # 3844
    None, # 3845
    None, # 3846
    None, # 3847
    None, # 3848
    None, # 3849
    None, # 3850
    None, # 3851
    None, # 3852
    None, # 3853
    None, # 3854
    None, # 3855
    None, # 3856
    None, # 3857
    None, # 3858
    None, # 3859
    None, # 3860
    None, # 3861
    None, # 3862
    None, # 3863
    None, # 3864
    None, # 3865
    None, # 3866
    None, # 3867
    None, # 3868
    None, # 3869
    None, # 3870
    None, # 3871
    None, # 3872
    None, # 3873
    None, # 3874
    None, # 3875
    None, # 3876
    None, # 3877
    None, # 3878
    None, # 3879
    None, # 3880
    None, # 3881
    None, # 3882
    None, # 3883
    None, # 3884
    None, # 3885
    None, # 3886
    None, # 3887
    None, # 3888
    None, # 3889
    None, # 3890
    None, # 3891
    None, # 3892
    None, # 3893
    None, # 3894
    None, # 3895
    None, # 3896
    None, # 3897
    None, # 3898
    None, # 3899
    None, # 3900
    None, # 3901
    None, # 3902
    None, # 3903
    None, # 3904
    None, # 3905
    None, # 3906
    None, # 3907
    None, # 3908
    None, # 3909
    None, # 3910
    None, # 3911
    None, # 3912
    None, # 3913
    None, # 3914
    None, # 3915
    None, # 3916
    None, # 3917
    None, # 3918
    None, # 3919
    None, # 3920
    None, # 3921
    None, # 3922
    None, # 3923
    None, # 3924
    None, # 3925
    None, # 3926
    None, # 3927
    None, # 3928
    None, # 3929
    None, # 3930
    None, # 3931
    None, # 3932
    None, # 3933
    None, # 3934
    None, # 3935
    None, # 3936
    None, # 3937
    None, # 3938
    None, # 3939
    None, # 3940
    None, # 3941
    None, # 3942
    None, # 3943
    None, # 3944
    None, # 3945
    None, # 3946
    None, # 3947
    None, # 3948
    None, # 3949
    None, # 3950
    None, # 3951
    None, # 3952
    None, # 3953
    None, # 3954
    None, # 3955
    None, # 3956
    None, # 3957
    None, # 3958
    None, # 3959
    None, # 3960
    None, # 3961
    None, # 3962
    None, # 3963
    None, # 3964
    None, # 3965
    None, # 3966
    None, # 3967
    None, # 3968
    None, # 3969
    None, # 3970
    None, # 3971
    None, # 3972
    None, # 3973
    None, # 3974
    None, # 3975
    None, # 3976
    None, # 3977
    None, # 3978
    None, # 3979
    None, # 3980
    None, # 3981
    None, # 3982
    None, # 3983
    None, # 3984
    None, # 3985
    None, # 3986
    None, # 3987
    None, # 3988
    None, # 3989
    None, # 3990
    None, # 3991
    None, # 3992
    None, # 3993
    None, # 3994
    None, # 3995
    None, # 3996
    None, # 3997
    None, # 3998
    None, # 3999
    None, # 4000
    None, # 4001
    None, # 4002
    None, # 4003
    None, # 4004
    None, # 4005
    None, # 4006
    None, # 4007
    None, # 4008
    None, # 4009
    None, # 4010
    None, # 4011
    None, # 4012
    None, # 4013
    None, # 4014
    None, # 4015
    None, # 4016
    None, # 4017
    None, # 4018
    None, # 4019
    None, # 4020
    None, # 4021
    None, # 4022
    None, # 4023
    None, # 4024
    None, # 4025
    None, # 4026
    None, # 4027
    None, # 4028
    None, # 4029
    None, # 4030
    None, # 4031
    None, # 4032
    None, # 4033
    None, # 4034
    None, # 4035
    None, # 4036
    None, # 4037
    None, # 4038
    None, # 4039
    None, # 4040
    None, # 4041
    None, # 4042
    None, # 4043
    None, # 4044
    None, # 4045
    None, # 4046
    None, # 4047
    None, # 4048
    None, # 4049
    None, # 4050
    None, # 4051
    None, # 4052
    None, # 4053
    None, # 4054
    None, # 4055
    None, # 4056
    None, # 4057
    None, # 4058
    None, # 4059
    None, # 4060
    None, # 4061
    None, # 4062
    None, # 4063
    None, # 4064
    None, # 4065
    None, # 4066
    None, # 4067
    None, # 4068
    None, # 4069
    None, # 4070
    None, # 4071
    None, # 4072
    None, # 4073
    None, # 4074
    None, # 4075
    None, # 4076
    None, # 4077
    None, # 4078
    None, # 4079
    None, # 4080
    None, # 4081
    None, # 4082
    None, # 4083
    None, # 4084
    None, # 4085
    None, # 4086
    None, # 4087
    None, # 4088
    None, # 4089
    None, # 4090
    None, # 4091
    None, # 4092
    None, # 4093
    None, # 4094
    None, # 4095
    None, # 4096
    None, # 4097
    None, # 4098
    None, # 4099
    None, # 4100
    None, # 4101
    None, # 4102
    None, # 4103
    None, # 4104
    None, # 4105
    None, # 4106
    None, # 4107
    None, # 4108
    None, # 4109
    None, # 4110
    None, # 4111
    None, # 4112
    None, # 4113
    None, # 4114
    None, # 4115
    None, # 4116
    None, # 4117
    None, # 4118
    None, # 4119
    None, # 4120
    None, # 4121
    None, # 4122
    None, # 4123
    None, # 4124
    None, # 4125
    None, # 4126
    None, # 4127
    None, # 4128
    None, # 4129
    None, # 4130
    None, # 4131
    None, # 4132
    None, # 4133
    None, # 4134
    None, # 4135
    None, # 4136
    None, # 4137
    None, # 4138
    None, # 4139
    None, # 4140
    None, # 4141
    None, # 4142
    None, # 4143
    None, # 4144
    None, # 4145
    None, # 4146
    None, # 4147
    None, # 4148
    None, # 4149
    None, # 4150
    None, # 4151
    None, # 4152
    None, # 4153
    None, # 4154
    None, # 4155
    None, # 4156
    None, # 4157
    None, # 4158
    None, # 4159
    None, # 4160
    None, # 4161
    None, # 4162
    None, # 4163
    None, # 4164
    None, # 4165
    None, # 4166
    None, # 4167
    None, # 4168
    None, # 4169
    None, # 4170
    None, # 4171
    None, # 4172
    None, # 4173
    None, # 4174
    None, # 4175
    None, # 4176
    None, # 4177
    None, # 4178
    None, # 4179
    None, # 4180
    None, # 4181
    None, # 4182
    None, # 4183
    None, # 4184
    None, # 4185
    None, # 4186
    None, # 4187
    None, # 4188
    None, # 4189
    None, # 4190
    None, # 4191
    None, # 4192
    None, # 4193
    None, # 4194
    None, # 4195
    None, # 4196
    None, # 4197
    None, # 4198
    None, # 4199
    None, # 4200
    None, # 4201
    None, # 4202
    None, # 4203
    None, # 4204
    None, # 4205
    None, # 4206
    None, # 4207
    None, # 4208
    None, # 4209
    None, # 4210
    None, # 4211
    None, # 4212
    None, # 4213
    None, # 4214
    None, # 4215
    None, # 4216
    None, # 4217
    None, # 4218
    None, # 4219
    None, # 4220
    None, # 4221
    None, # 4222
    None, # 4223
    None, # 4224
    None, # 4225
    None, # 4226
    None, # 4227
    None, # 4228
    None, # 4229
    None, # 4230
    None, # 4231
    None, # 4232
    None, # 4233
    None, # 4234
    None, # 4235
    None, # 4236
    None, # 4237
    None, # 4238
    None, # 4239
    None, # 4240
    None, # 4241
    None, # 4242
    None, # 4243
    None, # 4244
    None, # 4245
    None, # 4246
    None, # 4247
    None, # 4248
    None, # 4249
    None, # 4250
    None, # 4251
    None, # 4252
    None, # 4253
    None, # 4254
    None, # 4255
    None, # 4256
    None, # 4257
    None, # 4258
    None, # 4259
    None, # 4260
    None, # 4261
    None, # 4262
    None, # 4263
    None, # 4264
    None, # 4265
    None, # 4266
    None, # 4267
    None, # 4268
    None, # 4269
    None, # 4270
    None, # 4271
    None, # 4272
    None, # 4273
    None, # 4274
    None, # 4275
    None, # 4276
    None, # 4277
    None, # 4278
    None, # 4279
    None, # 4280
    None, # 4281
    None, # 4282
    None, # 4283
    None, # 4284
    None, # 4285
    None, # 4286
    None, # 4287
    None, # 4288
    None, # 4289
    None, # 4290
    None, # 4291
    None, # 4292
    None, # 4293
    None, # 4294
    None, # 4295
    None, # 4296
    None, # 4297
    None, # 4298
    None, # 4299
    None, # 4300
    None, # 4301
    None, # 4302
    None, # 4303
    None, # 4304
    None, # 4305
    None, # 4306
    None, # 4307
    None, # 4308
    None, # 4309
    None, # 4310
    None, # 4311
    None, # 4312
    None, # 4313
    None, # 4314
    None, # 4315
    None, # 4316
    None, # 4317
    None, # 4318
    None, # 4319
    None, # 4320
    None, # 4321
    None, # 4322
    None, # 4323
    None, # 4324
    None, # 4325
    None, # 4326
    None, # 4327
    None, # 4328
    None, # 4329
    None, # 4330
    None, # 4331
    None, # 4332
    None, # 4333
    None, # 4334
    None, # 4335
    None, # 4336
    None, # 4337
    None, # 4338
    None, # 4339
    None, # 4340
    None, # 4341
    None, # 4342
    None, # 4343
    None, # 4344
    None, # 4345
    None, # 4346
    None, # 4347
    None, # 4348
    None, # 4349
    None, # 4350
    None, # 4351
    None, # 4352
    None, # 4353
    None, # 4354
    None, # 4355
    None, # 4356
    None, # 4357
    None, # 4358
    None, # 4359
    None, # 4360
    None, # 4361
    None, # 4362
    None, # 4363
    None, # 4364
    None, # 4365
    None, # 4366
    None, # 4367
    None, # 4368
    None, # 4369
    None, # 4370
    None, # 4371
    None, # 4372
    None, # 4373
    None, # 4374
    None, # 4375
    None, # 4376
    None, # 4377
    None, # 4378
    None, # 4379
    None, # 4380
    None, # 4381
    None, # 4382
    None, # 4383
    None, # 4384
    None, # 4385
    None, # 4386
    None, # 4387
    None, # 4388
    None, # 4389
    None, # 4390
    None, # 4391
    None, # 4392
    None, # 4393
    None, # 4394
    None, # 4395
    None, # 4396
    None, # 4397
    None, # 4398
    None, # 4399
    None, # 4400
    None, # 4401
    None, # 4402
    None, # 4403
    None, # 4404
    None, # 4405
    None, # 4406
    None, # 4407
    None, # 4408
    None, # 4409
    None, # 4410
    None, # 4411
    None, # 4412
    None, # 4413
    None, # 4414
    None, # 4415
    None, # 4416
    None, # 4417
    None, # 4418
    None, # 4419
    None, # 4420
    None, # 4421
    None, # 4422
    None, # 4423
    None, # 4424
    None, # 4425
    None, # 4426
    None, # 4427
    None, # 4428
    None, # 4429
    None, # 4430
    None, # 4431
    None, # 4432
    None, # 4433
    None, # 4434
    None, # 4435
    None, # 4436
    None, # 4437
    None, # 4438
    None, # 4439
    None, # 4440
    None, # 4441
    None, # 4442
    None, # 4443
    None, # 4444
    None, # 4445
    None, # 4446
    None, # 4447
    None, # 4448
    None, # 4449
    None, # 4450
    None, # 4451
    None, # 4452
    None, # 4453
    None, # 4454
    None, # 4455
    None, # 4456
    None, # 4457
    None, # 4458
    None, # 4459
    None, # 4460
    None, # 4461
    None, # 4462
    None, # 4463
    None, # 4464
    None, # 4465
    None, # 4466
    None, # 4467
    None, # 4468
    None, # 4469
    None, # 4470
    None, # 4471
    None, # 4472
    None, # 4473
    None, # 4474
    None, # 4475
    None, # 4476
    None, # 4477
    None, # 4478
    None, # 4479
    None, # 4480
    None, # 4481
    None, # 4482
    None, # 4483
    None, # 4484
    None, # 4485
    None, # 4486
    None, # 4487
    None, # 4488
    None, # 4489
    None, # 4490
    None, # 4491
    None, # 4492
    None, # 4493
    None, # 4494
    None, # 4495
    None, # 4496
    None, # 4497
    None, # 4498
    None, # 4499
    None, # 4500
    None, # 4501
    None, # 4502
    None, # 4503
    None, # 4504
    None, # 4505
    None, # 4506
    None, # 4507
    None, # 4508
    None, # 4509
    None, # 4510
    None, # 4511
    None, # 4512
    None, # 4513
    None, # 4514
    None, # 4515
    None, # 4516
    None, # 4517
    None, # 4518
    None, # 4519
    None, # 4520
    None, # 4521
    None, # 4522
    None, # 4523
    None, # 4524
    None, # 4525
    None, # 4526
    None, # 4527
    None, # 4528
    None, # 4529
    None, # 4530
    None, # 4531
    None, # 4532
    None, # 4533
    None, # 4534
    None, # 4535
    None, # 4536
    None, # 4537
    None, # 4538
    None, # 4539
    None, # 4540
    None, # 4541
    None, # 4542
    None, # 4543
    None, # 4544
    None, # 4545
    None, # 4546
    None, # 4547
    None, # 4548
    None, # 4549
    None, # 4550
    None, # 4551
    None, # 4552
    None, # 4553
    None, # 4554
    None, # 4555
    None, # 4556
    None, # 4557
    None, # 4558
    None, # 4559
    None, # 4560
    None, # 4561
    None, # 4562
    None, # 4563
    None, # 4564
    None, # 4565
    None, # 4566
    None, # 4567
    None, # 4568
    None, # 4569
    None, # 4570
    None, # 4571
    None, # 4572
    None, # 4573
    None, # 4574
    None, # 4575
    None, # 4576
    None, # 4577
    None, # 4578
    None, # 4579
    None, # 4580
    None, # 4581
    None, # 4582
    None, # 4583
    None, # 4584
    None, # 4585
    None, # 4586
    None, # 4587
    None, # 4588
    None, # 4589
    None, # 4590
    None, # 4591
    None, # 4592
    None, # 4593
    None, # 4594
    None, # 4595
    None, # 4596
    None, # 4597
    None, # 4598
    None, # 4599
    None, # 4600
    None, # 4601
    None, # 4602
    None, # 4603
    None, # 4604
    None, # 4605
    None, # 4606
    None, # 4607
    None, # 4608
    None, # 4609
    None, # 4610
    None, # 4611
    None, # 4612
    None, # 4613
    None, # 4614
    None, # 4615
    None, # 4616
    None, # 4617
    None, # 4618
    None, # 4619
    None, # 4620
    None, # 4621
    None, # 4622
    None, # 4623
    None, # 4624
    None, # 4625
    None, # 4626
    None, # 4627
    None, # 4628
    None, # 4629
    None, # 4630
    None, # 4631
    None, # 4632
    None, # 4633
    None, # 4634
    None, # 4635
    None, # 4636
    None, # 4637
    None, # 4638
    None, # 4639
    None, # 4640
    None, # 4641
    None, # 4642
    None, # 4643
    None, # 4644
    None, # 4645
    None, # 4646
    None, # 4647
    None, # 4648
    None, # 4649
    None, # 4650
    None, # 4651
    None, # 4652
    None, # 4653
    None, # 4654
    None, # 4655
    None, # 4656
    None, # 4657
    None, # 4658
    None, # 4659
    None, # 4660
    None, # 4661
    None, # 4662
    None, # 4663
    None, # 4664
    None, # 4665
    None, # 4666
    None, # 4667
    None, # 4668
    None, # 4669
    None, # 4670
    None, # 4671
    None, # 4672
    None, # 4673
    None, # 4674
    None, # 4675
    None, # 4676
    None, # 4677
    None, # 4678
    None, # 4679
    None, # 4680
    None, # 4681
    None, # 4682
    None, # 4683
    None, # 4684
    None, # 4685
    None, # 4686
    None, # 4687
    None, # 4688
    None, # 4689
    None, # 4690
    None, # 4691
    None, # 4692
    None, # 4693
    None, # 4694
    None, # 4695
    None, # 4696
    None, # 4697
    None, # 4698
    None, # 4699
    None, # 4700
    None, # 4701
    None, # 4702
    None, # 4703
    None, # 4704
    None, # 4705
    None, # 4706
    None, # 4707
    None, # 4708
    None, # 4709
    None, # 4710
    None, # 4711
    None, # 4712
    None, # 4713
    None, # 4714
    None, # 4715
    None, # 4716
    None, # 4717
    None, # 4718
    None, # 4719
    None, # 4720
    None, # 4721
    None, # 4722
    None, # 4723
    None, # 4724
    None, # 4725
    None, # 4726
    None, # 4727
    None, # 4728
    None, # 4729
    None, # 4730
    None, # 4731
    None, # 4732
    None, # 4733
    None, # 4734
    None, # 4735
    None, # 4736
    None, # 4737
    None, # 4738
    None, # 4739
    None, # 4740
    None, # 4741
    None, # 4742
    None, # 4743
    None, # 4744
    None, # 4745
    None, # 4746
    None, # 4747
    None, # 4748
    None, # 4749
    None, # 4750
    None, # 4751
    None, # 4752
    None, # 4753
    None, # 4754
    None, # 4755
    None, # 4756
    None, # 4757
    None, # 4758
    None, # 4759
    None, # 4760
    None, # 4761
    None, # 4762
    None, # 4763
    None, # 4764
    None, # 4765
    None, # 4766
    None, # 4767
    None, # 4768
    None, # 4769
    None, # 4770
    None, # 4771
    None, # 4772
    None, # 4773
    None, # 4774
    None, # 4775
    None, # 4776
    None, # 4777
    None, # 4778
    None, # 4779
    None, # 4780
    None, # 4781
    None, # 4782
    None, # 4783
    None, # 4784
    None, # 4785
    None, # 4786
    None, # 4787
    None, # 4788
    None, # 4789
    None, # 4790
    None, # 4791
    None, # 4792
    None, # 4793
    None, # 4794
    None, # 4795
    None, # 4796
    None, # 4797
    None, # 4798
    None, # 4799
    None, # 4800
    None, # 4801
    None, # 4802
    None, # 4803
    None, # 4804
    None, # 4805
    None, # 4806
    None, # 4807
    None, # 4808
    None, # 4809
    None, # 4810
    None, # 4811
    None, # 4812
    None, # 4813
    None, # 4814
    None, # 4815
    None, # 4816
    None, # 4817
    None, # 4818
    None, # 4819
    None, # 4820
    None, # 4821
    None, # 4822
    None, # 4823
    None, # 4824
    None, # 4825
    None, # 4826
    None, # 4827
    None, # 4828
    None, # 4829
    None, # 4830
    None, # 4831
    None, # 4832
    None, # 4833
    None, # 4834
    None, # 4835
    None, # 4836
    None, # 4837
    None, # 4838
    None, # 4839
    None, # 4840
    None, # 4841
    None, # 4842
    None, # 4843
    None, # 4844
    None, # 4845
    None, # 4846
    None, # 4847
    None, # 4848
    None, # 4849
    None, # 4850
    None, # 4851
    None, # 4852
    None, # 4853
    None, # 4854
    None, # 4855
    None, # 4856
    None, # 4857
    None, # 4858
    None, # 4859
    None, # 4860
    None, # 4861
    None, # 4862
    None, # 4863
    None, # 4864
    None, # 4865
    None, # 4866
    None, # 4867
    None, # 4868
    None, # 4869
    None, # 4870
    None, # 4871
    None, # 4872
    None, # 4873
    None, # 4874
    None, # 4875
    None, # 4876
    None, # 4877
    None, # 4878
    None, # 4879
    None, # 4880
    None, # 4881
    None, # 4882
    None, # 4883
    None, # 4884
    None, # 4885
    None, # 4886
    None, # 4887
    None, # 4888
    None, # 4889
    None, # 4890
    None, # 4891
    None, # 4892
    None, # 4893
    None, # 4894
    None, # 4895
    None, # 4896
    None, # 4897
    None, # 4898
    None, # 4899
    None, # 4900
    None, # 4901
    None, # 4902
    None, # 4903
    None, # 4904
    None, # 4905
    None, # 4906
    None, # 4907
    None, # 4908
    None, # 4909
    None, # 4910
    None, # 4911
    None, # 4912
    None, # 4913
    None, # 4914
    None, # 4915
    None, # 4916
    None, # 4917
    None, # 4918
    None, # 4919
    None, # 4920
    None, # 4921
    None, # 4922
    None, # 4923
    None, # 4924
    None, # 4925
    None, # 4926
    None, # 4927
    None, # 4928
    None, # 4929
    None, # 4930
    None, # 4931
    None, # 4932
    None, # 4933
    None, # 4934
    None, # 4935
    None, # 4936
    None, # 4937
    None, # 4938
    None, # 4939
    None, # 4940
    None, # 4941
    None, # 4942
    None, # 4943
    None, # 4944
    None, # 4945
    None, # 4946
    None, # 4947
    None, # 4948
    None, # 4949
    None, # 4950
    None, # 4951
    None, # 4952
    None, # 4953
    None, # 4954
    None, # 4955
    None, # 4956
    None, # 4957
    None, # 4958
    None, # 4959
    None, # 4960
    None, # 4961
    None, # 4962
    None, # 4963
    None, # 4964
    None, # 4965
    None, # 4966
    None, # 4967
    None, # 4968
    None, # 4969
    None, # 4970
    None, # 4971
    None, # 4972
    None, # 4973
    None, # 4974
    None, # 4975
    None, # 4976
    None, # 4977
    None, # 4978
    None, # 4979
    None, # 4980
    None, # 4981
    None, # 4982
    None, # 4983
    None, # 4984
    None, # 4985
    None, # 4986
    None, # 4987
    None, # 4988
    None, # 4989
    None, # 4990
    None, # 4991
    None, # 4992
    None, # 4993
    None, # 4994
    None, # 4995
    None, # 4996
    None, # 4997
    None, # 4998
    None, # 4999
    None, # 5000
    None, # 5001
    None, # 5002
    None, # 5003
    None, # 5004
    None, # 5005
    None, # 5006
    None, # 5007
    None, # 5008
    None, # 5009
    None, # 5010
    None, # 5011
    None, # 5012
    None, # 5013
    None, # 5014
    None, # 5015
    None, # 5016
    None, # 5017
    None, # 5018
    None, # 5019
    None, # 5020
    None, # 5021
    None, # 5022
    None, # 5023
    None, # 5024
    None, # 5025
    None, # 5026
    None, # 5027
    None, # 5028
    None, # 5029
    None, # 5030
    None, # 5031
    None, # 5032
    None, # 5033
    None, # 5034
    None, # 5035
    None, # 5036
    None, # 5037
    None, # 5038
    None, # 5039
    None, # 5040
    None, # 5041
    None, # 5042
    None, # 5043
    None, # 5044
    None, # 5045
    None, # 5046
    None, # 5047
    None, # 5048
    None, # 5049
    None, # 5050
    None, # 5051
    None, # 5052
    None, # 5053
    None, # 5054
    None, # 5055
    None, # 5056
    None, # 5057
    None, # 5058
    None, # 5059
    None, # 5060
    None, # 5061
    None, # 5062
    None, # 5063
    None, # 5064
    None, # 5065
    None, # 5066
    None, # 5067
    None, # 5068
    None, # 5069
    None, # 5070
    None, # 5071
    None, # 5072
    None, # 5073
    None, # 5074
    None, # 5075
    None, # 5076
    None, # 5077
    None, # 5078
    None, # 5079
    None, # 5080
    None, # 5081
    None, # 5082
    None, # 5083
    None, # 5084
    None, # 5085
    None, # 5086
    None, # 5087
    None, # 5088
    None, # 5089
    None, # 5090
    None, # 5091
    None, # 5092
    None, # 5093
    None, # 5094
    None, # 5095
    None, # 5096
    None, # 5097
    None, # 5098
    None, # 5099
    None, # 5100
    None, # 5101
    None, # 5102
    None, # 5103
    None, # 5104
    None, # 5105
    None, # 5106
    None, # 5107
    None, # 5108
    None, # 5109
    None, # 5110
    None, # 5111
    None, # 5112
    None, # 5113
    None, # 5114
    None, # 5115
    None, # 5116
    None, # 5117
    None, # 5118
    None, # 5119
    None, # 5120
    None, # 5121
    None, # 5122
    None, # 5123
    None, # 5124
    None, # 5125
    None, # 5126
    None, # 5127
    None, # 5128
    None, # 5129
    None, # 5130
    None, # 5131
    None, # 5132
    None, # 5133
    None, # 5134
    None, # 5135
    None, # 5136
    None, # 5137
    None, # 5138
    None, # 5139
    None, # 5140
    None, # 5141
    None, # 5142
    None, # 5143
    None, # 5144
    None, # 5145
    None, # 5146
    None, # 5147
    None, # 5148
    None, # 5149
    None, # 5150
    None, # 5151
    None, # 5152
    None, # 5153
    None, # 5154
    None, # 5155
    None, # 5156
    None, # 5157
    None, # 5158
    None, # 5159
    None, # 5160
    None, # 5161
    None, # 5162
    None, # 5163
    None, # 5164
    None, # 5165
    None, # 5166
    None, # 5167
    None, # 5168
    None, # 5169
    None, # 5170
    None, # 5171
    None, # 5172
    None, # 5173
    None, # 5174
    None, # 5175
    None, # 5176
    None, # 5177
    None, # 5178
    None, # 5179
    None, # 5180
    None, # 5181
    None, # 5182
    None, # 5183
    None, # 5184
    None, # 5185
    None, # 5186
    None, # 5187
    None, # 5188
    None, # 5189
    None, # 5190
    None, # 5191
    None, # 5192
    None, # 5193
    None, # 5194
    None, # 5195
    None, # 5196
    None, # 5197
    None, # 5198
    None, # 5199
    None, # 5200
    None, # 5201
    None, # 5202
    None, # 5203
    None, # 5204
    None, # 5205
    None, # 5206
    None, # 5207
    None, # 5208
    None, # 5209
    None, # 5210
    None, # 5211
    None, # 5212
    None, # 5213
    None, # 5214
    None, # 5215
    None, # 5216
    None, # 5217
    None, # 5218
    None, # 5219
    None, # 5220
    None, # 5221
    None, # 5222
    None, # 5223
    None, # 5224
    None, # 5225
    None, # 5226
    None, # 5227
    None, # 5228
    None, # 5229
    None, # 5230
    None, # 5231
    None, # 5232
    None, # 5233
    None, # 5234
    None, # 5235
    None, # 5236
    None, # 5237
    None, # 5238
    None, # 5239
    None, # 5240
    None, # 5241
    None, # 5242
    None, # 5243
    None, # 5244
    None, # 5245
    None, # 5246
    None, # 5247
    None, # 5248
    None, # 5249
    None, # 5250
    None, # 5251
    None, # 5252
    None, # 5253
    None, # 5254
    None, # 5255
    None, # 5256
    None, # 5257
    None, # 5258
    None, # 5259
    None, # 5260
    None, # 5261
    None, # 5262
    None, # 5263
    None, # 5264
    None, # 5265
    None, # 5266
    None, # 5267
    None, # 5268
    None, # 5269
    None, # 5270
    None, # 5271
    None, # 5272
    None, # 5273
    None, # 5274
    None, # 5275
    None, # 5276
    None, # 5277
    None, # 5278
    None, # 5279
    None, # 5280
    None, # 5281
    None, # 5282
    None, # 5283
    None, # 5284
    None, # 5285
    None, # 5286
    None, # 5287
    None, # 5288
    None, # 5289
    None, # 5290
    None, # 5291
    None, # 5292
    None, # 5293
    None, # 5294
    None, # 5295
    None, # 5296
    None, # 5297
    None, # 5298
    None, # 5299
    None, # 5300
    None, # 5301
    None, # 5302
    None, # 5303
    None, # 5304
    None, # 5305
    None, # 5306
    None, # 5307
    None, # 5308
    None, # 5309
    None, # 5310
    None, # 5311
    None, # 5312
    None, # 5313
    None, # 5314
    None, # 5315
    None, # 5316
    None, # 5317
    None, # 5318
    None, # 5319
    None, # 5320
    None, # 5321
    None, # 5322
    None, # 5323
    None, # 5324
    None, # 5325
    None, # 5326
    None, # 5327
    None, # 5328
    None, # 5329
    None, # 5330
    None, # 5331
    None, # 5332
    None, # 5333
    None, # 5334
    None, # 5335
    None, # 5336
    None, # 5337
    None, # 5338
    None, # 5339
    None, # 5340
    None, # 5341
    None, # 5342
    None, # 5343
    None, # 5344
    None, # 5345
    None, # 5346
    None, # 5347
    None, # 5348
    None, # 5349
    None, # 5350
    None, # 5351
    None, # 5352
    None, # 5353
    None, # 5354
    None, # 5355
    None, # 5356
    None, # 5357
    None, # 5358
    None, # 5359
    None, # 5360
    None, # 5361
    None, # 5362
    None, # 5363
    None, # 5364
    None, # 5365
    None, # 5366
    None, # 5367
    None, # 5368
    None, # 5369
    None, # 5370
    None, # 5371
    None, # 5372
    None, # 5373
    None, # 5374
    None, # 5375
    None, # 5376
    None, # 5377
    None, # 5378
    None, # 5379
    None, # 5380
    None, # 5381
    None, # 5382
    None, # 5383
    None, # 5384
    None, # 5385
    None, # 5386
    None, # 5387
    None, # 5388
    None, # 5389
    None, # 5390
    None, # 5391
    None, # 5392
    None, # 5393
    None, # 5394
    None, # 5395
    None, # 5396
    None, # 5397
    None, # 5398
    None, # 5399
    None, # 5400
    None, # 5401
    None, # 5402
    None, # 5403
    None, # 5404
    None, # 5405
    None, # 5406
    None, # 5407
    None, # 5408
    None, # 5409
    None, # 5410
    None, # 5411
    None, # 5412
    None, # 5413
    None, # 5414
    None, # 5415
    None, # 5416
    None, # 5417
    None, # 5418
    None, # 5419
    None, # 5420
    None, # 5421
    None, # 5422
    None, # 5423
    None, # 5424
    None, # 5425
    None, # 5426
    None, # 5427
    None, # 5428
    None, # 5429
    None, # 5430
    None, # 5431
    None, # 5432
    None, # 5433
    None, # 5434
    None, # 5435
    None, # 5436
    None, # 5437
    None, # 5438
    None, # 5439
    None, # 5440
    None, # 5441
    None, # 5442
    None, # 5443
    None, # 5444
    None, # 5445
    None, # 5446
    None, # 5447
    None, # 5448
    None, # 5449
    None, # 5450
    None, # 5451
    None, # 5452
    None, # 5453
    None, # 5454
    None, # 5455
    None, # 5456
    None, # 5457
    None, # 5458
    None, # 5459
    None, # 5460
    None, # 5461
    None, # 5462
    None, # 5463
    None, # 5464
    None, # 5465
    None, # 5466
    None, # 5467
    None, # 5468
    None, # 5469
    None, # 5470
    None, # 5471
    None, # 5472
    None, # 5473
    None, # 5474
    None, # 5475
    None, # 5476
    None, # 5477
    None, # 5478
    None, # 5479
    None, # 5480
    None, # 5481
    None, # 5482
    None, # 5483
    None, # 5484
    None, # 5485
    None, # 5486
    None, # 5487
    None, # 5488
    None, # 5489
    None, # 5490
    None, # 5491
    None, # 5492
    None, # 5493
    None, # 5494
    None, # 5495
    None, # 5496
    None, # 5497
    None, # 5498
    None, # 5499
    None, # 5500
    None, # 5501
    None, # 5502
    None, # 5503
    None, # 5504
    None, # 5505
    None, # 5506
    None, # 5507
    None, # 5508
    None, # 5509
    None, # 5510
    None, # 5511
    None, # 5512
    None, # 5513
    None, # 5514
    None, # 5515
    None, # 5516
    None, # 5517
    None, # 5518
    None, # 5519
    None, # 5520
    None, # 5521
    None, # 5522
    None, # 5523
    None, # 5524
    None, # 5525
    None, # 5526
    None, # 5527
    None, # 5528
    None, # 5529
    None, # 5530
    None, # 5531
    None, # 5532
    None, # 5533
    None, # 5534
    None, # 5535
    None, # 5536
    None, # 5537
    None, # 5538
    None, # 5539
    None, # 5540
    None, # 5541
    None, # 5542
    None, # 5543
    None, # 5544
    None, # 5545
    None, # 5546
    None, # 5547
    None, # 5548
    None, # 5549
    None, # 5550
    None, # 5551
    None, # 5552
    None, # 5553
    None, # 5554
    None, # 5555
    None, # 5556
    None, # 5557
    None, # 5558
    None, # 5559
    None, # 5560
    None, # 5561
    None, # 5562
    None, # 5563
    None, # 5564
    None, # 5565
    None, # 5566
    None, # 5567
    None, # 5568
    None, # 5569
    None, # 5570
    None, # 5571
    None, # 5572
    None, # 5573
    None, # 5574
    None, # 5575
    None, # 5576
    None, # 5577
    None, # 5578
    None, # 5579
    None, # 5580
    None, # 5581
    None, # 5582
    None, # 5583
    None, # 5584
    None, # 5585
    None, # 5586
    None, # 5587
    None, # 5588
    None, # 5589
    None, # 5590
    None, # 5591
    None, # 5592
    None, # 5593
    None, # 5594
    None, # 5595
    None, # 5596
    None, # 5597
    None, # 5598
    None, # 5599
    None, # 5600
    None, # 5601
    None, # 5602
    None, # 5603
    None, # 5604
    None, # 5605
    None, # 5606
    None, # 5607
    None, # 5608
    None, # 5609
    None, # 5610
    None, # 5611
    None, # 5612
    None, # 5613
    None, # 5614
    None, # 5615
    None, # 5616
    None, # 5617
    None, # 5618
    None, # 5619
    None, # 5620
    None, # 5621
    None, # 5622
    None, # 5623
    None, # 5624
    None, # 5625
    None, # 5626
    None, # 5627
    None, # 5628
    None, # 5629
    None, # 5630
    None, # 5631
    None, # 5632
    None, # 5633
    None, # 5634
    None, # 5635
    None, # 5636
    None, # 5637
    None, # 5638
    None, # 5639
    None, # 5640
    None, # 5641
    None, # 5642
    None, # 5643
    None, # 5644
    None, # 5645
    None, # 5646
    None, # 5647
    None, # 5648
    None, # 5649
    None, # 5650
    None, # 5651
    None, # 5652
    None, # 5653
    None, # 5654
    None, # 5655
    None, # 5656
    None, # 5657
    None, # 5658
    None, # 5659
    None, # 5660
    None, # 5661
    None, # 5662
    None, # 5663
    None, # 5664
    None, # 5665
    None, # 5666
    None, # 5667
    None, # 5668
    None, # 5669
    None, # 5670
    None, # 5671
    None, # 5672
    None, # 5673
    None, # 5674
    None, # 5675
    None, # 5676
    None, # 5677
    None, # 5678
    None, # 5679
    None, # 5680
    None, # 5681
    None, # 5682
    None, # 5683
    None, # 5684
    None, # 5685
    None, # 5686
    None, # 5687
    None, # 5688
    None, # 5689
    None, # 5690
    None, # 5691
    None, # 5692
    None, # 5693
    None, # 5694
    None, # 5695
    None, # 5696
    None, # 5697
    None, # 5698
    None, # 5699
    None, # 5700
    None, # 5701
    None, # 5702
    None, # 5703
    None, # 5704
    None, # 5705
    None, # 5706
    None, # 5707
    None, # 5708
    None, # 5709
    None, # 5710
    None, # 5711
    None, # 5712
    None, # 5713
    None, # 5714
    None, # 5715
    None, # 5716
    None, # 5717
    None, # 5718
    None, # 5719
    None, # 5720
    None, # 5721
    None, # 5722
    None, # 5723
    None, # 5724
    None, # 5725
    None, # 5726
    None, # 5727
    None, # 5728
    None, # 5729
    None, # 5730
    None, # 5731
    None, # 5732
    None, # 5733
    None, # 5734
    None, # 5735
    None, # 5736
    None, # 5737
    None, # 5738
    None, # 5739
    None, # 5740
    None, # 5741
    None, # 5742
    None, # 5743
    None, # 5744
    None, # 5745
    None, # 5746
    None, # 5747
    None, # 5748
    None, # 5749
    None, # 5750
    None, # 5751
    None, # 5752
    None, # 5753
    None, # 5754
    None, # 5755
    None, # 5756
    None, # 5757
    None, # 5758
    None, # 5759
    None, # 5760
    None, # 5761
    None, # 5762
    None, # 5763
    None, # 5764
    None, # 5765
    None, # 5766
    None, # 5767
    None, # 5768
    None, # 5769
    None, # 5770
    None, # 5771
    None, # 5772
    None, # 5773
    None, # 5774
    None, # 5775
    None, # 5776
    None, # 5777
    None, # 5778
    None, # 5779
    None, # 5780
    None, # 5781
    None, # 5782
    None, # 5783
    None, # 5784
    None, # 5785
    None, # 5786
    None, # 5787
    None, # 5788
    None, # 5789
    None, # 5790
    None, # 5791
    None, # 5792
    None, # 5793
    None, # 5794
    None, # 5795
    None, # 5796
    None, # 5797
    None, # 5798
    None, # 5799
    None, # 5800
    None, # 5801
    None, # 5802
    None, # 5803
    None, # 5804
    None, # 5805
    None, # 5806
    None, # 5807
    None, # 5808
    None, # 5809
    None, # 5810
    None, # 5811
    None, # 5812
    None, # 5813
    None, # 5814
    None, # 5815
    None, # 5816
    None, # 5817
    None, # 5818
    None, # 5819
    None, # 5820
    None, # 5821
    None, # 5822
    None, # 5823
    None, # 5824
    None, # 5825
    None, # 5826
    None, # 5827
    None, # 5828
    None, # 5829
    None, # 5830
    None, # 5831
    None, # 5832
    None, # 5833
    None, # 5834
    None, # 5835
    None, # 5836
    None, # 5837
    None, # 5838
    None, # 5839
    None, # 5840
    None, # 5841
    None, # 5842
    None, # 5843
    None, # 5844
    None, # 5845
    None, # 5846
    None, # 5847
    None, # 5848
    None, # 5849
    None, # 5850
    None, # 5851
    None, # 5852
    None, # 5853
    None, # 5854
    None, # 5855
    None, # 5856
    None, # 5857
    None, # 5858
    None, # 5859
    None, # 5860
    None, # 5861
    None, # 5862
    None, # 5863
    None, # 5864
    None, # 5865
    None, # 5866
    None, # 5867
    None, # 5868
    None, # 5869
    None, # 5870
    None, # 5871
    None, # 5872
    None, # 5873
    None, # 5874
    None, # 5875
    None, # 5876
    None, # 5877
    None, # 5878
    None, # 5879
    None, # 5880
    None, # 5881
    None, # 5882
    None, # 5883
    None, # 5884
    None, # 5885
    None, # 5886
    None, # 5887
    None, # 5888
    None, # 5889
    None, # 5890
    None, # 5891
    None, # 5892
    None, # 5893
    None, # 5894
    None, # 5895
    None, # 5896
    None, # 5897
    None, # 5898
    None, # 5899
    None, # 5900
    None, # 5901
    None, # 5902
    None, # 5903
    None, # 5904
    None, # 5905
    None, # 5906
    None, # 5907
    None, # 5908
    None, # 5909
    None, # 5910
    None, # 5911
    None, # 5912
    None, # 5913
    None, # 5914
    None, # 5915
    None, # 5916
    None, # 5917
    None, # 5918
    None, # 5919
    None, # 5920
    None, # 5921
    None, # 5922
    None, # 5923
    None, # 5924
    None, # 5925
    None, # 5926
    None, # 5927
    None, # 5928
    None, # 5929
    None, # 5930
    None, # 5931
    None, # 5932
    None, # 5933
    None, # 5934
    None, # 5935
    None, # 5936
    None, # 5937
    None, # 5938
    None, # 5939
    None, # 5940
    None, # 5941
    None, # 5942
    None, # 5943
    None, # 5944
    None, # 5945
    None, # 5946
    None, # 5947
    None, # 5948
    None, # 5949
    None, # 5950
    None, # 5951
    None, # 5952
    None, # 5953
    None, # 5954
    None, # 5955
    None, # 5956
    None, # 5957
    None, # 5958
    None, # 5959
    None, # 5960
    None, # 5961
    None, # 5962
    None, # 5963
    None, # 5964
    None, # 5965
    None, # 5966
    None, # 5967
    None, # 5968
    None, # 5969
    None, # 5970
    None, # 5971
    None, # 5972
    None, # 5973
    None, # 5974
    None, # 5975
    None, # 5976
    None, # 5977
    None, # 5978
    None, # 5979
    None, # 5980
    None, # 5981
    None, # 5982
    None, # 5983
    None, # 5984
    None, # 5985
    None, # 5986
    None, # 5987
    None, # 5988
    None, # 5989
    None, # 5990
    None, # 5991
    None, # 5992
    None, # 5993
    None, # 5994
    None, # 5995
    None, # 5996
    None, # 5997
    None, # 5998
    None, # 5999
    None, # 6000
    None, # 6001
    None, # 6002
    None, # 6003
    None, # 6004
    None, # 6005
    None, # 6006
    None, # 6007
    None, # 6008
    None, # 6009
    None, # 6010
    None, # 6011
    None, # 6012
    None, # 6013
    None, # 6014
    None, # 6015
    None, # 6016
    None, # 6017
    None, # 6018
    None, # 6019
    None, # 6020
    None, # 6021
    None, # 6022
    None, # 6023
    None, # 6024
    None, # 6025
    None, # 6026
    None, # 6027
    None, # 6028
    None, # 6029
    None, # 6030
    None, # 6031
    None, # 6032
    None, # 6033
    None, # 6034
    None, # 6035
    None, # 6036
    None, # 6037
    None, # 6038
    None, # 6039
    None, # 6040
    None, # 6041
    None, # 6042
    None, # 6043
    None, # 6044
    None, # 6045
    None, # 6046
    None, # 6047
    None, # 6048
    None, # 6049
    None, # 6050
    None, # 6051
    None, # 6052
    None, # 6053
    None, # 6054
    None, # 6055
    None, # 6056
    None, # 6057
    None, # 6058
    None, # 6059
    None, # 6060
    None, # 6061
    None, # 6062
    None, # 6063
    None, # 6064
    None, # 6065
    None, # 6066
    None, # 6067
    None, # 6068
    None, # 6069
    None, # 6070
    None, # 6071
    None, # 6072
    None, # 6073
    None, # 6074
    None, # 6075
    None, # 6076
    None, # 6077
    None, # 6078
    None, # 6079
    None, # 6080
    None, # 6081
    None, # 6082
    None, # 6083
    None, # 6084
    None, # 6085
    None, # 6086
    None, # 6087
    None, # 6088
    None, # 6089
    None, # 6090
    None, # 6091
    None, # 6092
    None, # 6093
    None, # 6094
    None, # 6095
    None, # 6096
    None, # 6097
    None, # 6098
    None, # 6099
    None, # 6100
    None, # 6101
    None, # 6102
    None, # 6103
    None, # 6104
    None, # 6105
    None, # 6106
    None, # 6107
    None, # 6108
    None, # 6109
    None, # 6110
    None, # 6111
    None, # 6112
    None, # 6113
    None, # 6114
    None, # 6115
    None, # 6116
    None, # 6117
    None, # 6118
    None, # 6119
    None, # 6120
    None, # 6121
    None, # 6122
    None, # 6123
    None, # 6124
    None, # 6125
    None, # 6126
    None, # 6127
    None, # 6128
    None, # 6129
    None, # 6130
    None, # 6131
    None, # 6132
    None, # 6133
    None, # 6134
    None, # 6135
    None, # 6136
    None, # 6137
    None, # 6138
    None, # 6139
    None, # 6140
    None, # 6141
    None, # 6142
    None, # 6143
    None, # 6144
    None, # 6145
    None, # 6146
    None, # 6147
    None, # 6148
    None, # 6149
    None, # 6150
    None, # 6151
    None, # 6152
    None, # 6153
    None, # 6154
    None, # 6155
    None, # 6156
    None, # 6157
    None, # 6158
    None, # 6159
    None, # 6160
    None, # 6161
    None, # 6162
    None, # 6163
    None, # 6164
    None, # 6165
    None, # 6166
    None, # 6167
    None, # 6168
    None, # 6169
    None, # 6170
    None, # 6171
    None, # 6172
    None, # 6173
    None, # 6174
    None, # 6175
    None, # 6176
    None, # 6177
    None, # 6178
    None, # 6179
    None, # 6180
    None, # 6181
    None, # 6182
    None, # 6183
    None, # 6184
    None, # 6185
    None, # 6186
    None, # 6187
    None, # 6188
    None, # 6189
    None, # 6190
    None, # 6191
    None, # 6192
    None, # 6193
    None, # 6194
    None, # 6195
    None, # 6196
    None, # 6197
    None, # 6198
    None, # 6199
    None, # 6200
    None, # 6201
    None, # 6202
    None, # 6203
    None, # 6204
    None, # 6205
    None, # 6206
    None, # 6207
    None, # 6208
    None, # 6209
    None, # 6210
    None, # 6211
    None, # 6212
    None, # 6213
    None, # 6214
    None, # 6215
    None, # 6216
    None, # 6217
    None, # 6218
    None, # 6219
    None, # 6220
    None, # 6221
    None, # 6222
    None, # 6223
    None, # 6224
    None, # 6225
    None, # 6226
    None, # 6227
    None, # 6228
    None, # 6229
    None, # 6230
    None, # 6231
    None, # 6232
    None, # 6233
    None, # 6234
    None, # 6235
    None, # 6236
    None, # 6237
    None, # 6238
    None, # 6239
    None, # 6240
    None, # 6241
    None, # 6242
    None, # 6243
    None, # 6244
    None, # 6245
    None, # 6246
    None, # 6247
    None, # 6248
    None, # 6249
    None, # 6250
    None, # 6251
    None, # 6252
    None, # 6253
    None, # 6254
    None, # 6255
    None, # 6256
    None, # 6257
    None, # 6258
    None, # 6259
    None, # 6260
    None, # 6261
    None, # 6262
    None, # 6263
    None, # 6264
    None, # 6265
    None, # 6266
    None, # 6267
    None, # 6268
    None, # 6269
    None, # 6270
    None, # 6271
    None, # 6272
    None, # 6273
    None, # 6274
    None, # 6275
    None, # 6276
    None, # 6277
    None, # 6278
    None, # 6279
    None, # 6280
    None, # 6281
    None, # 6282
    None, # 6283
    None, # 6284
    None, # 6285
    None, # 6286
    None, # 6287
    None, # 6288
    None, # 6289
    None, # 6290
    None, # 6291
    None, # 6292
    None, # 6293
    None, # 6294
    None, # 6295
    None, # 6296
    None, # 6297
    None, # 6298
    None, # 6299
    None, # 6300
    None, # 6301
    None, # 6302
    None, # 6303
    None, # 6304
    None, # 6305
    None, # 6306
    None, # 6307
    None, # 6308
    None, # 6309
    None, # 6310
    None, # 6311
    None, # 6312
    None, # 6313
    None, # 6314
    None, # 6315
    None, # 6316
    None, # 6317
    None, # 6318
    None, # 6319
    None, # 6320
    None, # 6321
    None, # 6322
    None, # 6323
    None, # 6324
    None, # 6325
    None, # 6326
    None, # 6327
    None, # 6328
    None, # 6329
    None, # 6330
    None, # 6331
    None, # 6332
    None, # 6333
    None, # 6334
    None, # 6335
    None, # 6336
    None, # 6337
    None, # 6338
    None, # 6339
    None, # 6340
    None, # 6341
    None, # 6342
    None, # 6343
    None, # 6344
    None, # 6345
    None, # 6346
    None, # 6347
    None, # 6348
    None, # 6349
    None, # 6350
    None, # 6351
    None, # 6352
    None, # 6353
    None, # 6354
    None, # 6355
    None, # 6356
    None, # 6357
    None, # 6358
    None, # 6359
    None, # 6360
    None, # 6361
    None, # 6362
    None, # 6363
    None, # 6364
    None, # 6365
    None, # 6366
    None, # 6367
    None, # 6368
    None, # 6369
    None, # 6370
    None, # 6371
    None, # 6372
    None, # 6373
    None, # 6374
    None, # 6375
    None, # 6376
    None, # 6377
    None, # 6378
    None, # 6379
    None, # 6380
    None, # 6381
    None, # 6382
    None, # 6383
    None, # 6384
    None, # 6385
    None, # 6386
    None, # 6387
    None, # 6388
    None, # 6389
    None, # 6390
    None, # 6391
    None, # 6392
    None, # 6393
    None, # 6394
    None, # 6395
    None, # 6396
    None, # 6397
    None, # 6398
    None, # 6399
    None, # 6400
    None, # 6401
    None, # 6402
    None, # 6403
    None, # 6404
    None, # 6405
    None, # 6406
    None, # 6407
    None, # 6408
    None, # 6409
    None, # 6410
    None, # 6411
    None, # 6412
    None, # 6413
    None, # 6414
    None, # 6415
    None, # 6416
    None, # 6417
    None, # 6418
    None, # 6419
    None, # 6420
    None, # 6421
    None, # 6422
    None, # 6423
    None, # 6424
    None, # 6425
    None, # 6426
    None, # 6427
    None, # 6428
    None, # 6429
    None, # 6430
    None, # 6431
    None, # 6432
    None, # 6433
    None, # 6434
    None, # 6435
    None, # 6436
    None, # 6437
    None, # 6438
    None, # 6439
    None, # 6440
    None, # 6441
    None, # 6442
    None, # 6443
    None, # 6444
    None, # 6445
    None, # 6446
    None, # 6447
    None, # 6448
    None, # 6449
    None, # 6450
    None, # 6451
    None, # 6452
    None, # 6453
    None, # 6454
    None, # 6455
    None, # 6456
    None, # 6457
    None, # 6458
    None, # 6459
    None, # 6460
    None, # 6461
    None, # 6462
    None, # 6463
    None, # 6464
    None, # 6465
    None, # 6466
    None, # 6467
    None, # 6468
    None, # 6469
    None, # 6470
    None, # 6471
    None, # 6472
    None, # 6473
    None, # 6474
    None, # 6475
    None, # 6476
    None, # 6477
    None, # 6478
    None, # 6479
    None, # 6480
    None, # 6481
    None, # 6482
    None, # 6483
    None, # 6484
    None, # 6485
    None, # 6486
    None, # 6487
    None, # 6488
    None, # 6489
    None, # 6490
    None, # 6491
    None, # 6492
    None, # 6493
    None, # 6494
    None, # 6495
    None, # 6496
    None, # 6497
    None, # 6498
    None, # 6499
    None, # 6500
    None, # 6501
    None, # 6502
    None, # 6503
    None, # 6504
    None, # 6505
    None, # 6506
    None, # 6507
    None, # 6508
    None, # 6509
    None, # 6510
    None, # 6511
    None, # 6512
    None, # 6513
    None, # 6514
    None, # 6515
    None, # 6516
    None, # 6517
    None, # 6518
    None, # 6519
    None, # 6520
    None, # 6521
    None, # 6522
    None, # 6523
    None, # 6524
    None, # 6525
    None, # 6526
    None, # 6527
    None, # 6528
    None, # 6529
    None, # 6530
    None, # 6531
    None, # 6532
    None, # 6533
    None, # 6534
    None, # 6535
    None, # 6536
    None, # 6537
    None, # 6538
    None, # 6539
    None, # 6540
    None, # 6541
    None, # 6542
    None, # 6543
    None, # 6544
    None, # 6545
    None, # 6546
    None, # 6547
    None, # 6548
    None, # 6549
    None, # 6550
    None, # 6551
    None, # 6552
    None, # 6553
    None, # 6554
    None, # 6555
    None, # 6556
    None, # 6557
    None, # 6558
    None, # 6559
    None, # 6560
    None, # 6561
    None, # 6562
    None, # 6563
    None, # 6564
    None, # 6565
    None, # 6566
    None, # 6567
    None, # 6568
    None, # 6569
    None, # 6570
    None, # 6571
    None, # 6572
    None, # 6573
    None, # 6574
    None, # 6575
    None, # 6576
    None, # 6577
    None, # 6578
    None, # 6579
    None, # 6580
    None, # 6581
    None, # 6582
    None, # 6583
    None, # 6584
    None, # 6585
    None, # 6586
    None, # 6587
    None, # 6588
    None, # 6589
    None, # 6590
    None, # 6591
    None, # 6592
    None, # 6593
    None, # 6594
    None, # 6595
    None, # 6596
    None, # 6597
    None, # 6598
    None, # 6599
    None, # 6600
    None, # 6601
    None, # 6602
    None, # 6603
    None, # 6604
    None, # 6605
    None, # 6606
    None, # 6607
    None, # 6608
    None, # 6609
    None, # 6610
    None, # 6611
    None, # 6612
    None, # 6613
    None, # 6614
    None, # 6615
    None, # 6616
    None, # 6617
    None, # 6618
    None, # 6619
    None, # 6620
    None, # 6621
    None, # 6622
    None, # 6623
    None, # 6624
    None, # 6625
    None, # 6626
    None, # 6627
    None, # 6628
    None, # 6629
    None, # 6630
    None, # 6631
    None, # 6632
    None, # 6633
    None, # 6634
    None, # 6635
    None, # 6636
    None, # 6637
    None, # 6638
    None, # 6639
    None, # 6640
    None, # 6641
    None, # 6642
    None, # 6643
    None, # 6644
    None, # 6645
    None, # 6646
    None, # 6647
    None, # 6648
    None, # 6649
    None, # 6650
    None, # 6651
    None, # 6652
    None, # 6653
    None, # 6654
    None, # 6655
    None, # 6656
    None, # 6657
    None, # 6658
    None, # 6659
    None, # 6660
    None, # 6661
    None, # 6662
    None, # 6663
    None, # 6664
    None, # 6665
    None, # 6666
    None, # 6667
    None, # 6668
    None, # 6669
    None, # 6670
    None, # 6671
    None, # 6672
    None, # 6673
    None, # 6674
    None, # 6675
    None, # 6676
    None, # 6677
    None, # 6678
    None, # 6679
    None, # 6680
    None, # 6681
    None, # 6682
    None, # 6683
    None, # 6684
    None, # 6685
    None, # 6686
    None, # 6687
    None, # 6688
    None, # 6689
    None, # 6690
    None, # 6691
    None, # 6692
    None, # 6693
    None, # 6694
    None, # 6695
    None, # 6696
    None, # 6697
    None, # 6698
    None, # 6699
    None, # 6700
    None, # 6701
    None, # 6702
    None, # 6703
    None, # 6704
    None, # 6705
    None, # 6706
    None, # 6707
    None, # 6708
    None, # 6709
    None, # 6710
    None, # 6711
    None, # 6712
    None, # 6713
    None, # 6714
    None, # 6715
    None, # 6716
    None, # 6717
    None, # 6718
    None, # 6719
    None, # 6720
    None, # 6721
    None, # 6722
    None, # 6723
    None, # 6724
    None, # 6725
    None, # 6726
    None, # 6727
    None, # 6728
    None, # 6729
    None, # 6730
    None, # 6731
    None, # 6732
    None, # 6733
    None, # 6734
    None, # 6735
    None, # 6736
    None, # 6737
    None, # 6738
    None, # 6739
    None, # 6740
    None, # 6741
    None, # 6742
    None, # 6743
    None, # 6744
    None, # 6745
    None, # 6746
    None, # 6747
    None, # 6748
    None, # 6749
    None, # 6750
    None, # 6751
    None, # 6752
    None, # 6753
    None, # 6754
    None, # 6755
    None, # 6756
    None, # 6757
    None, # 6758
    None, # 6759
    None, # 6760
    None, # 6761
    None, # 6762
    None, # 6763
    None, # 6764
    None, # 6765
    None, # 6766
    None, # 6767
    None, # 6768
    None, # 6769
    None, # 6770
    None, # 6771
    None, # 6772
    None, # 6773
    None, # 6774
    None, # 6775
    None, # 6776
    None, # 6777
    None, # 6778
    None, # 6779
    None, # 6780
    None, # 6781
    None, # 6782
    None, # 6783
    None, # 6784
    None, # 6785
    None, # 6786
    None, # 6787
    None, # 6788
    None, # 6789
    None, # 6790
    None, # 6791
    None, # 6792
    None, # 6793
    None, # 6794
    None, # 6795
    None, # 6796
    None, # 6797
    None, # 6798
    None, # 6799
    None, # 6800
    None, # 6801
    None, # 6802
    None, # 6803
    None, # 6804
    None, # 6805
    None, # 6806
    None, # 6807
    None, # 6808
    None, # 6809
    None, # 6810
    None, # 6811
    None, # 6812
    None, # 6813
    None, # 6814
    None, # 6815
    None, # 6816
    None, # 6817
    None, # 6818
    None, # 6819
    None, # 6820
    None, # 6821
    None, # 6822
    None, # 6823
    None, # 6824
    None, # 6825
    None, # 6826
    None, # 6827
    None, # 6828
    None, # 6829
    None, # 6830
    None, # 6831
    None, # 6832
    None, # 6833
    None, # 6834
    None, # 6835
    None, # 6836
    None, # 6837
    None, # 6838
    None, # 6839
    None, # 6840
    None, # 6841
    None, # 6842
    None, # 6843
    None, # 6844
    None, # 6845
    None, # 6846
    None, # 6847
    None, # 6848
    None, # 6849
    None, # 6850
    None, # 6851
    None, # 6852
    None, # 6853
    None, # 6854
    None, # 6855
    None, # 6856
    None, # 6857
    None, # 6858
    None, # 6859
    None, # 6860
    None, # 6861
    None, # 6862
    None, # 6863
    None, # 6864
    None, # 6865
    None, # 6866
    None, # 6867
    None, # 6868
    None, # 6869
    None, # 6870
    None, # 6871
    None, # 6872
    None, # 6873
    None, # 6874
    None, # 6875
    None, # 6876
    None, # 6877
    None, # 6878
    None, # 6879
    None, # 6880
    None, # 6881
    None, # 6882
    None, # 6883
    None, # 6884
    None, # 6885
    None, # 6886
    None, # 6887
    None, # 6888
    None, # 6889
    None, # 6890
    None, # 6891
    None, # 6892
    None, # 6893
    None, # 6894
    None, # 6895
    None, # 6896
    None, # 6897
    None, # 6898
    None, # 6899
    None, # 6900
    None, # 6901
    None, # 6902
    None, # 6903
    None, # 6904
    None, # 6905
    None, # 6906
    None, # 6907
    None, # 6908
    None, # 6909
    None, # 6910
    None, # 6911
    None, # 6912
    None, # 6913
    None, # 6914
    None, # 6915
    None, # 6916
    None, # 6917
    None, # 6918
    None, # 6919
    None, # 6920
    None, # 6921
    None, # 6922
    None, # 6923
    None, # 6924
    None, # 6925
    None, # 6926
    None, # 6927
    None, # 6928
    None, # 6929
    None, # 6930
    None, # 6931
    None, # 6932
    None, # 6933
    None, # 6934
    None, # 6935
    None, # 6936
    None, # 6937
    None, # 6938
    None, # 6939
    None, # 6940
    None, # 6941
    None, # 6942
    None, # 6943
    None, # 6944
    None, # 6945
    None, # 6946
    None, # 6947
    None, # 6948
    None, # 6949
    None, # 6950
    None, # 6951
    None, # 6952
    None, # 6953
    None, # 6954
    None, # 6955
    None, # 6956
    None, # 6957
    None, # 6958
    None, # 6959
    None, # 6960
    None, # 6961
    None, # 6962
    None, # 6963
    None, # 6964
    None, # 6965
    None, # 6966
    None, # 6967
    None, # 6968
    None, # 6969
    None, # 6970
    None, # 6971
    None, # 6972
    None, # 6973
    None, # 6974
    None, # 6975
    None, # 6976
    None, # 6977
    None, # 6978
    None, # 6979
    None, # 6980
    None, # 6981
    None, # 6982
    None, # 6983
    None, # 6984
    None, # 6985
    None, # 6986
    None, # 6987
    None, # 6988
    None, # 6989
    None, # 6990
    None, # 6991
    None, # 6992
    None, # 6993
    None, # 6994
    None, # 6995
    None, # 6996
    None, # 6997
    None, # 6998
    None, # 6999
    None, # 7000
    None, # 7001
    None, # 7002
    None, # 7003
    None, # 7004
    None, # 7005
    None, # 7006
    None, # 7007
    None, # 7008
    None, # 7009
    None, # 7010
    None, # 7011
    None, # 7012
    None, # 7013
    None, # 7014
    None, # 7015
    None, # 7016
    None, # 7017
    None, # 7018
    None, # 7019
    None, # 7020
    None, # 7021
    None, # 7022
    None, # 7023
    None, # 7024
    None, # 7025
    None, # 7026
    None, # 7027
    None, # 7028
    None, # 7029
    None, # 7030
    None, # 7031
    None, # 7032
    None, # 7033
    None, # 7034
    None, # 7035
    None, # 7036
    None, # 7037
    None, # 7038
    None, # 7039
    None, # 7040
    None, # 7041
    None, # 7042
    None, # 7043
    None, # 7044
    None, # 7045
    None, # 7046
    None, # 7047
    None, # 7048
    None, # 7049
    None, # 7050
    None, # 7051
    None, # 7052
    None, # 7053
    None, # 7054
    None, # 7055
    None, # 7056
    None, # 7057
    None, # 7058
    None, # 7059
    None, # 7060
    None, # 7061
    None, # 7062
    None, # 7063
    None, # 7064
    None, # 7065
    None, # 7066
    None, # 7067
    None, # 7068
    None, # 7069
    None, # 7070
    None, # 7071
    None, # 7072
    None, # 7073
    None, # 7074
    None, # 7075
    None, # 7076
    None, # 7077
    None, # 7078
    None, # 7079
    None, # 7080
    None, # 7081
    None, # 7082
    None, # 7083
    None, # 7084
    None, # 7085
    None, # 7086
    None, # 7087
    None, # 7088
    None, # 7089
    None, # 7090
    None, # 7091
    None, # 7092
    None, # 7093
    None, # 7094
    None, # 7095
    None, # 7096
    None, # 7097
    None, # 7098
    None, # 7099
    None, # 7100
    None, # 7101
    None, # 7102
    None, # 7103
    None, # 7104
    None, # 7105
    None, # 7106
    None, # 7107
    None, # 7108
    None, # 7109
    None, # 7110
    None, # 7111
    None, # 7112
    None, # 7113
    None, # 7114
    None, # 7115
    None, # 7116
    None, # 7117
    None, # 7118
    None, # 7119
    None, # 7120
    None, # 7121
    None, # 7122
    None, # 7123
    None, # 7124
    None, # 7125
    None, # 7126
    None, # 7127
    None, # 7128
    None, # 7129
    None, # 7130
    None, # 7131
    None, # 7132
    None, # 7133
    None, # 7134
    None, # 7135
    None, # 7136
    None, # 7137
    None, # 7138
    None, # 7139
    None, # 7140
    None, # 7141
    None, # 7142
    None, # 7143
    None, # 7144
    None, # 7145
    None, # 7146
    None, # 7147
    None, # 7148
    None, # 7149
    None, # 7150
    None, # 7151
    None, # 7152
    None, # 7153
    None, # 7154
    None, # 7155
    None, # 7156
    None, # 7157
    None, # 7158
    None, # 7159
    None, # 7160
    None, # 7161
    None, # 7162
    None, # 7163
    None, # 7164
    None, # 7165
    None, # 7166
    None, # 7167
    None, # 7168
    None, # 7169
    None, # 7170
    None, # 7171
    None, # 7172
    None, # 7173
    None, # 7174
    None, # 7175
    None, # 7176
    None, # 7177
    None, # 7178
    None, # 7179
    None, # 7180
    None, # 7181
    None, # 7182
    None, # 7183
    None, # 7184
    None, # 7185
    None, # 7186
    None, # 7187
    None, # 7188
    None, # 7189
    None, # 7190
    None, # 7191
    None, # 7192
    None, # 7193
    None, # 7194
    None, # 7195
    None, # 7196
    None, # 7197
    None, # 7198
    None, # 7199
    None, # 7200
    None, # 7201
    None, # 7202
    None, # 7203
    None, # 7204
    None, # 7205
    None, # 7206
    None, # 7207
    None, # 7208
    None, # 7209
    None, # 7210
    None, # 7211
    None, # 7212
    None, # 7213
    None, # 7214
    None, # 7215
    None, # 7216
    None, # 7217
    None, # 7218
    None, # 7219
    None, # 7220
    None, # 7221
    None, # 7222
    None, # 7223
    None, # 7224
    None, # 7225
    None, # 7226
    None, # 7227
    None, # 7228
    None, # 7229
    None, # 7230
    None, # 7231
    None, # 7232
    None, # 7233
    None, # 7234
    None, # 7235
    None, # 7236
    None, # 7237
    None, # 7238
    None, # 7239
    None, # 7240
    None, # 7241
    None, # 7242
    None, # 7243
    None, # 7244
    None, # 7245
    None, # 7246
    None, # 7247
    None, # 7248
    None, # 7249
    None, # 7250
    None, # 7251
    None, # 7252
    None, # 7253
    None, # 7254
    None, # 7255
    None, # 7256
    None, # 7257
    None, # 7258
    None, # 7259
    None, # 7260
    None, # 7261
    None, # 7262
    None, # 7263
    None, # 7264
    None, # 7265
    None, # 7266
    None, # 7267
    None, # 7268
    None, # 7269
    None, # 7270
    None, # 7271
    None, # 7272
    None, # 7273
    None, # 7274
    None, # 7275
    None, # 7276
    None, # 7277
    None, # 7278
    None, # 7279
    None, # 7280
    None, # 7281
    None, # 7282
    None, # 7283
    None, # 7284
    None, # 7285
    None, # 7286
    None, # 7287
    None, # 7288
    None, # 7289
    None, # 7290
    None, # 7291
    None, # 7292
    None, # 7293
    None, # 7294
    None, # 7295
    None, # 7296
    None, # 7297
    None, # 7298
    None, # 7299
    None, # 7300
    None, # 7301
    None, # 7302
    None, # 7303
    None, # 7304
    None, # 7305
    None, # 7306
    None, # 7307
    None, # 7308
    None, # 7309
    None, # 7310
    None, # 7311
    None, # 7312
    None, # 7313
    None, # 7314
    None, # 7315
    None, # 7316
    None, # 7317
    None, # 7318
    None, # 7319
    None, # 7320
    None, # 7321
    None, # 7322
    None, # 7323
    None, # 7324
    None, # 7325
    None, # 7326
    None, # 7327
    None, # 7328
    None, # 7329
    None, # 7330
    None, # 7331
    None, # 7332
    None, # 7333
    None, # 7334
    None, # 7335
    None, # 7336
    None, # 7337
    None, # 7338
    None, # 7339
    None, # 7340
    None, # 7341
    None, # 7342
    None, # 7343
    None, # 7344
    None, # 7345
    None, # 7346
    None, # 7347
    None, # 7348
    None, # 7349
    None, # 7350
    None, # 7351
    None, # 7352
    None, # 7353
    None, # 7354
    None, # 7355
    None, # 7356
    None, # 7357
    None, # 7358
    None, # 7359
    None, # 7360
    None, # 7361
    None, # 7362
    None, # 7363
    None, # 7364
    None, # 7365
    None, # 7366
    None, # 7367
    None, # 7368
    None, # 7369
    None, # 7370
    None, # 7371
    None, # 7372
    None, # 7373
    None, # 7374
    None, # 7375
    None, # 7376
    None, # 7377
    None, # 7378
    None, # 7379
    None, # 7380
    None, # 7381
    None, # 7382
    None, # 7383
    None, # 7384
    None, # 7385
    None, # 7386
    None, # 7387
    None, # 7388
    None, # 7389
    None, # 7390
    None, # 7391
    None, # 7392
    None, # 7393
    None, # 7394
    None, # 7395
    None, # 7396
    None, # 7397
    None, # 7398
    None, # 7399
    None, # 7400
    None, # 7401
    None, # 7402
    None, # 7403
    None, # 7404
    None, # 7405
    None, # 7406
    None, # 7407
    None, # 7408
    None, # 7409
    None, # 7410
    None, # 7411
    None, # 7412
    None, # 7413
    None, # 7414
    None, # 7415
    None, # 7416
    None, # 7417
    None, # 7418
    None, # 7419
    None, # 7420
    None, # 7421
    None, # 7422
    None, # 7423
    None, # 7424
    None, # 7425
    None, # 7426
    None, # 7427
    None, # 7428
    None, # 7429
    None, # 7430
    None, # 7431
    None, # 7432
    None, # 7433
    None, # 7434
    None, # 7435
    None, # 7436
    None, # 7437
    None, # 7438
    None, # 7439
    None, # 7440
    None, # 7441
    None, # 7442
    None, # 7443
    None, # 7444
    None, # 7445
    None, # 7446
    None, # 7447
    None, # 7448
    None, # 7449
    None, # 7450
    None, # 7451
    None, # 7452
    None, # 7453
    None, # 7454
    None, # 7455
    None, # 7456
    None, # 7457
    None, # 7458
    None, # 7459
    None, # 7460
    None, # 7461
    None, # 7462
    None, # 7463
    None, # 7464
    None, # 7465
    None, # 7466
    None, # 7467
    None, # 7468
    None, # 7469
    None, # 7470
    None, # 7471
    None, # 7472
    None, # 7473
    None, # 7474
    None, # 7475
    None, # 7476
    None, # 7477
    None, # 7478
    None, # 7479
    None, # 7480
    None, # 7481
    None, # 7482
    None, # 7483
    None, # 7484
    None, # 7485
    None, # 7486
    None, # 7487
    None, # 7488
    None, # 7489
    None, # 7490
    None, # 7491
    None, # 7492
    None, # 7493
    None, # 7494
    None, # 7495
    None, # 7496
    None, # 7497
    None, # 7498
    None, # 7499
    None, # 7500
    None, # 7501
    None, # 7502
    None, # 7503
    None, # 7504
    None, # 7505
    None, # 7506
    None, # 7507
    None, # 7508
    None, # 7509
    None, # 7510
    None, # 7511
    None, # 7512
    None, # 7513
    None, # 7514
    None, # 7515
    None, # 7516
    None, # 7517
    None, # 7518
    None, # 7519
    None, # 7520
    None, # 7521
    None, # 7522
    None, # 7523
    None, # 7524
    None, # 7525
    None, # 7526
    None, # 7527
    None, # 7528
    None, # 7529
    None, # 7530
    None, # 7531
    None, # 7532
    None, # 7533
    None, # 7534
    None, # 7535
    None, # 7536
    None, # 7537
    None, # 7538
    None, # 7539
    None, # 7540
    None, # 7541
    None, # 7542
    None, # 7543
    None, # 7544
    None, # 7545
    None, # 7546
    None, # 7547
    None, # 7548
    None, # 7549
    None, # 7550
    None, # 7551
    None, # 7552
    None, # 7553
    None, # 7554
    None, # 7555
    None, # 7556
    None, # 7557
    None, # 7558
    None, # 7559
    None, # 7560
    None, # 7561
    None, # 7562
    None, # 7563
    None, # 7564
    None, # 7565
    None, # 7566
    None, # 7567
    None, # 7568
    None, # 7569
    None, # 7570
    None, # 7571
    None, # 7572
    None, # 7573
    None, # 7574
    None, # 7575
    None, # 7576
    None, # 7577
    None, # 7578
    None, # 7579
    None, # 7580
    None, # 7581
    None, # 7582
    None, # 7583
    None, # 7584
    None, # 7585
    None, # 7586
    None, # 7587
    None, # 7588
    None, # 7589
    None, # 7590
    None, # 7591
    None, # 7592
    None, # 7593
    None, # 7594
    None, # 7595
    None, # 7596
    None, # 7597
    None, # 7598
    None, # 7599
    None, # 7600
    None, # 7601
    None, # 7602
    None, # 7603
    None, # 7604
    None, # 7605
    None, # 7606
    None, # 7607
    None, # 7608
    None, # 7609
    None, # 7610
    None, # 7611
    None, # 7612
    None, # 7613
    None, # 7614
    None, # 7615
    None, # 7616
    None, # 7617
    None, # 7618
    None, # 7619
    None, # 7620
    None, # 7621
    None, # 7622
    None, # 7623
    None, # 7624
    None, # 7625
    None, # 7626
    None, # 7627
    None, # 7628
    None, # 7629
    None, # 7630
    None, # 7631
    None, # 7632
    None, # 7633
    None, # 7634
    None, # 7635
    None, # 7636
    None, # 7637
    None, # 7638
    None, # 7639
    None, # 7640
    None, # 7641
    None, # 7642
    None, # 7643
    None, # 7644
    None, # 7645
    None, # 7646
    None, # 7647
    None, # 7648
    None, # 7649
    None, # 7650
    None, # 7651
    None, # 7652
    None, # 7653
    None, # 7654
    None, # 7655
    None, # 7656
    None, # 7657
    None, # 7658
    None, # 7659
    None, # 7660
    None, # 7661
    None, # 7662
    None, # 7663
    None, # 7664
    None, # 7665
    None, # 7666
    None, # 7667
    None, # 7668
    None, # 7669
    None, # 7670
    None, # 7671
    None, # 7672
    None, # 7673
    None, # 7674
    None, # 7675
    None, # 7676
    None, # 7677
    None, # 7678
    None, # 7679
    None, # 7680
    None, # 7681
    None, # 7682
    None, # 7683
    None, # 7684
    None, # 7685
    None, # 7686
    None, # 7687
    None, # 7688
    None, # 7689
    None, # 7690
    None, # 7691
    None, # 7692
    None, # 7693
    None, # 7694
    None, # 7695
    None, # 7696
    None, # 7697
    None, # 7698
    None, # 7699
    None, # 7700
    None, # 7701
    None, # 7702
    None, # 7703
    None, # 7704
    None, # 7705
    None, # 7706
    None, # 7707
    None, # 7708
    None, # 7709
    None, # 7710
    None, # 7711
    None, # 7712
    None, # 7713
    None, # 7714
    None, # 7715
    None, # 7716
    None, # 7717
    None, # 7718
    None, # 7719
    None, # 7720
    None, # 7721
    None, # 7722
    None, # 7723
    None, # 7724
    None, # 7725
    None, # 7726
    None, # 7727
    None, # 7728
    None, # 7729
    None, # 7730
    None, # 7731
    None, # 7732
    None, # 7733
    None, # 7734
    None, # 7735
    None, # 7736
    None, # 7737
    None, # 7738
    None, # 7739
    None, # 7740
    None, # 7741
    None, # 7742
    None, # 7743
    None, # 7744
    None, # 7745
    None, # 7746
    None, # 7747
    None, # 7748
    None, # 7749
    None, # 7750
    None, # 7751
    None, # 7752
    None, # 7753
    None, # 7754
    None, # 7755
    None, # 7756
    None, # 7757
    None, # 7758
    None, # 7759
    None, # 7760
    None, # 7761
    None, # 7762
    None, # 7763
    None, # 7764
    None, # 7765
    None, # 7766
    None, # 7767
    None, # 7768
    None, # 7769
    None, # 7770
    None, # 7771
    None, # 7772
    None, # 7773
    None, # 7774
    None, # 7775
    None, # 7776
    None, # 7777
    None, # 7778
    None, # 7779
    None, # 7780
    None, # 7781
    None, # 7782
    None, # 7783
    None, # 7784
    None, # 7785
    None, # 7786
    None, # 7787
    None, # 7788
    None, # 7789
    None, # 7790
    None, # 7791
    None, # 7792
    None, # 7793
    None, # 7794
    None, # 7795
    None, # 7796
    None, # 7797
    None, # 7798
    None, # 7799
    None, # 7800
    None, # 7801
    None, # 7802
    None, # 7803
    None, # 7804
    None, # 7805
    None, # 7806
    None, # 7807
    None, # 7808
    None, # 7809
    None, # 7810
    None, # 7811
    None, # 7812
    None, # 7813
    None, # 7814
    None, # 7815
    None, # 7816
    None, # 7817
    None, # 7818
    None, # 7819
    None, # 7820
    None, # 7821
    None, # 7822
    None, # 7823
    None, # 7824
    None, # 7825
    None, # 7826
    None, # 7827
    None, # 7828
    None, # 7829
    None, # 7830
    None, # 7831
    None, # 7832
    None, # 7833
    None, # 7834
    None, # 7835
    None, # 7836
    None, # 7837
    None, # 7838
    None, # 7839
    None, # 7840
    None, # 7841
    None, # 7842
    None, # 7843
    None, # 7844
    None, # 7845
    None, # 7846
    None, # 7847
    None, # 7848
    None, # 7849
    None, # 7850
    None, # 7851
    None, # 7852
    None, # 7853
    None, # 7854
    None, # 7855
    None, # 7856
    None, # 7857
    None, # 7858
    None, # 7859
    None, # 7860
    None, # 7861
    None, # 7862
    None, # 7863
    None, # 7864
    None, # 7865
    None, # 7866
    None, # 7867
    None, # 7868
    None, # 7869
    None, # 7870
    None, # 7871
    None, # 7872
    None, # 7873
    None, # 7874
    None, # 7875
    None, # 7876
    None, # 7877
    None, # 7878
    None, # 7879
    None, # 7880
    None, # 7881
    None, # 7882
    None, # 7883
    None, # 7884
    None, # 7885
    None, # 7886
    None, # 7887
    None, # 7888
    None, # 7889
    None, # 7890
    None, # 7891
    None, # 7892
    None, # 7893
    None, # 7894
    None, # 7895
    None, # 7896
    None, # 7897
    None, # 7898
    None, # 7899
    None, # 7900
    None, # 7901
    None, # 7902
    None, # 7903
    None, # 7904
    None, # 7905
    None, # 7906
    None, # 7907
    None, # 7908
    None, # 7909
    None, # 7910
    None, # 7911
    None, # 7912
    None, # 7913
    None, # 7914
    None, # 7915
    None, # 7916
    None, # 7917
    None, # 7918
    None, # 7919
    None, # 7920
    None, # 7921
    None, # 7922
    None, # 7923
    None, # 7924
    None, # 7925
    None, # 7926
    None, # 7927
    None, # 7928
    None, # 7929
    None, # 7930
    None, # 7931
    None, # 7932
    None, # 7933
    None, # 7934
    None, # 7935
    None, # 7936
    None, # 7937
    None, # 7938
    None, # 7939
    None, # 7940
    None, # 7941
    None, # 7942
    None, # 7943
    None, # 7944
    None, # 7945
    None, # 7946
    None, # 7947
    None, # 7948
    None, # 7949
    None, # 7950
    None, # 7951
    None, # 7952
    None, # 7953
    None, # 7954
    None, # 7955
    None, # 7956
    None, # 7957
    None, # 7958
    None, # 7959
    None, # 7960
    None, # 7961
    None, # 7962
    None, # 7963
    None, # 7964
    None, # 7965
    None, # 7966
    None, # 7967
    None, # 7968
    None, # 7969
    None, # 7970
    None, # 7971
    None, # 7972
    None, # 7973
    None, # 7974
    None, # 7975
    None, # 7976
    None, # 7977
    None, # 7978
    None, # 7979
    None, # 7980
    None, # 7981
    None, # 7982
    None, # 7983
    None, # 7984
    None, # 7985
    None, # 7986
    None, # 7987
    None, # 7988
    None, # 7989
    None, # 7990
    None, # 7991
    None, # 7992
    None, # 7993
    None, # 7994
    None, # 7995
    None, # 7996
    None, # 7997
    None, # 7998
    None, # 7999
    None, # 8000
    None, # 8001
    None, # 8002
    None, # 8003
    None, # 8004
    None, # 8005
    None, # 8006
    None, # 8007
    None, # 8008
    None, # 8009
    None, # 8010
    None, # 8011
    None, # 8012
    None, # 8013
    None, # 8014
    None, # 8015
    None, # 8016
    None, # 8017
    None, # 8018
    None, # 8019
    None, # 8020
    None, # 8021
    None, # 8022
    None, # 8023
    None, # 8024
    None, # 8025
    None, # 8026
    None, # 8027
    None, # 8028
    None, # 8029
    None, # 8030
    None, # 8031
    None, # 8032
    None, # 8033
    None, # 8034
    None, # 8035
    None, # 8036
    None, # 8037
    None, # 8038
    None, # 8039
    None, # 8040
    None, # 8041
    None, # 8042
    None, # 8043
    None, # 8044
    None, # 8045
    None, # 8046
    None, # 8047
    None, # 8048
    None, # 8049
    None, # 8050
    None, # 8051
    None, # 8052
    None, # 8053
    None, # 8054
    None, # 8055
    None, # 8056
    None, # 8057
    None, # 8058
    None, # 8059
    None, # 8060
    None, # 8061
    None, # 8062
    None, # 8063
    None, # 8064
    None, # 8065
    None, # 8066
    None, # 8067
    None, # 8068
    None, # 8069
    None, # 8070
    None, # 8071
    None, # 8072
    None, # 8073
    None, # 8074
    None, # 8075
    None, # 8076
    None, # 8077
    None, # 8078
    None, # 8079
    None, # 8080
    None, # 8081
    None, # 8082
    None, # 8083
    None, # 8084
    None, # 8085
    None, # 8086
    None, # 8087
    None, # 8088
    None, # 8089
    None, # 8090
    None, # 8091
    None, # 8092
    None, # 8093
    None, # 8094
    None, # 8095
    None, # 8096
    None, # 8097
    None, # 8098
    None, # 8099
    None, # 8100
    None, # 8101
    None, # 8102
    None, # 8103
    None, # 8104
    None, # 8105
    None, # 8106
    None, # 8107
    None, # 8108
    None, # 8109
    None, # 8110
    None, # 8111
    None, # 8112
    None, # 8113
    None, # 8114
    None, # 8115
    None, # 8116
    None, # 8117
    None, # 8118
    None, # 8119
    None, # 8120
    None, # 8121
    None, # 8122
    None, # 8123
    None, # 8124
    None, # 8125
    None, # 8126
    None, # 8127
    None, # 8128
    None, # 8129
    None, # 8130
    None, # 8131
    None, # 8132
    None, # 8133
    None, # 8134
    None, # 8135
    None, # 8136
    None, # 8137
    None, # 8138
    None, # 8139
    None, # 8140
    None, # 8141
    None, # 8142
    None, # 8143
    None, # 8144
    None, # 8145
    None, # 8146
    None, # 8147
    None, # 8148
    None, # 8149
    None, # 8150
    None, # 8151
    None, # 8152
    None, # 8153
    None, # 8154
    None, # 8155
    None, # 8156
    None, # 8157
    None, # 8158
    None, # 8159
    None, # 8160
    None, # 8161
    None, # 8162
    None, # 8163
    None, # 8164
    None, # 8165
    None, # 8166
    None, # 8167
    None, # 8168
    None, # 8169
    None, # 8170
    None, # 8171
    None, # 8172
    None, # 8173
    None, # 8174
    None, # 8175
    None, # 8176
    None, # 8177
    None, # 8178
    None, # 8179
    None, # 8180
    None, # 8181
    None, # 8182
    None, # 8183
    None, # 8184
    None, # 8185
    None, # 8186
    None, # 8187
    None, # 8188
    None, # 8189
    None, # 8190
    None, # 8191
    None, # 8192
    None, # 8193
    None, # 8194
    None, # 8195
    None, # 8196
    None, # 8197
    None, # 8198
    None, # 8199
    None, # 8200
    None, # 8201
    None, # 8202
    None, # 8203
    None, # 8204
    None, # 8205
    None, # 8206
    None, # 8207
    None, # 8208
    None, # 8209
    None, # 8210
    None, # 8211
    None, # 8212
    None, # 8213
    None, # 8214
    None, # 8215
    None, # 8216
    None, # 8217
    None, # 8218
    None, # 8219
    None, # 8220
    None, # 8221
    None, # 8222
    None, # 8223
    None, # 8224
    None, # 8225
    None, # 8226
    None, # 8227
    None, # 8228
    None, # 8229
    None, # 8230
    None, # 8231
    None, # 8232
    None, # 8233
    None, # 8234
    None, # 8235
    None, # 8236
    None, # 8237
    None, # 8238
    None, # 8239
    None, # 8240
    None, # 8241
    None, # 8242
    None, # 8243
    None, # 8244
    None, # 8245
    None, # 8246
    None, # 8247
    None, # 8248
    None, # 8249
    None, # 8250
    None, # 8251
    None, # 8252
    None, # 8253
    None, # 8254
    None, # 8255
    None, # 8256
    None, # 8257
    None, # 8258
    None, # 8259
    None, # 8260
    None, # 8261
    None, # 8262
    None, # 8263
    None, # 8264
    None, # 8265
    None, # 8266
    None, # 8267
    None, # 8268
    None, # 8269
    None, # 8270
    None, # 8271
    None, # 8272
    None, # 8273
    None, # 8274
    None, # 8275
    None, # 8276
    None, # 8277
    None, # 8278
    None, # 8279
    None, # 8280
    None, # 8281
    None, # 8282
    None, # 8283
    None, # 8284
    None, # 8285
    None, # 8286
    None, # 8287
    None, # 8288
    None, # 8289
    None, # 8290
    None, # 8291
    None, # 8292
    None, # 8293
    None, # 8294
    None, # 8295
    None, # 8296
    None, # 8297
    None, # 8298
    None, # 8299
    None, # 8300
    None, # 8301
    None, # 8302
    None, # 8303
    None, # 8304
    None, # 8305
    None, # 8306
    None, # 8307
    None, # 8308
    None, # 8309
    None, # 8310
    None, # 8311
    None, # 8312
    None, # 8313
    None, # 8314
    None, # 8315
    None, # 8316
    None, # 8317
    None, # 8318
    None, # 8319
    None, # 8320
    None, # 8321
    None, # 8322
    None, # 8323
    None, # 8324
    None, # 8325
    None, # 8326
    None, # 8327
    None, # 8328
    None, # 8329
    None, # 8330
    None, # 8331
    None, # 8332
    None, # 8333
    None, # 8334
    None, # 8335
    None, # 8336
    None, # 8337
    None, # 8338
    None, # 8339
    None, # 8340
    None, # 8341
    None, # 8342
    None, # 8343
    None, # 8344
    None, # 8345
    None, # 8346
    None, # 8347
    None, # 8348
    None, # 8349
    None, # 8350
    None, # 8351
    None, # 8352
    None, # 8353
    None, # 8354
    None, # 8355
    None, # 8356
    None, # 8357
    None, # 8358
    None, # 8359
    None, # 8360
    None, # 8361
    None, # 8362
    None, # 8363
    None, # 8364
    None, # 8365
    None, # 8366
    None, # 8367
    None, # 8368
    None, # 8369
    None, # 8370
    None, # 8371
    None, # 8372
    None, # 8373
    None, # 8374
    None, # 8375
    None, # 8376
    None, # 8377
    None, # 8378
    None, # 8379
    None, # 8380
    None, # 8381
    None, # 8382
    None, # 8383
    None, # 8384
    None, # 8385
    None, # 8386
    None, # 8387
    None, # 8388
    None, # 8389
    None, # 8390
    None, # 8391
    None, # 8392
    None, # 8393
    None, # 8394
    None, # 8395
    None, # 8396
    None, # 8397
    None, # 8398
    None, # 8399
    None, # 8400
    None, # 8401
    None, # 8402
    None, # 8403
    None, # 8404
    None, # 8405
    None, # 8406
    None, # 8407
    None, # 8408
    None, # 8409
    None, # 8410
    None, # 8411
    None, # 8412
    None, # 8413
    None, # 8414
    None, # 8415
    None, # 8416
    None, # 8417
    None, # 8418
    None, # 8419
    None, # 8420
    None, # 8421
    None, # 8422
    None, # 8423
    None, # 8424
    None, # 8425
    None, # 8426
    None, # 8427
    None, # 8428
    None, # 8429
    None, # 8430
    None, # 8431
    None, # 8432
    None, # 8433
    None, # 8434
    None, # 8435
    None, # 8436
    None, # 8437
    None, # 8438
    None, # 8439
    None, # 8440
    None, # 8441
    None, # 8442
    None, # 8443
    None, # 8444
    None, # 8445
    None, # 8446
    None, # 8447
    None, # 8448
    None, # 8449
    None, # 8450
    None, # 8451
    None, # 8452
    None, # 8453
    None, # 8454
    None, # 8455
    None, # 8456
    None, # 8457
    None, # 8458
    None, # 8459
    None, # 8460
    None, # 8461
    None, # 8462
    None, # 8463
    None, # 8464
    None, # 8465
    None, # 8466
    None, # 8467
    None, # 8468
    None, # 8469
    None, # 8470
    None, # 8471
    None, # 8472
    None, # 8473
    None, # 8474
    None, # 8475
    None, # 8476
    None, # 8477
    None, # 8478
    None, # 8479
    None, # 8480
    None, # 8481
    None, # 8482
    None, # 8483
    None, # 8484
    None, # 8485
    None, # 8486
    None, # 8487
    None, # 8488
    None, # 8489
    None, # 8490
    None, # 8491
    None, # 8492
    None, # 8493
    None, # 8494
    None, # 8495
    None, # 8496
    None, # 8497
    None, # 8498
    None, # 8499
    None, # 8500
    None, # 8501
    None, # 8502
    None, # 8503
    None, # 8504
    None, # 8505
    None, # 8506
    None, # 8507
    None, # 8508
    None, # 8509
    None, # 8510
    None, # 8511
    None, # 8512
    None, # 8513
    None, # 8514
    None, # 8515
    None, # 8516
    None, # 8517
    None, # 8518
    None, # 8519
    None, # 8520
    None, # 8521
    None, # 8522
    None, # 8523
    None, # 8524
    None, # 8525
    None, # 8526
    None, # 8527
    None, # 8528
    None, # 8529
    None, # 8530
    None, # 8531
    None, # 8532
    None, # 8533
    None, # 8534
    None, # 8535
    None, # 8536
    None, # 8537
    None, # 8538
    None, # 8539
    None, # 8540
    None, # 8541
    None, # 8542
    None, # 8543
    None, # 8544
    None, # 8545
    None, # 8546
    None, # 8547
    None, # 8548
    None, # 8549
    None, # 8550
    None, # 8551
    None, # 8552
    None, # 8553
    None, # 8554
    None, # 8555
    None, # 8556
    None, # 8557
    None, # 8558
    None, # 8559
    None, # 8560
    None, # 8561
    None, # 8562
    None, # 8563
    None, # 8564
    None, # 8565
    None, # 8566
    None, # 8567
    None, # 8568
    None, # 8569
    None, # 8570
    None, # 8571
    None, # 8572
    None, # 8573
    None, # 8574
    None, # 8575
    None, # 8576
    None, # 8577
    None, # 8578
    None, # 8579
    None, # 8580
    None, # 8581
    None, # 8582
    None, # 8583
    None, # 8584
    None, # 8585
    None, # 8586
    None, # 8587
    None, # 8588
    None, # 8589
    None, # 8590
    None, # 8591
    None, # 8592
    None, # 8593
    None, # 8594
    None, # 8595
    None, # 8596
    None, # 8597
    None, # 8598
    None, # 8599
    None, # 8600
    None, # 8601
    None, # 8602
    None, # 8603
    None, # 8604
    None, # 8605
    None, # 8606
    None, # 8607
    None, # 8608
    None, # 8609
    None, # 8610
    None, # 8611
    None, # 8612
    None, # 8613
    None, # 8614
    None, # 8615
    None, # 8616
    None, # 8617
    None, # 8618
    None, # 8619
    None, # 8620
    None, # 8621
    None, # 8622
    None, # 8623
    None, # 8624
    None, # 8625
    None, # 8626
    None, # 8627
    None, # 8628
    None, # 8629
    None, # 8630
    None, # 8631
    None, # 8632
    None, # 8633
    None, # 8634
    None, # 8635
    None, # 8636
    None, # 8637
    None, # 8638
    None, # 8639
    None, # 8640
    None, # 8641
    None, # 8642
    None, # 8643
    None, # 8644
    None, # 8645
    None, # 8646
    None, # 8647
    None, # 8648
    None, # 8649
    None, # 8650
    None, # 8651
    None, # 8652
    None, # 8653
    None, # 8654
    None, # 8655
    None, # 8656
    None, # 8657
    None, # 8658
    None, # 8659
    None, # 8660
    None, # 8661
    None, # 8662
    None, # 8663
    None, # 8664
    None, # 8665
    None, # 8666
    None, # 8667
    None, # 8668
    None, # 8669
    None, # 8670
    None, # 8671
    None, # 8672
    None, # 8673
    None, # 8674
    None, # 8675
    None, # 8676
    None, # 8677
    None, # 8678
    None, # 8679
    None, # 8680
    None, # 8681
    None, # 8682
    None, # 8683
    None, # 8684
    None, # 8685
    None, # 8686
    None, # 8687
    None, # 8688
    None, # 8689
    None, # 8690
    None, # 8691
    None, # 8692
    None, # 8693
    None, # 8694
    None, # 8695
    None, # 8696
    None, # 8697
    None, # 8698
    None, # 8699
    None, # 8700
    None, # 8701
    None, # 8702
    None, # 8703
    None, # 8704
    None, # 8705
    None, # 8706
    None, # 8707
    None, # 8708
    None, # 8709
    None, # 8710
    None, # 8711
    None, # 8712
    None, # 8713
    None, # 8714
    None, # 8715
    None, # 8716
    None, # 8717
    None, # 8718
    None, # 8719
    None, # 8720
    None, # 8721
    None, # 8722
    None, # 8723
    None, # 8724
    None, # 8725
    None, # 8726
    None, # 8727
    None, # 8728
    None, # 8729
    None, # 8730
    None, # 8731
    None, # 8732
    None, # 8733
    None, # 8734
    None, # 8735
    None, # 8736
    None, # 8737
    None, # 8738
    None, # 8739
    None, # 8740
    None, # 8741
    None, # 8742
    None, # 8743
    None, # 8744
    None, # 8745
    None, # 8746
    None, # 8747
    None, # 8748
    None, # 8749
    None, # 8750
    None, # 8751
    None, # 8752
    None, # 8753
    None, # 8754
    None, # 8755
    None, # 8756
    None, # 8757
    None, # 8758
    None, # 8759
    None, # 8760
    None, # 8761
    None, # 8762
    None, # 8763
    None, # 8764
    None, # 8765
    None, # 8766
    None, # 8767
    None, # 8768
    None, # 8769
    None, # 8770
    None, # 8771
    None, # 8772
    None, # 8773
    None, # 8774
    None, # 8775
    None, # 8776
    None, # 8777
    None, # 8778
    None, # 8779
    None, # 8780
    None, # 8781
    None, # 8782
    None, # 8783
    None, # 8784
    None, # 8785
    None, # 8786
    None, # 8787
    None, # 8788
    None, # 8789
    None, # 8790
    None, # 8791
    None, # 8792
    None, # 8793
    None, # 8794
    None, # 8795
    None, # 8796
    None, # 8797
    None, # 8798
    None, # 8799
    None, # 8800
    None, # 8801
    None, # 8802
    None, # 8803
    None, # 8804
    None, # 8805
    None, # 8806
    None, # 8807
    None, # 8808
    None, # 8809
    None, # 8810
    None, # 8811
    None, # 8812
    None, # 8813
    None, # 8814
    None, # 8815
    None, # 8816
    None, # 8817
    None, # 8818
    None, # 8819
    None, # 8820
    None, # 8821
    None, # 8822
    None, # 8823
    None, # 8824
    None, # 8825
    None, # 8826
    None, # 8827
    None, # 8828
    None, # 8829
    None, # 8830
    None, # 8831
    None, # 8832
    None, # 8833
    None, # 8834
    None, # 8835
    None, # 8836
    None, # 8837
    None, # 8838
    None, # 8839
    None, # 8840
    None, # 8841
    None, # 8842
    None, # 8843
    None, # 8844
    None, # 8845
    None, # 8846
    None, # 8847
    None, # 8848
    None, # 8849
    None, # 8850
    None, # 8851
    None, # 8852
    None, # 8853
    None, # 8854
    None, # 8855
    None, # 8856
    None, # 8857
    None, # 8858
    None, # 8859
    None, # 8860
    None, # 8861
    None, # 8862
    None, # 8863
    None, # 8864
    None, # 8865
    None, # 8866
    None, # 8867
    None, # 8868
    None, # 8869
    None, # 8870
    None, # 8871
    None, # 8872
    None, # 8873
    None, # 8874
    None, # 8875
    None, # 8876
    None, # 8877
    None, # 8878
    None, # 8879
    None, # 8880
    None, # 8881
    None, # 8882
    None, # 8883
    None, # 8884
    None, # 8885
    None, # 8886
    None, # 8887
    None, # 8888
    None, # 8889
    None, # 8890
    None, # 8891
    None, # 8892
    None, # 8893
    None, # 8894
    None, # 8895
    None, # 8896
    None, # 8897
    None, # 8898
    None, # 8899
    None, # 8900
    None, # 8901
    None, # 8902
    None, # 8903
    None, # 8904
    None, # 8905
    None, # 8906
    None, # 8907
    None, # 8908
    None, # 8909
    None, # 8910
    None, # 8911
    None, # 8912
    None, # 8913
    None, # 8914
    None, # 8915
    None, # 8916
    None, # 8917
    None, # 8918
    None, # 8919
    None, # 8920
    None, # 8921
    None, # 8922
    None, # 8923
    None, # 8924
    None, # 8925
    None, # 8926
    None, # 8927
    None, # 8928
    None, # 8929
    None, # 8930
    None, # 8931
    None, # 8932
    None, # 8933
    None, # 8934
    None, # 8935
    None, # 8936
    None, # 8937
    None, # 8938
    None, # 8939
    None, # 8940
    None, # 8941
    None, # 8942
    None, # 8943
    None, # 8944
    None, # 8945
    None, # 8946
    None, # 8947
    None, # 8948
    None, # 8949
    None, # 8950
    None, # 8951
    None, # 8952
    None, # 8953
    None, # 8954
    None, # 8955
    None, # 8956
    None, # 8957
    None, # 8958
    None, # 8959
    None, # 8960
    None, # 8961
    None, # 8962
    None, # 8963
    None, # 8964
    None, # 8965
    None, # 8966
    None, # 8967
    None, # 8968
    None, # 8969
    None, # 8970
    None, # 8971
    None, # 8972
    None, # 8973
    None, # 8974
    None, # 8975
    None, # 8976
    None, # 8977
    None, # 8978
    None, # 8979
    None, # 8980
    None, # 8981
    None, # 8982
    None, # 8983
    None, # 8984
    None, # 8985
    None, # 8986
    None, # 8987
    None, # 8988
    None, # 8989
    None, # 8990
    None, # 8991
    None, # 8992
    None, # 8993
    None, # 8994
    None, # 8995
    None, # 8996
    None, # 8997
    None, # 8998
    None, # 8999
    None, # 9000
    None, # 9001
    None, # 9002
    None, # 9003
    None, # 9004
    None, # 9005
    None, # 9006
    None, # 9007
    None, # 9008
    None, # 9009
    None, # 9010
    None, # 9011
    None, # 9012
    None, # 9013
    None, # 9014
    None, # 9015
    None, # 9016
    None, # 9017
    None, # 9018
    None, # 9019
    None, # 9020
    None, # 9021
    None, # 9022
    None, # 9023
    None, # 9024
    None, # 9025
    None, # 9026
    None, # 9027
    None, # 9028
    None, # 9029
    None, # 9030
    None, # 9031
    None, # 9032
    None, # 9033
    None, # 9034
    None, # 9035
    None, # 9036
    None, # 9037
    None, # 9038
    None, # 9039
    None, # 9040
    None, # 9041
    None, # 9042
    None, # 9043
    None, # 9044
    None, # 9045
    None, # 9046
    None, # 9047
    None, # 9048
    None, # 9049
    None, # 9050
    None, # 9051
    None, # 9052
    None, # 9053
    None, # 9054
    None, # 9055
    None, # 9056
    None, # 9057
    None, # 9058
    None, # 9059
    None, # 9060
    None, # 9061
    None, # 9062
    None, # 9063
    None, # 9064
    None, # 9065
    None, # 9066
    None, # 9067
    None, # 9068
    None, # 9069
    None, # 9070
    None, # 9071
    None, # 9072
    None, # 9073
    None, # 9074
    None, # 9075
    None, # 9076
    None, # 9077
    None, # 9078
    None, # 9079
    None, # 9080
    None, # 9081
    None, # 9082
    None, # 9083
    None, # 9084
    None, # 9085
    None, # 9086
    None, # 9087
    None, # 9088
    None, # 9089
    None, # 9090
    None, # 9091
    None, # 9092
    None, # 9093
    None, # 9094
    None, # 9095
    None, # 9096
    None, # 9097
    None, # 9098
    None, # 9099
    None, # 9100
    None, # 9101
    None, # 9102
    None, # 9103
    None, # 9104
    None, # 9105
    None, # 9106
    None, # 9107
    None, # 9108
    None, # 9109
    None, # 9110
    None, # 9111
    None, # 9112
    None, # 9113
    None, # 9114
    None, # 9115
    None, # 9116
    None, # 9117
    None, # 9118
    None, # 9119
    None, # 9120
    None, # 9121
    None, # 9122
    None, # 9123
    None, # 9124
    None, # 9125
    None, # 9126
    None, # 9127
    None, # 9128
    None, # 9129
    None, # 9130
    None, # 9131
    None, # 9132
    None, # 9133
    None, # 9134
    None, # 9135
    None, # 9136
    None, # 9137
    None, # 9138
    None, # 9139
    None, # 9140
    None, # 9141
    None, # 9142
    None, # 9143
    None, # 9144
    None, # 9145
    None, # 9146
    None, # 9147
    None, # 9148
    None, # 9149
    None, # 9150
    None, # 9151
    None, # 9152
    None, # 9153
    None, # 9154
    None, # 9155
    None, # 9156
    None, # 9157
    None, # 9158
    None, # 9159
    None, # 9160
    None, # 9161
    None, # 9162
    None, # 9163
    None, # 9164
    None, # 9165
    None, # 9166
    None, # 9167
    None, # 9168
    None, # 9169
    None, # 9170
    None, # 9171
    None, # 9172
    None, # 9173
    None, # 9174
    None, # 9175
    None, # 9176
    None, # 9177
    None, # 9178
    None, # 9179
    None, # 9180
    None, # 9181
    None, # 9182
    None, # 9183
    None, # 9184
    None, # 9185
    None, # 9186
    None, # 9187
    None, # 9188
    None, # 9189
    None, # 9190
    None, # 9191
    None, # 9192
    None, # 9193
    None, # 9194
    None, # 9195
    None, # 9196
    None, # 9197
    None, # 9198
    None, # 9199
    None, # 9200
    None, # 9201
    None, # 9202
    None, # 9203
    None, # 9204
    None, # 9205
    None, # 9206
    None, # 9207
    None, # 9208
    None, # 9209
    None, # 9210
    None, # 9211
    None, # 9212
    None, # 9213
    None, # 9214
    None, # 9215
    None, # 9216
    None, # 9217
    None, # 9218
    None, # 9219
    None, # 9220
    None, # 9221
    None, # 9222
    None, # 9223
    None, # 9224
    None, # 9225
    None, # 9226
    None, # 9227
    None, # 9228
    None, # 9229
    None, # 9230
    None, # 9231
    None, # 9232
    None, # 9233
    None, # 9234
    None, # 9235
    None, # 9236
    None, # 9237
    None, # 9238
    None, # 9239
    None, # 9240
    None, # 9241
    None, # 9242
    None, # 9243
    None, # 9244
    None, # 9245
    None, # 9246
    None, # 9247
    None, # 9248
    None, # 9249
    None, # 9250
    None, # 9251
    None, # 9252
    None, # 9253
    None, # 9254
    None, # 9255
    None, # 9256
    None, # 9257
    None, # 9258
    None, # 9259
    None, # 9260
    None, # 9261
    None, # 9262
    None, # 9263
    None, # 9264
    None, # 9265
    None, # 9266
    None, # 9267
    None, # 9268
    None, # 9269
    None, # 9270
    None, # 9271
    None, # 9272
    None, # 9273
    None, # 9274
    None, # 9275
    None, # 9276
    None, # 9277
    None, # 9278
    None, # 9279
    None, # 9280
    None, # 9281
    None, # 9282
    None, # 9283
    None, # 9284
    None, # 9285
    None, # 9286
    None, # 9287
    None, # 9288
    None, # 9289
    None, # 9290
    None, # 9291
    None, # 9292
    None, # 9293
    None, # 9294
    None, # 9295
    None, # 9296
    None, # 9297
    None, # 9298
    None, # 9299
    None, # 9300
    None, # 9301
    None, # 9302
    None, # 9303
    None, # 9304
    None, # 9305
    None, # 9306
    None, # 9307
    None, # 9308
    None, # 9309
    None, # 9310
    None, # 9311
    None, # 9312
    None, # 9313
    None, # 9314
    None, # 9315
    None, # 9316
    None, # 9317
    None, # 9318
    None, # 9319
    None, # 9320
    None, # 9321
    None, # 9322
    None, # 9323
    None, # 9324
    None, # 9325
    None, # 9326
    None, # 9327
    None, # 9328
    None, # 9329
    None, # 9330
    None, # 9331
    None, # 9332
    None, # 9333
    None, # 9334
    None, # 9335
    None, # 9336
    None, # 9337
    None, # 9338
    None, # 9339
    None, # 9340
    None, # 9341
    None, # 9342
    None, # 9343
    None, # 9344
    None, # 9345
    None, # 9346
    None, # 9347
    None, # 9348
    None, # 9349
    None, # 9350
    None, # 9351
    None, # 9352
    None, # 9353
    None, # 9354
    None, # 9355
    None, # 9356
    None, # 9357
    None, # 9358
    None, # 9359
    None, # 9360
    None, # 9361
    None, # 9362
    None, # 9363
    None, # 9364
    None, # 9365
    None, # 9366
    None, # 9367
    None, # 9368
    None, # 9369
    None, # 9370
    None, # 9371
    None, # 9372
    None, # 9373
    None, # 9374
    None, # 9375
    None, # 9376
    None, # 9377
    None, # 9378
    None, # 9379
    None, # 9380
    None, # 9381
    None, # 9382
    None, # 9383
    None, # 9384
    None, # 9385
    None, # 9386
    None, # 9387
    None, # 9388
    None, # 9389
    None, # 9390
    None, # 9391
    None, # 9392
    None, # 9393
    None, # 9394
    None, # 9395
    None, # 9396
    None, # 9397
    None, # 9398
    None, # 9399
    None, # 9400
    None, # 9401
    None, # 9402
    None, # 9403
    None, # 9404
    None, # 9405
    None, # 9406
    None, # 9407
    None, # 9408
    None, # 9409
    None, # 9410
    None, # 9411
    None, # 9412
    None, # 9413
    None, # 9414
    None, # 9415
    None, # 9416
    None, # 9417
    None, # 9418
    None, # 9419
    None, # 9420
    None, # 9421
    None, # 9422
    None, # 9423
    None, # 9424
    None, # 9425
    None, # 9426
    None, # 9427
    None, # 9428
    None, # 9429
    None, # 9430
    None, # 9431
    None, # 9432
    None, # 9433
    None, # 9434
    None, # 9435
    None, # 9436
    None, # 9437
    None, # 9438
    None, # 9439
    None, # 9440
    None, # 9441
    None, # 9442
    None, # 9443
    None, # 9444
    None, # 9445
    None, # 9446
    None, # 9447
    None, # 9448
    None, # 9449
    None, # 9450
    None, # 9451
    None, # 9452
    None, # 9453
    None, # 9454
    None, # 9455
    None, # 9456
    None, # 9457
    None, # 9458
    None, # 9459
    None, # 9460
    None, # 9461
    None, # 9462
    None, # 9463
    None, # 9464
    None, # 9465
    None, # 9466
    None, # 9467
    None, # 9468
    None, # 9469
    None, # 9470
    None, # 9471
    None, # 9472
    None, # 9473
    None, # 9474
    None, # 9475
    None, # 9476
    None, # 9477
    None, # 9478
    None, # 9479
    None, # 9480
    None, # 9481
    None, # 9482
    None, # 9483
    None, # 9484
    None, # 9485
    None, # 9486
    None, # 9487
    None, # 9488
    None, # 9489
    None, # 9490
    None, # 9491
    None, # 9492
    None, # 9493
    None, # 9494
    None, # 9495
    None, # 9496
    None, # 9497
    None, # 9498
    None, # 9499
    None, # 9500
    None, # 9501
    None, # 9502
    None, # 9503
    None, # 9504
    None, # 9505
    None, # 9506
    None, # 9507
    None, # 9508
    None, # 9509
    None, # 9510
    None, # 9511
    None, # 9512
    None, # 9513
    None, # 9514
    None, # 9515
    None, # 9516
    None, # 9517
    None, # 9518
    None, # 9519
    None, # 9520
    None, # 9521
    None, # 9522
    None, # 9523
    None, # 9524
    None, # 9525
    None, # 9526
    None, # 9527
    None, # 9528
    None, # 9529
    None, # 9530
    None, # 9531
    None, # 9532
    None, # 9533
    None, # 9534
    None, # 9535
    None, # 9536
    None, # 9537
    None, # 9538
    None, # 9539
    None, # 9540
    None, # 9541
    None, # 9542
    None, # 9543
    None, # 9544
    None, # 9545
    None, # 9546
    None, # 9547
    None, # 9548
    None, # 9549
    None, # 9550
    None, # 9551
    None, # 9552
    None, # 9553
    None, # 9554
    None, # 9555
    None, # 9556
    None, # 9557
    None, # 9558
    None, # 9559
    None, # 9560
    None, # 9561
    None, # 9562
    None, # 9563
    None, # 9564
    None, # 9565
    None, # 9566
    None, # 9567
    None, # 9568
    None, # 9569
    None, # 9570
    None, # 9571
    None, # 9572
    None, # 9573
    None, # 9574
    None, # 9575
    None, # 9576
    None, # 9577
    None, # 9578
    None, # 9579
    None, # 9580
    None, # 9581
    None, # 9582
    None, # 9583
    None, # 9584
    None, # 9585
    None, # 9586
    None, # 9587
    None, # 9588
    None, # 9589
    None, # 9590
    None, # 9591
    None, # 9592
    None, # 9593
    None, # 9594
    None, # 9595
    None, # 9596
    None, # 9597
    None, # 9598
    None, # 9599
    None, # 9600
    None, # 9601
    None, # 9602
    None, # 9603
    None, # 9604
    None, # 9605
    None, # 9606
    None, # 9607
    None, # 9608
    None, # 9609
    None, # 9610
    None, # 9611
    None, # 9612
    None, # 9613
    None, # 9614
    None, # 9615
    None, # 9616
    None, # 9617
    None, # 9618
    None, # 9619
    None, # 9620
    None, # 9621
    None, # 9622
    None, # 9623
    None, # 9624
    None, # 9625
    None, # 9626
    None, # 9627
    None, # 9628
    None, # 9629
    None, # 9630
    None, # 9631
    None, # 9632
    None, # 9633
    None, # 9634
    None, # 9635
    None, # 9636
    None, # 9637
    None, # 9638
    None, # 9639
    None, # 9640
    None, # 9641
    None, # 9642
    None, # 9643
    None, # 9644
    None, # 9645
    None, # 9646
    None, # 9647
    None, # 9648
    None, # 9649
    None, # 9650
    None, # 9651
    None, # 9652
    None, # 9653
    None, # 9654
    None, # 9655
    None, # 9656
    None, # 9657
    None, # 9658
    None, # 9659
    None, # 9660
    None, # 9661
    None, # 9662
    None, # 9663
    None, # 9664
    None, # 9665
    None, # 9666
    None, # 9667
    None, # 9668
    None, # 9669
    None, # 9670
    None, # 9671
    None, # 9672
    None, # 9673
    None, # 9674
    None, # 9675
    None, # 9676
    None, # 9677
    None, # 9678
    None, # 9679
    None, # 9680
    None, # 9681
    None, # 9682
    None, # 9683
    None, # 9684
    None, # 9685
    None, # 9686
    None, # 9687
    None, # 9688
    None, # 9689
    None, # 9690
    None, # 9691
    None, # 9692
    None, # 9693
    None, # 9694
    None, # 9695
    None, # 9696
    None, # 9697
    None, # 9698
    None, # 9699
    None, # 9700
    None, # 9701
    None, # 9702
    None, # 9703
    None, # 9704
    None, # 9705
    None, # 9706
    None, # 9707
    None, # 9708
    None, # 9709
    None, # 9710
    None, # 9711
    None, # 9712
    None, # 9713
    None, # 9714
    None, # 9715
    None, # 9716
    None, # 9717
    None, # 9718
    None, # 9719
    None, # 9720
    None, # 9721
    None, # 9722
    None, # 9723
    None, # 9724
    None, # 9725
    None, # 9726
    None, # 9727
    None, # 9728
    None, # 9729
    None, # 9730
    None, # 9731
    None, # 9732
    None, # 9733
    None, # 9734
    None, # 9735
    None, # 9736
    None, # 9737
    None, # 9738
    None, # 9739
    None, # 9740
    None, # 9741
    None, # 9742
    None, # 9743
    None, # 9744
    None, # 9745
    None, # 9746
    None, # 9747
    None, # 9748
    None, # 9749
    None, # 9750
    None, # 9751
    None, # 9752
    None, # 9753
    None, # 9754
    None, # 9755
    None, # 9756
    None, # 9757
    None, # 9758
    None, # 9759
    None, # 9760
    None, # 9761
    None, # 9762
    None, # 9763
    None, # 9764
    None, # 9765
    None, # 9766
    None, # 9767
    None, # 9768
    None, # 9769
    None, # 9770
    None, # 9771
    None, # 9772
    None, # 9773
    None, # 9774
    None, # 9775
    None, # 9776
    None, # 9777
    None, # 9778
    None, # 9779
    None, # 9780
    None, # 9781
    None, # 9782
    None, # 9783
    None, # 9784
    None, # 9785
    None, # 9786
    None, # 9787
    None, # 9788
    None, # 9789
    None, # 9790
    None, # 9791
    None, # 9792
    None, # 9793
    None, # 9794
    None, # 9795
    None, # 9796
    None, # 9797
    None, # 9798
    None, # 9799
    None, # 9800
    None, # 9801
    None, # 9802
    None, # 9803
    None, # 9804
    None, # 9805
    None, # 9806
    None, # 9807
    None, # 9808
    None, # 9809
    None, # 9810
    None, # 9811
    None, # 9812
    None, # 9813
    None, # 9814
    None, # 9815
    None, # 9816
    None, # 9817
    None, # 9818
    None, # 9819
    None, # 9820
    None, # 9821
    None, # 9822
    None, # 9823
    None, # 9824
    None, # 9825
    None, # 9826
    None, # 9827
    None, # 9828
    None, # 9829
    None, # 9830
    None, # 9831
    None, # 9832
    None, # 9833
    None, # 9834
    None, # 9835
    None, # 9836
    None, # 9837
    None, # 9838
    None, # 9839
    None, # 9840
    None, # 9841
    None, # 9842
    None, # 9843
    None, # 9844
    None, # 9845
    None, # 9846
    None, # 9847
    None, # 9848
    None, # 9849
    None, # 9850
    None, # 9851
    None, # 9852
    None, # 9853
    None, # 9854
    None, # 9855
    None, # 9856
    None, # 9857
    None, # 9858
    None, # 9859
    None, # 9860
    None, # 9861
    None, # 9862
    None, # 9863
    None, # 9864
    None, # 9865
    None, # 9866
    None, # 9867
    None, # 9868
    None, # 9869
    None, # 9870
    None, # 9871
    None, # 9872
    None, # 9873
    None, # 9874
    None, # 9875
    None, # 9876
    None, # 9877
    None, # 9878
    None, # 9879
    None, # 9880
    None, # 9881
    None, # 9882
    None, # 9883
    None, # 9884
    None, # 9885
    None, # 9886
    None, # 9887
    None, # 9888
    None, # 9889
    None, # 9890
    None, # 9891
    None, # 9892
    None, # 9893
    None, # 9894
    None, # 9895
    None, # 9896
    None, # 9897
    None, # 9898
    None, # 9899
    None, # 9900
    None, # 9901
    None, # 9902
    None, # 9903
    None, # 9904
    None, # 9905
    None, # 9906
    None, # 9907
    None, # 9908
    None, # 9909
    None, # 9910
    None, # 9911
    None, # 9912
    None, # 9913
    None, # 9914
    None, # 9915
    None, # 9916
    None, # 9917
    None, # 9918
    None, # 9919
    None, # 9920
    None, # 9921
    None, # 9922
    None, # 9923
    None, # 9924
    None, # 9925
    None, # 9926
    None, # 9927
    None, # 9928
    None, # 9929
    None, # 9930
    None, # 9931
    None, # 9932
    None, # 9933
    None, # 9934
    None, # 9935
    None, # 9936
    None, # 9937
    None, # 9938
    None, # 9939
    None, # 9940
    None, # 9941
    None, # 9942
    None, # 9943
    None, # 9944
    None, # 9945
    None, # 9946
    None, # 9947
    None, # 9948
    None, # 9949
    None, # 9950
    None, # 9951
    None, # 9952
    None, # 9953
    None, # 9954
    None, # 9955
    None, # 9956
    None, # 9957
    None, # 9958
    None, # 9959
    None, # 9960
    None, # 9961
    None, # 9962
    None, # 9963
    None, # 9964
    None, # 9965
    None, # 9966
    None, # 9967
    None, # 9968
    None, # 9969
    None, # 9970
    None, # 9971
    None, # 9972
    None, # 9973
    None, # 9974
    None, # 9975
    None, # 9976
    None, # 9977
    None, # 9978
    None, # 9979
    None, # 9980
    None, # 9981
    None, # 9982
    None, # 9983
    None, # 9984
    None, # 9985
    None, # 9986
    None, # 9987
    None, # 9988
    None, # 9989
    None, # 9990
    None, # 9991
    None, # 9992
    None, # 9993
    None, # 9994
    None, # 9995
    None, # 9996
    None, # 9997
    None, # 9998
    None, # 9999
    (10000, TType.I32, 'target_type', None, None, ), # 10000
    (10001, TType.STRING, 'column_id', None, None, ), # 10001
    (10002, TType.DOUBLE, 'pc_weight', None, None, ), # 10002
  )

  def __init__(self, item_type=None, label_infos=None, item_id=None, list_title=None, original_title=None, source=None, item_time_info=None, desc=None, imgs=None, page_type=None, comment_ids=None, comment_id=None, url=None, sub_title=None, doc_quality=None, rt_label_infos=None, site_id=None, priority=None, label_sequence=None, labels=None, publisher=None, image_count=None, image_group_count=None, image_count_in_group=None, title_char_count=None, title_word_count=None, title_byte_count=None, doc_char_count=None, doc_word_count=None, doc_byte_count=None, doc_passage_count=None, is_santu=None, source_type=None, sansu_score=None, pctr=None, score=None, match_type=None, skip_id=None, board_id=None, rec_source=None, img_type=None, tags=None, pic_count=None, live_info=None, unlike_reason=None, editor=None, dkeys=None, newstype=None, channel_name=None, comment_url=None, comment_num=None, recommend=None, tlastid=None, label=None, topic_link=None, show_keywords=None, sim_hash=None, title_sign=None, titleword_sign=None, target_type=None, column_id=None, pc_weight=None,):
    self.item_type = item_type
    self.label_infos = label_infos
    self.item_id = item_id
    self.list_title = list_title
    self.original_title = original_title
    self.source = source
    self.item_time_info = item_time_info
    self.desc = desc
    self.imgs = imgs
    self.page_type = page_type
    self.comment_ids = comment_ids
    self.comment_id = comment_id
    self.url = url
    self.sub_title = sub_title
    self.doc_quality = doc_quality
    self.rt_label_infos = rt_label_infos
    self.site_id = site_id
    self.priority = priority
    self.label_sequence = label_sequence
    self.labels = labels
    self.publisher = publisher
    self.image_count = image_count
    self.image_group_count = image_group_count
    self.image_count_in_group = image_count_in_group
    self.title_char_count = title_char_count
    self.title_word_count = title_word_count
    self.title_byte_count = title_byte_count
    self.doc_char_count = doc_char_count
    self.doc_word_count = doc_word_count
    self.doc_byte_count = doc_byte_count
    self.doc_passage_count = doc_passage_count
    self.is_santu = is_santu
    self.source_type = source_type
    self.sansu_score = sansu_score
    self.pctr = pctr
    self.score = score
    self.match_type = match_type
    self.skip_id = skip_id
    self.board_id = board_id
    self.rec_source = rec_source
    self.img_type = img_type
    self.tags = tags
    self.pic_count = pic_count
    self.live_info = live_info
    self.unlike_reason = unlike_reason
    self.editor = editor
    self.dkeys = dkeys
    self.newstype = newstype
    self.channel_name = channel_name
    self.comment_url = comment_url
    self.comment_num = comment_num
    self.recommend = recommend
    self.tlastid = tlastid
    self.label = label
    self.topic_link = topic_link
    self.show_keywords = show_keywords
    self.sim_hash = sim_hash
    self.title_sign = title_sign
    self.titleword_sign = titleword_sign
    self.target_type = target_type
    self.column_id = column_id
    self.pc_weight = pc_weight

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.item_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.label_infos = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in xrange(_size7):
            _key12 = iprot.readI32();
            _val13 = []
            (_etype17, _size14) = iprot.readListBegin()
            for _i18 in xrange(_size14):
              _elem19 = LabelInfo()
              _elem19.read(iprot)
              _val13.append(_elem19)
            iprot.readListEnd()
            self.label_infos[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.item_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.list_title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.original_title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.item_time_info = ItemTimeInfo()
          self.item_time_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.desc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.imgs = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readString();
            self.imgs.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.page_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.comment_ids = []
          (_etype29, _size26) = iprot.readListBegin()
          for _i30 in xrange(_size26):
            _elem31 = iprot.readString();
            self.comment_ids.append(_elem31)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 63:
        if ftype == TType.STRING:
          self.comment_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 62:
        if ftype == TType.STRING:
          self.sub_title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 66:
        if ftype == TType.I32:
          self.doc_quality = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.MAP:
          self.rt_label_infos = {}
          (_ktype33, _vtype34, _size32 ) = iprot.readMapBegin()
          for _i36 in xrange(_size32):
            _key37 = iprot.readI32();
            _val38 = []
            (_etype42, _size39) = iprot.readListBegin()
            for _i43 in xrange(_size39):
              _elem44 = LabelInfo()
              _elem44.read(iprot)
              _val38.append(_elem44)
            iprot.readListEnd()
            self.rt_label_infos[_key37] = _val38
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.site_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.priority = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.LIST:
          self.label_sequence = []
          (_etype48, _size45) = iprot.readListBegin()
          for _i49 in xrange(_size45):
            _elem50 = LableTimeDimension()
            _elem50.read(iprot)
            self.label_sequence.append(_elem50)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.MAP:
          self.labels = {}
          (_ktype52, _vtype53, _size51 ) = iprot.readMapBegin()
          for _i55 in xrange(_size51):
            _key56 = iprot.readI32();
            _val57 = []
            (_etype61, _size58) = iprot.readListBegin()
            for _i62 in xrange(_size58):
              _elem63 = LabelInfo()
              _elem63.read(iprot)
              _val57.append(_elem63)
            iprot.readListEnd()
            self.labels[_key56] = _val57
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.publisher = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.I32:
          self.image_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.I32:
          self.image_group_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.I32:
          self.image_count_in_group = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.I32:
          self.title_char_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.I32:
          self.title_word_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 56:
        if ftype == TType.I32:
          self.title_byte_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 57:
        if ftype == TType.I32:
          self.doc_char_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 58:
        if ftype == TType.I32:
          self.doc_word_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 59:
        if ftype == TType.I32:
          self.doc_byte_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.I32:
          self.doc_passage_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 61:
        if ftype == TType.I32:
          self.is_santu = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 64:
        if ftype == TType.I32:
          self.source_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 65:
        if ftype == TType.I32:
          self.sansu_score = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 80:
        if ftype == TType.I32:
          self.pctr = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1000:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 1001:
        if ftype == TType.I32:
          self.match_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.skip_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.board_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.rec_source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.img_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.tags = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.pic_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRUCT:
          self.live_info = LiveInfo()
          self.live_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.LIST:
          self.unlike_reason = []
          (_etype67, _size64) = iprot.readListBegin()
          for _i68 in xrange(_size64):
            _elem69 = iprot.readString();
            self.unlike_reason.append(_elem69)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.LIST:
          self.editor = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = EditorInfo()
            _elem75.read(iprot)
            self.editor.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.STRING:
          self.dkeys = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.newstype = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.channel_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.comment_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.comment_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.BOOL:
          self.recommend = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.tlastid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.topic_link = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.LIST:
          self.show_keywords = []
          (_etype79, _size76) = iprot.readListBegin()
          for _i80 in xrange(_size76):
            _elem81 = {}
            (_ktype83, _vtype84, _size82 ) = iprot.readMapBegin()
            for _i86 in xrange(_size82):
              _key87 = iprot.readString();
              _val88 = iprot.readString();
              _elem81[_key87] = _val88
            iprot.readMapEnd()
            self.show_keywords.append(_elem81)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I64:
          self.sim_hash = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I64:
          self.title_sign = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.I64:
          self.titleword_sign = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10000:
        if ftype == TType.I32:
          self.target_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10001:
        if ftype == TType.STRING:
          self.column_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10002:
        if ftype == TType.DOUBLE:
          self.pc_weight = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ItemInfo')
    if self.item_type is not None:
      oprot.writeFieldBegin('item_type', TType.I32, 1)
      oprot.writeI32(self.item_type)
      oprot.writeFieldEnd()
    if self.label_infos is not None:
      oprot.writeFieldBegin('label_infos', TType.MAP, 2)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.label_infos))
      for kiter89,viter90 in self.label_infos.items():
        oprot.writeI32(kiter89)
        oprot.writeListBegin(TType.STRUCT, len(viter90))
        for iter91 in viter90:
          iter91.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.item_id is not None:
      oprot.writeFieldBegin('item_id', TType.STRING, 3)
      oprot.writeString(self.item_id)
      oprot.writeFieldEnd()
    if self.list_title is not None:
      oprot.writeFieldBegin('list_title', TType.STRING, 4)
      oprot.writeString(self.list_title)
      oprot.writeFieldEnd()
    if self.original_title is not None:
      oprot.writeFieldBegin('original_title', TType.STRING, 5)
      oprot.writeString(self.original_title)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 6)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.item_time_info is not None:
      oprot.writeFieldBegin('item_time_info', TType.STRUCT, 7)
      self.item_time_info.write(oprot)
      oprot.writeFieldEnd()
    if self.desc is not None:
      oprot.writeFieldBegin('desc', TType.STRING, 8)
      oprot.writeString(self.desc)
      oprot.writeFieldEnd()
    if self.imgs is not None:
      oprot.writeFieldBegin('imgs', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.imgs))
      for iter92 in self.imgs:
        oprot.writeString(iter92)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.page_type is not None:
      oprot.writeFieldBegin('page_type', TType.I32, 10)
      oprot.writeI32(self.page_type)
      oprot.writeFieldEnd()
    if self.comment_ids is not None:
      oprot.writeFieldBegin('comment_ids', TType.LIST, 11)
      oprot.writeListBegin(TType.STRING, len(self.comment_ids))
      for iter93 in self.comment_ids:
        oprot.writeString(iter93)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 12)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.skip_id is not None:
      oprot.writeFieldBegin('skip_id', TType.STRING, 13)
      oprot.writeString(self.skip_id)
      oprot.writeFieldEnd()
    if self.board_id is not None:
      oprot.writeFieldBegin('board_id', TType.STRING, 14)
      oprot.writeString(self.board_id)
      oprot.writeFieldEnd()
    if self.rec_source is not None:
      oprot.writeFieldBegin('rec_source', TType.STRING, 15)
      oprot.writeString(self.rec_source)
      oprot.writeFieldEnd()
    if self.img_type is not None:
      oprot.writeFieldBegin('img_type', TType.I32, 16)
      oprot.writeI32(self.img_type)
      oprot.writeFieldEnd()
    if self.tags is not None:
      oprot.writeFieldBegin('tags', TType.STRING, 17)
      oprot.writeString(self.tags)
      oprot.writeFieldEnd()
    if self.pic_count is not None:
      oprot.writeFieldBegin('pic_count', TType.I32, 18)
      oprot.writeI32(self.pic_count)
      oprot.writeFieldEnd()
    if self.live_info is not None:
      oprot.writeFieldBegin('live_info', TType.STRUCT, 19)
      self.live_info.write(oprot)
      oprot.writeFieldEnd()
    if self.newstype is not None:
      oprot.writeFieldBegin('newstype', TType.STRING, 21)
      oprot.writeString(self.newstype)
      oprot.writeFieldEnd()
    if self.channel_name is not None:
      oprot.writeFieldBegin('channel_name', TType.STRING, 22)
      oprot.writeString(self.channel_name)
      oprot.writeFieldEnd()
    if self.comment_url is not None:
      oprot.writeFieldBegin('comment_url', TType.STRING, 23)
      oprot.writeString(self.comment_url)
      oprot.writeFieldEnd()
    if self.comment_num is not None:
      oprot.writeFieldBegin('comment_num', TType.I32, 24)
      oprot.writeI32(self.comment_num)
      oprot.writeFieldEnd()
    if self.recommend is not None:
      oprot.writeFieldBegin('recommend', TType.BOOL, 25)
      oprot.writeBool(self.recommend)
      oprot.writeFieldEnd()
    if self.tlastid is not None:
      oprot.writeFieldBegin('tlastid', TType.STRING, 26)
      oprot.writeString(self.tlastid)
      oprot.writeFieldEnd()
    if self.label is not None:
      oprot.writeFieldBegin('label', TType.STRING, 27)
      oprot.writeString(self.label)
      oprot.writeFieldEnd()
    if self.topic_link is not None:
      oprot.writeFieldBegin('topic_link', TType.STRING, 28)
      oprot.writeString(self.topic_link)
      oprot.writeFieldEnd()
    if self.show_keywords is not None:
      oprot.writeFieldBegin('show_keywords', TType.LIST, 29)
      oprot.writeListBegin(TType.MAP, len(self.show_keywords))
      for iter94 in self.show_keywords:
        oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter94))
        for kiter95,viter96 in iter94.items():
          oprot.writeString(kiter95)
          oprot.writeString(viter96)
        oprot.writeMapEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rt_label_infos is not None:
      oprot.writeFieldBegin('rt_label_infos', TType.MAP, 30)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.rt_label_infos))
      for kiter97,viter98 in self.rt_label_infos.items():
        oprot.writeI32(kiter97)
        oprot.writeListBegin(TType.STRUCT, len(viter98))
        for iter99 in viter98:
          iter99.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.site_id is not None:
      oprot.writeFieldBegin('site_id', TType.I32, 31)
      oprot.writeI32(self.site_id)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I32, 32)
      oprot.writeI32(self.priority)
      oprot.writeFieldEnd()
    if self.label_sequence is not None:
      oprot.writeFieldBegin('label_sequence', TType.LIST, 33)
      oprot.writeListBegin(TType.STRUCT, len(self.label_sequence))
      for iter100 in self.label_sequence:
        iter100.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.labels is not None:
      oprot.writeFieldBegin('labels', TType.MAP, 34)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.labels))
      for kiter101,viter102 in self.labels.items():
        oprot.writeI32(kiter101)
        oprot.writeListBegin(TType.STRUCT, len(viter102))
        for iter103 in viter102:
          iter103.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.sim_hash is not None:
      oprot.writeFieldBegin('sim_hash', TType.I64, 40)
      oprot.writeI64(self.sim_hash)
      oprot.writeFieldEnd()
    if self.title_sign is not None:
      oprot.writeFieldBegin('title_sign', TType.I64, 41)
      oprot.writeI64(self.title_sign)
      oprot.writeFieldEnd()
    if self.titleword_sign is not None:
      oprot.writeFieldBegin('titleword_sign', TType.I64, 42)
      oprot.writeI64(self.titleword_sign)
      oprot.writeFieldEnd()
    if self.unlike_reason is not None:
      oprot.writeFieldBegin('unlike_reason', TType.LIST, 43)
      oprot.writeListBegin(TType.STRING, len(self.unlike_reason))
      for iter104 in self.unlike_reason:
        oprot.writeString(iter104)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.editor is not None:
      oprot.writeFieldBegin('editor', TType.LIST, 44)
      oprot.writeListBegin(TType.STRUCT, len(self.editor))
      for iter105 in self.editor:
        iter105.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dkeys is not None:
      oprot.writeFieldBegin('dkeys', TType.STRING, 45)
      oprot.writeString(self.dkeys)
      oprot.writeFieldEnd()
    if self.publisher is not None:
      oprot.writeFieldBegin('publisher', TType.STRING, 50)
      oprot.writeString(self.publisher)
      oprot.writeFieldEnd()
    if self.image_count is not None:
      oprot.writeFieldBegin('image_count', TType.I32, 51)
      oprot.writeI32(self.image_count)
      oprot.writeFieldEnd()
    if self.image_group_count is not None:
      oprot.writeFieldBegin('image_group_count', TType.I32, 52)
      oprot.writeI32(self.image_group_count)
      oprot.writeFieldEnd()
    if self.image_count_in_group is not None:
      oprot.writeFieldBegin('image_count_in_group', TType.I32, 53)
      oprot.writeI32(self.image_count_in_group)
      oprot.writeFieldEnd()
    if self.title_char_count is not None:
      oprot.writeFieldBegin('title_char_count', TType.I32, 54)
      oprot.writeI32(self.title_char_count)
      oprot.writeFieldEnd()
    if self.title_word_count is not None:
      oprot.writeFieldBegin('title_word_count', TType.I32, 55)
      oprot.writeI32(self.title_word_count)
      oprot.writeFieldEnd()
    if self.title_byte_count is not None:
      oprot.writeFieldBegin('title_byte_count', TType.I32, 56)
      oprot.writeI32(self.title_byte_count)
      oprot.writeFieldEnd()
    if self.doc_char_count is not None:
      oprot.writeFieldBegin('doc_char_count', TType.I32, 57)
      oprot.writeI32(self.doc_char_count)
      oprot.writeFieldEnd()
    if self.doc_word_count is not None:
      oprot.writeFieldBegin('doc_word_count', TType.I32, 58)
      oprot.writeI32(self.doc_word_count)
      oprot.writeFieldEnd()
    if self.doc_byte_count is not None:
      oprot.writeFieldBegin('doc_byte_count', TType.I32, 59)
      oprot.writeI32(self.doc_byte_count)
      oprot.writeFieldEnd()
    if self.doc_passage_count is not None:
      oprot.writeFieldBegin('doc_passage_count', TType.I32, 60)
      oprot.writeI32(self.doc_passage_count)
      oprot.writeFieldEnd()
    if self.is_santu is not None:
      oprot.writeFieldBegin('is_santu', TType.I32, 61)
      oprot.writeI32(self.is_santu)
      oprot.writeFieldEnd()
    if self.sub_title is not None:
      oprot.writeFieldBegin('sub_title', TType.STRING, 62)
      oprot.writeString(self.sub_title)
      oprot.writeFieldEnd()
    if self.comment_id is not None:
      oprot.writeFieldBegin('comment_id', TType.STRING, 63)
      oprot.writeString(self.comment_id)
      oprot.writeFieldEnd()
    if self.source_type is not None:
      oprot.writeFieldBegin('source_type', TType.I32, 64)
      oprot.writeI32(self.source_type)
      oprot.writeFieldEnd()
    if self.sansu_score is not None:
      oprot.writeFieldBegin('sansu_score', TType.I32, 65)
      oprot.writeI32(self.sansu_score)
      oprot.writeFieldEnd()
    if self.doc_quality is not None:
      oprot.writeFieldBegin('doc_quality', TType.I32, 66)
      oprot.writeI32(self.doc_quality)
      oprot.writeFieldEnd()
    if self.pctr is not None:
      oprot.writeFieldBegin('pctr', TType.I32, 80)
      oprot.writeI32(self.pctr)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 1000)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    if self.match_type is not None:
      oprot.writeFieldBegin('match_type', TType.I32, 1001)
      oprot.writeI32(self.match_type)
      oprot.writeFieldEnd()
    if self.target_type is not None:
      oprot.writeFieldBegin('target_type', TType.I32, 10000)
      oprot.writeI32(self.target_type)
      oprot.writeFieldEnd()
    if self.column_id is not None:
      oprot.writeFieldBegin('column_id', TType.STRING, 10001)
      oprot.writeString(self.column_id)
      oprot.writeFieldEnd()
    if self.pc_weight is not None:
      oprot.writeFieldBegin('pc_weight', TType.DOUBLE, 10002)
      oprot.writeDouble(self.pc_weight)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserInfo:
  """
  Attributes:
   - uid_type
   - uid
   - device
   - label_infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid_type', None, None, ), # 1
    (2, TType.STRING, 'uid', None, None, ), # 2
    (3, TType.STRUCT, 'device', (Device, Device.thrift_spec), None, ), # 3
    (4, TType.MAP, 'label_infos', (TType.I32,None,TType.LIST,(TType.STRUCT,(LabelInfo, LabelInfo.thrift_spec))), None, ), # 4
  )

  def __init__(self, uid_type=None, uid=None, device=None, label_infos=None,):
    self.uid_type = uid_type
    self.uid = uid
    self.device = device
    self.label_infos = label_infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.device = Device()
          self.device.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.label_infos = {}
          (_ktype107, _vtype108, _size106 ) = iprot.readMapBegin()
          for _i110 in xrange(_size106):
            _key111 = iprot.readI32();
            _val112 = []
            (_etype116, _size113) = iprot.readListBegin()
            for _i117 in xrange(_size113):
              _elem118 = LabelInfo()
              _elem118.read(iprot)
              _val112.append(_elem118)
            iprot.readListEnd()
            self.label_infos[_key111] = _val112
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserInfo')
    if self.uid_type is not None:
      oprot.writeFieldBegin('uid_type', TType.I32, 1)
      oprot.writeI32(self.uid_type)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.STRING, 2)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.device is not None:
      oprot.writeFieldBegin('device', TType.STRUCT, 3)
      self.device.write(oprot)
      oprot.writeFieldEnd()
    if self.label_infos is not None:
      oprot.writeFieldBegin('label_infos', TType.MAP, 4)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.label_infos))
      for kiter119,viter120 in self.label_infos.items():
        oprot.writeI32(kiter119)
        oprot.writeListBegin(TType.STRUCT, len(viter120))
        for iter121 in viter120:
          iter121.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClickItemInfo:
  """
  Attributes:
   - item_info
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'item_info', (ItemInfo, ItemInfo.thrift_spec), None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
  )

  def __init__(self, item_info=None, timestamp=None,):
    self.item_info = item_info
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.item_info = ItemInfo()
          self.item_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClickItemInfo')
    if self.item_info is not None:
      oprot.writeFieldBegin('item_info', TType.STRUCT, 1)
      self.item_info.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UnlikeItem:
  """
  Attributes:
   - unlike_info
   - count
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'unlike_info', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
  )

  def __init__(self, unlike_info=None, count=None, timestamp=None,):
    self.unlike_info = unlike_info
    self.count = count
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.unlike_info = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UnlikeItem')
    if self.unlike_info is not None:
      oprot.writeFieldBegin('unlike_info', TType.STRING, 1)
      oprot.writeString(self.unlike_info)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OccupationInfo:
  """
  Attributes:
   - occupation_level_1
   - occupation_level_2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'occupation_level_1', None, None, ), # 1
    (2, TType.STRING, 'occupation_level_2', None, None, ), # 2
  )

  def __init__(self, occupation_level_1=None, occupation_level_2=None,):
    self.occupation_level_1 = occupation_level_1
    self.occupation_level_2 = occupation_level_2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.occupation_level_1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.occupation_level_2 = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OccupationInfo')
    if self.occupation_level_1 is not None:
      oprot.writeFieldBegin('occupation_level_1', TType.STRING, 1)
      oprot.writeString(self.occupation_level_1)
      oprot.writeFieldEnd()
    if self.occupation_level_2 is not None:
      oprot.writeFieldBegin('occupation_level_2', TType.STRING, 2)
      oprot.writeString(self.occupation_level_2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OrgnizationInfo:
  """
  Attributes:
   - orgnization_level_1
   - orgnization_level_2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'orgnization_level_1', None, None, ), # 1
    (2, TType.STRING, 'orgnization_level_2', None, None, ), # 2
  )

  def __init__(self, orgnization_level_1=None, orgnization_level_2=None,):
    self.orgnization_level_1 = orgnization_level_1
    self.orgnization_level_2 = orgnization_level_2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.orgnization_level_1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.orgnization_level_2 = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OrgnizationInfo')
    if self.orgnization_level_1 is not None:
      oprot.writeFieldBegin('orgnization_level_1', TType.STRING, 1)
      oprot.writeString(self.orgnization_level_1)
      oprot.writeFieldEnd()
    if self.orgnization_level_2 is not None:
      oprot.writeFieldBegin('orgnization_level_2', TType.STRING, 2)
      oprot.writeString(self.orgnization_level_2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfile:
  """
  Attributes:
   - hist_locations
   - hist_apps
   - hist_devices
   - hist_useragents
   - rt_labels
   - hist_labels
   - user_value
   - gender
   - age
   - income
   - education
   - click_items
   - rt_location
   - rt_profile_version
   - hist_profile_version
   - unlike_reason
   - unlike_docids
   - user_set_location
   - occupation_info
   - orgnization_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'hist_locations', (TType.STRUCT,(Location, Location.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'hist_apps', (TType.STRUCT,(App, App.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'hist_devices', (TType.STRUCT,(Device, Device.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'hist_useragents', (TType.STRING,None), None, ), # 4
    (5, TType.MAP, 'rt_labels', (TType.I32,None,TType.LIST,(TType.STRUCT,(LabelInfo, LabelInfo.thrift_spec))), None, ), # 5
    (6, TType.MAP, 'hist_labels', (TType.I32,None,TType.LIST,(TType.STRUCT,(LabelInfo, LabelInfo.thrift_spec))), None, ), # 6
    (7, TType.I32, 'user_value', None, None, ), # 7
    (8, TType.I32, 'gender', None, None, ), # 8
    (9, TType.I16, 'age', None, None, ), # 9
    (10, TType.I32, 'income', None, None, ), # 10
    (11, TType.I32, 'education', None, None, ), # 11
    (12, TType.LIST, 'click_items', (TType.STRUCT,(ClickItemInfo, ClickItemInfo.thrift_spec)), None, ), # 12
    (13, TType.STRUCT, 'rt_location', (Location, Location.thrift_spec), None, ), # 13
    (14, TType.MAP, 'rt_profile_version', (TType.I32,None,TType.I16,None), None, ), # 14
    (15, TType.MAP, 'hist_profile_version', (TType.I32,None,TType.I16,None), None, ), # 15
    (16, TType.MAP, 'unlike_reason', (TType.I32,None,TType.LIST,(TType.STRUCT,(UnlikeItem, UnlikeItem.thrift_spec))), None, ), # 16
    (17, TType.LIST, 'unlike_docids', (TType.STRING,None), None, ), # 17
    (18, TType.STRUCT, 'user_set_location', (Location, Location.thrift_spec), None, ), # 18
    (19, TType.STRUCT, 'occupation_info', (OccupationInfo, OccupationInfo.thrift_spec), None, ), # 19
    (20, TType.STRUCT, 'orgnization_info', (OrgnizationInfo, OrgnizationInfo.thrift_spec), None, ), # 20
  )

  def __init__(self, hist_locations=None, hist_apps=None, hist_devices=None, hist_useragents=None, rt_labels=None, hist_labels=None, user_value=None, gender=None, age=None, income=None, education=None, click_items=None, rt_location=None, rt_profile_version=None, hist_profile_version=None, unlike_reason=None, unlike_docids=None, user_set_location=None, occupation_info=None, orgnization_info=None,):
    self.hist_locations = hist_locations
    self.hist_apps = hist_apps
    self.hist_devices = hist_devices
    self.hist_useragents = hist_useragents
    self.rt_labels = rt_labels
    self.hist_labels = hist_labels
    self.user_value = user_value
    self.gender = gender
    self.age = age
    self.income = income
    self.education = education
    self.click_items = click_items
    self.rt_location = rt_location
    self.rt_profile_version = rt_profile_version
    self.hist_profile_version = hist_profile_version
    self.unlike_reason = unlike_reason
    self.unlike_docids = unlike_docids
    self.user_set_location = user_set_location
    self.occupation_info = occupation_info
    self.orgnization_info = orgnization_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.hist_locations = []
          (_etype125, _size122) = iprot.readListBegin()
          for _i126 in xrange(_size122):
            _elem127 = Location()
            _elem127.read(iprot)
            self.hist_locations.append(_elem127)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.hist_apps = []
          (_etype131, _size128) = iprot.readListBegin()
          for _i132 in xrange(_size128):
            _elem133 = App()
            _elem133.read(iprot)
            self.hist_apps.append(_elem133)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.hist_devices = []
          (_etype137, _size134) = iprot.readListBegin()
          for _i138 in xrange(_size134):
            _elem139 = Device()
            _elem139.read(iprot)
            self.hist_devices.append(_elem139)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.hist_useragents = []
          (_etype143, _size140) = iprot.readListBegin()
          for _i144 in xrange(_size140):
            _elem145 = iprot.readString();
            self.hist_useragents.append(_elem145)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.rt_labels = {}
          (_ktype147, _vtype148, _size146 ) = iprot.readMapBegin()
          for _i150 in xrange(_size146):
            _key151 = iprot.readI32();
            _val152 = []
            (_etype156, _size153) = iprot.readListBegin()
            for _i157 in xrange(_size153):
              _elem158 = LabelInfo()
              _elem158.read(iprot)
              _val152.append(_elem158)
            iprot.readListEnd()
            self.rt_labels[_key151] = _val152
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.hist_labels = {}
          (_ktype160, _vtype161, _size159 ) = iprot.readMapBegin()
          for _i163 in xrange(_size159):
            _key164 = iprot.readI32();
            _val165 = []
            (_etype169, _size166) = iprot.readListBegin()
            for _i170 in xrange(_size166):
              _elem171 = LabelInfo()
              _elem171.read(iprot)
              _val165.append(_elem171)
            iprot.readListEnd()
            self.hist_labels[_key164] = _val165
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.user_value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.gender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.age = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.income = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.education = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.click_items = []
          (_etype175, _size172) = iprot.readListBegin()
          for _i176 in xrange(_size172):
            _elem177 = ClickItemInfo()
            _elem177.read(iprot)
            self.click_items.append(_elem177)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.rt_location = Location()
          self.rt_location.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.MAP:
          self.rt_profile_version = {}
          (_ktype179, _vtype180, _size178 ) = iprot.readMapBegin()
          for _i182 in xrange(_size178):
            _key183 = iprot.readI32();
            _val184 = iprot.readI16();
            self.rt_profile_version[_key183] = _val184
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.MAP:
          self.hist_profile_version = {}
          (_ktype186, _vtype187, _size185 ) = iprot.readMapBegin()
          for _i189 in xrange(_size185):
            _key190 = iprot.readI32();
            _val191 = iprot.readI16();
            self.hist_profile_version[_key190] = _val191
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.MAP:
          self.unlike_reason = {}
          (_ktype193, _vtype194, _size192 ) = iprot.readMapBegin()
          for _i196 in xrange(_size192):
            _key197 = iprot.readI32();
            _val198 = []
            (_etype202, _size199) = iprot.readListBegin()
            for _i203 in xrange(_size199):
              _elem204 = UnlikeItem()
              _elem204.read(iprot)
              _val198.append(_elem204)
            iprot.readListEnd()
            self.unlike_reason[_key197] = _val198
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.LIST:
          self.unlike_docids = []
          (_etype208, _size205) = iprot.readListBegin()
          for _i209 in xrange(_size205):
            _elem210 = iprot.readString();
            self.unlike_docids.append(_elem210)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRUCT:
          self.user_set_location = Location()
          self.user_set_location.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRUCT:
          self.occupation_info = OccupationInfo()
          self.occupation_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.orgnization_info = OrgnizationInfo()
          self.orgnization_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfile')
    if self.hist_locations is not None:
      oprot.writeFieldBegin('hist_locations', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.hist_locations))
      for iter211 in self.hist_locations:
        iter211.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hist_apps is not None:
      oprot.writeFieldBegin('hist_apps', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.hist_apps))
      for iter212 in self.hist_apps:
        iter212.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hist_devices is not None:
      oprot.writeFieldBegin('hist_devices', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.hist_devices))
      for iter213 in self.hist_devices:
        iter213.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hist_useragents is not None:
      oprot.writeFieldBegin('hist_useragents', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.hist_useragents))
      for iter214 in self.hist_useragents:
        oprot.writeString(iter214)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rt_labels is not None:
      oprot.writeFieldBegin('rt_labels', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.rt_labels))
      for kiter215,viter216 in self.rt_labels.items():
        oprot.writeI32(kiter215)
        oprot.writeListBegin(TType.STRUCT, len(viter216))
        for iter217 in viter216:
          iter217.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.hist_labels is not None:
      oprot.writeFieldBegin('hist_labels', TType.MAP, 6)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.hist_labels))
      for kiter218,viter219 in self.hist_labels.items():
        oprot.writeI32(kiter218)
        oprot.writeListBegin(TType.STRUCT, len(viter219))
        for iter220 in viter219:
          iter220.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.user_value is not None:
      oprot.writeFieldBegin('user_value', TType.I32, 7)
      oprot.writeI32(self.user_value)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I32, 8)
      oprot.writeI32(self.gender)
      oprot.writeFieldEnd()
    if self.age is not None:
      oprot.writeFieldBegin('age', TType.I16, 9)
      oprot.writeI16(self.age)
      oprot.writeFieldEnd()
    if self.income is not None:
      oprot.writeFieldBegin('income', TType.I32, 10)
      oprot.writeI32(self.income)
      oprot.writeFieldEnd()
    if self.education is not None:
      oprot.writeFieldBegin('education', TType.I32, 11)
      oprot.writeI32(self.education)
      oprot.writeFieldEnd()
    if self.click_items is not None:
      oprot.writeFieldBegin('click_items', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.click_items))
      for iter221 in self.click_items:
        iter221.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rt_location is not None:
      oprot.writeFieldBegin('rt_location', TType.STRUCT, 13)
      self.rt_location.write(oprot)
      oprot.writeFieldEnd()
    if self.rt_profile_version is not None:
      oprot.writeFieldBegin('rt_profile_version', TType.MAP, 14)
      oprot.writeMapBegin(TType.I32, TType.I16, len(self.rt_profile_version))
      for kiter222,viter223 in self.rt_profile_version.items():
        oprot.writeI32(kiter222)
        oprot.writeI16(viter223)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.hist_profile_version is not None:
      oprot.writeFieldBegin('hist_profile_version', TType.MAP, 15)
      oprot.writeMapBegin(TType.I32, TType.I16, len(self.hist_profile_version))
      for kiter224,viter225 in self.hist_profile_version.items():
        oprot.writeI32(kiter224)
        oprot.writeI16(viter225)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.unlike_reason is not None:
      oprot.writeFieldBegin('unlike_reason', TType.MAP, 16)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.unlike_reason))
      for kiter226,viter227 in self.unlike_reason.items():
        oprot.writeI32(kiter226)
        oprot.writeListBegin(TType.STRUCT, len(viter227))
        for iter228 in viter227:
          iter228.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.unlike_docids is not None:
      oprot.writeFieldBegin('unlike_docids', TType.LIST, 17)
      oprot.writeListBegin(TType.STRING, len(self.unlike_docids))
      for iter229 in self.unlike_docids:
        oprot.writeString(iter229)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.user_set_location is not None:
      oprot.writeFieldBegin('user_set_location', TType.STRUCT, 18)
      self.user_set_location.write(oprot)
      oprot.writeFieldEnd()
    if self.occupation_info is not None:
      oprot.writeFieldBegin('occupation_info', TType.STRUCT, 19)
      self.occupation_info.write(oprot)
      oprot.writeFieldEnd()
    if self.orgnization_info is not None:
      oprot.writeFieldBegin('orgnization_info', TType.STRUCT, 20)
      self.orgnization_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageProfile:
  """
  Attributes:
   - labels
   - location
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'labels', (TType.I32,None,TType.LIST,(TType.STRUCT,(LabelInfo, LabelInfo.thrift_spec))), None, ), # 1
    (2, TType.STRUCT, 'location', (Location, Location.thrift_spec), None, ), # 2
  )

  def __init__(self, labels=None, location=None,):
    self.labels = labels
    self.location = location

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.labels = {}
          (_ktype231, _vtype232, _size230 ) = iprot.readMapBegin()
          for _i234 in xrange(_size230):
            _key235 = iprot.readI32();
            _val236 = []
            (_etype240, _size237) = iprot.readListBegin()
            for _i241 in xrange(_size237):
              _elem242 = LabelInfo()
              _elem242.read(iprot)
              _val236.append(_elem242)
            iprot.readListEnd()
            self.labels[_key235] = _val236
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.location = Location()
          self.location.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageProfile')
    if self.labels is not None:
      oprot.writeFieldBegin('labels', TType.MAP, 1)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.labels))
      for kiter243,viter244 in self.labels.items():
        oprot.writeI32(kiter243)
        oprot.writeListBegin(TType.STRUCT, len(viter244))
        for iter245 in viter244:
          iter245.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRUCT, 2)
      self.location.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AbTest:
  """
  Attributes:
   - exp_id
   - exp_name
   - numbers
   - diversion
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'exp_id', None, None, ), # 1
    (2, TType.STRING, 'exp_name', None, None, ), # 2
    (3, TType.LIST, 'numbers', (TType.STRING,None), None, ), # 3
    (4, TType.I32, 'diversion', None, None, ), # 4
  )

  def __init__(self, exp_id=None, exp_name=None, numbers=None, diversion=None,):
    self.exp_id = exp_id
    self.exp_name = exp_name
    self.numbers = numbers
    self.diversion = diversion

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.exp_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.exp_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.numbers = []
          (_etype249, _size246) = iprot.readListBegin()
          for _i250 in xrange(_size246):
            _elem251 = iprot.readString();
            self.numbers.append(_elem251)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.diversion = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AbTest')
    if self.exp_id is not None:
      oprot.writeFieldBegin('exp_id', TType.I32, 1)
      oprot.writeI32(self.exp_id)
      oprot.writeFieldEnd()
    if self.exp_name is not None:
      oprot.writeFieldBegin('exp_name', TType.STRING, 2)
      oprot.writeString(self.exp_name)
      oprot.writeFieldEnd()
    if self.numbers is not None:
      oprot.writeFieldBegin('numbers', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.numbers))
      for iter252 in self.numbers:
        oprot.writeString(iter252)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.diversion is not None:
      oprot.writeFieldBegin('diversion', TType.I32, 4)
      oprot.writeI32(self.diversion)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.exp_id is None:
      raise TProtocol.TProtocolException(message='Required field exp_id is unset!')
    if self.exp_name is None:
      raise TProtocol.TProtocolException(message='Required field exp_name is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AbTestProfile:
  """
  Attributes:
   - abtests
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'abtests', (TType.I32,None,TType.LIST,(TType.STRUCT,(AbTest, AbTest.thrift_spec))), None, ), # 1
  )

  def __init__(self, abtests=None,):
    self.abtests = abtests

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.abtests = {}
          (_ktype254, _vtype255, _size253 ) = iprot.readMapBegin()
          for _i257 in xrange(_size253):
            _key258 = iprot.readI32();
            _val259 = []
            (_etype263, _size260) = iprot.readListBegin()
            for _i264 in xrange(_size260):
              _elem265 = AbTest()
              _elem265.read(iprot)
              _val259.append(_elem265)
            iprot.readListEnd()
            self.abtests[_key258] = _val259
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AbTestProfile')
    if self.abtests is not None:
      oprot.writeFieldBegin('abtests', TType.MAP, 1)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.abtests))
      for kiter266,viter267 in self.abtests.items():
        oprot.writeI32(kiter266)
        oprot.writeListBegin(TType.STRUCT, len(viter267))
        for iter268 in viter267:
          iter268.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UIRequest:
  """
  Attributes:
   - search_type
   - sid
   - req_num
   - user_request
   - page_request
   - timestamp
   - session_id
   - abtest_profile
   - channel_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'search_type', None, None, ), # 1
    (2, TType.STRING, 'sid', None, None, ), # 2
    (3, TType.I32, 'req_num', None, None, ), # 3
    (4, TType.STRUCT, 'user_request', (UserRequest, UserRequest.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'page_request', (PageRequest, PageRequest.thrift_spec), None, ), # 5
    (6, TType.I64, 'timestamp', None, None, ), # 6
    (7, TType.STRING, 'session_id', None, None, ), # 7
    (8, TType.STRUCT, 'abtest_profile', (AbTestProfile, AbTestProfile.thrift_spec), None, ), # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    None, # 130
    None, # 131
    None, # 132
    None, # 133
    None, # 134
    None, # 135
    None, # 136
    None, # 137
    None, # 138
    None, # 139
    None, # 140
    None, # 141
    None, # 142
    None, # 143
    None, # 144
    None, # 145
    None, # 146
    None, # 147
    None, # 148
    None, # 149
    None, # 150
    None, # 151
    None, # 152
    None, # 153
    None, # 154
    None, # 155
    None, # 156
    None, # 157
    None, # 158
    None, # 159
    None, # 160
    None, # 161
    None, # 162
    None, # 163
    None, # 164
    None, # 165
    None, # 166
    None, # 167
    None, # 168
    None, # 169
    None, # 170
    None, # 171
    None, # 172
    None, # 173
    None, # 174
    None, # 175
    None, # 176
    None, # 177
    None, # 178
    None, # 179
    None, # 180
    None, # 181
    None, # 182
    None, # 183
    None, # 184
    None, # 185
    None, # 186
    None, # 187
    None, # 188
    None, # 189
    None, # 190
    None, # 191
    None, # 192
    None, # 193
    None, # 194
    None, # 195
    None, # 196
    None, # 197
    None, # 198
    None, # 199
    None, # 200
    None, # 201
    None, # 202
    None, # 203
    None, # 204
    None, # 205
    None, # 206
    None, # 207
    None, # 208
    None, # 209
    None, # 210
    None, # 211
    None, # 212
    None, # 213
    None, # 214
    None, # 215
    None, # 216
    None, # 217
    None, # 218
    None, # 219
    None, # 220
    None, # 221
    None, # 222
    None, # 223
    None, # 224
    None, # 225
    None, # 226
    None, # 227
    None, # 228
    None, # 229
    None, # 230
    None, # 231
    None, # 232
    None, # 233
    None, # 234
    None, # 235
    None, # 236
    None, # 237
    None, # 238
    None, # 239
    None, # 240
    None, # 241
    None, # 242
    None, # 243
    None, # 244
    None, # 245
    None, # 246
    None, # 247
    None, # 248
    None, # 249
    None, # 250
    None, # 251
    None, # 252
    None, # 253
    None, # 254
    None, # 255
    None, # 256
    None, # 257
    None, # 258
    None, # 259
    None, # 260
    None, # 261
    None, # 262
    None, # 263
    None, # 264
    None, # 265
    None, # 266
    None, # 267
    None, # 268
    None, # 269
    None, # 270
    None, # 271
    None, # 272
    None, # 273
    None, # 274
    None, # 275
    None, # 276
    None, # 277
    None, # 278
    None, # 279
    None, # 280
    None, # 281
    None, # 282
    None, # 283
    None, # 284
    None, # 285
    None, # 286
    None, # 287
    None, # 288
    None, # 289
    None, # 290
    None, # 291
    None, # 292
    None, # 293
    None, # 294
    None, # 295
    None, # 296
    None, # 297
    None, # 298
    None, # 299
    None, # 300
    None, # 301
    None, # 302
    None, # 303
    None, # 304
    None, # 305
    None, # 306
    None, # 307
    None, # 308
    None, # 309
    None, # 310
    None, # 311
    None, # 312
    None, # 313
    None, # 314
    None, # 315
    None, # 316
    None, # 317
    None, # 318
    None, # 319
    None, # 320
    None, # 321
    None, # 322
    None, # 323
    None, # 324
    None, # 325
    None, # 326
    None, # 327
    None, # 328
    None, # 329
    None, # 330
    None, # 331
    None, # 332
    None, # 333
    None, # 334
    None, # 335
    None, # 336
    None, # 337
    None, # 338
    None, # 339
    None, # 340
    None, # 341
    None, # 342
    None, # 343
    None, # 344
    None, # 345
    None, # 346
    None, # 347
    None, # 348
    None, # 349
    None, # 350
    None, # 351
    None, # 352
    None, # 353
    None, # 354
    None, # 355
    None, # 356
    None, # 357
    None, # 358
    None, # 359
    None, # 360
    None, # 361
    None, # 362
    None, # 363
    None, # 364
    None, # 365
    None, # 366
    None, # 367
    None, # 368
    None, # 369
    None, # 370
    None, # 371
    None, # 372
    None, # 373
    None, # 374
    None, # 375
    None, # 376
    None, # 377
    None, # 378
    None, # 379
    None, # 380
    None, # 381
    None, # 382
    None, # 383
    None, # 384
    None, # 385
    None, # 386
    None, # 387
    None, # 388
    None, # 389
    None, # 390
    None, # 391
    None, # 392
    None, # 393
    None, # 394
    None, # 395
    None, # 396
    None, # 397
    None, # 398
    None, # 399
    None, # 400
    None, # 401
    None, # 402
    None, # 403
    None, # 404
    None, # 405
    None, # 406
    None, # 407
    None, # 408
    None, # 409
    None, # 410
    None, # 411
    None, # 412
    None, # 413
    None, # 414
    None, # 415
    None, # 416
    None, # 417
    None, # 418
    None, # 419
    None, # 420
    None, # 421
    None, # 422
    None, # 423
    None, # 424
    None, # 425
    None, # 426
    None, # 427
    None, # 428
    None, # 429
    None, # 430
    None, # 431
    None, # 432
    None, # 433
    None, # 434
    None, # 435
    None, # 436
    None, # 437
    None, # 438
    None, # 439
    None, # 440
    None, # 441
    None, # 442
    None, # 443
    None, # 444
    None, # 445
    None, # 446
    None, # 447
    None, # 448
    None, # 449
    None, # 450
    None, # 451
    None, # 452
    None, # 453
    None, # 454
    None, # 455
    None, # 456
    None, # 457
    None, # 458
    None, # 459
    None, # 460
    None, # 461
    None, # 462
    None, # 463
    None, # 464
    None, # 465
    None, # 466
    None, # 467
    None, # 468
    None, # 469
    None, # 470
    None, # 471
    None, # 472
    None, # 473
    None, # 474
    None, # 475
    None, # 476
    None, # 477
    None, # 478
    None, # 479
    None, # 480
    None, # 481
    None, # 482
    None, # 483
    None, # 484
    None, # 485
    None, # 486
    None, # 487
    None, # 488
    None, # 489
    None, # 490
    None, # 491
    None, # 492
    None, # 493
    None, # 494
    None, # 495
    None, # 496
    None, # 497
    None, # 498
    None, # 499
    None, # 500
    None, # 501
    None, # 502
    None, # 503
    None, # 504
    None, # 505
    None, # 506
    None, # 507
    None, # 508
    None, # 509
    None, # 510
    None, # 511
    None, # 512
    None, # 513
    None, # 514
    None, # 515
    None, # 516
    None, # 517
    None, # 518
    None, # 519
    None, # 520
    None, # 521
    None, # 522
    None, # 523
    None, # 524
    None, # 525
    None, # 526
    None, # 527
    None, # 528
    None, # 529
    None, # 530
    None, # 531
    None, # 532
    None, # 533
    None, # 534
    None, # 535
    None, # 536
    None, # 537
    None, # 538
    None, # 539
    None, # 540
    None, # 541
    None, # 542
    None, # 543
    None, # 544
    None, # 545
    None, # 546
    None, # 547
    None, # 548
    None, # 549
    None, # 550
    None, # 551
    None, # 552
    None, # 553
    None, # 554
    None, # 555
    None, # 556
    None, # 557
    None, # 558
    None, # 559
    None, # 560
    None, # 561
    None, # 562
    None, # 563
    None, # 564
    None, # 565
    None, # 566
    None, # 567
    None, # 568
    None, # 569
    None, # 570
    None, # 571
    None, # 572
    None, # 573
    None, # 574
    None, # 575
    None, # 576
    None, # 577
    None, # 578
    None, # 579
    None, # 580
    None, # 581
    None, # 582
    None, # 583
    None, # 584
    None, # 585
    None, # 586
    None, # 587
    None, # 588
    None, # 589
    None, # 590
    None, # 591
    None, # 592
    None, # 593
    None, # 594
    None, # 595
    None, # 596
    None, # 597
    None, # 598
    None, # 599
    None, # 600
    None, # 601
    None, # 602
    None, # 603
    None, # 604
    None, # 605
    None, # 606
    None, # 607
    None, # 608
    None, # 609
    None, # 610
    None, # 611
    None, # 612
    None, # 613
    None, # 614
    None, # 615
    None, # 616
    None, # 617
    None, # 618
    None, # 619
    None, # 620
    None, # 621
    None, # 622
    None, # 623
    None, # 624
    None, # 625
    None, # 626
    None, # 627
    None, # 628
    None, # 629
    None, # 630
    None, # 631
    None, # 632
    None, # 633
    None, # 634
    None, # 635
    None, # 636
    None, # 637
    None, # 638
    None, # 639
    None, # 640
    None, # 641
    None, # 642
    None, # 643
    None, # 644
    None, # 645
    None, # 646
    None, # 647
    None, # 648
    None, # 649
    None, # 650
    None, # 651
    None, # 652
    None, # 653
    None, # 654
    None, # 655
    None, # 656
    None, # 657
    None, # 658
    None, # 659
    None, # 660
    None, # 661
    None, # 662
    None, # 663
    None, # 664
    None, # 665
    None, # 666
    None, # 667
    None, # 668
    None, # 669
    None, # 670
    None, # 671
    None, # 672
    None, # 673
    None, # 674
    None, # 675
    None, # 676
    None, # 677
    None, # 678
    None, # 679
    None, # 680
    None, # 681
    None, # 682
    None, # 683
    None, # 684
    None, # 685
    None, # 686
    None, # 687
    None, # 688
    None, # 689
    None, # 690
    None, # 691
    None, # 692
    None, # 693
    None, # 694
    None, # 695
    None, # 696
    None, # 697
    None, # 698
    None, # 699
    None, # 700
    None, # 701
    None, # 702
    None, # 703
    None, # 704
    None, # 705
    None, # 706
    None, # 707
    None, # 708
    None, # 709
    None, # 710
    None, # 711
    None, # 712
    None, # 713
    None, # 714
    None, # 715
    None, # 716
    None, # 717
    None, # 718
    None, # 719
    None, # 720
    None, # 721
    None, # 722
    None, # 723
    None, # 724
    None, # 725
    None, # 726
    None, # 727
    None, # 728
    None, # 729
    None, # 730
    None, # 731
    None, # 732
    None, # 733
    None, # 734
    None, # 735
    None, # 736
    None, # 737
    None, # 738
    None, # 739
    None, # 740
    None, # 741
    None, # 742
    None, # 743
    None, # 744
    None, # 745
    None, # 746
    None, # 747
    None, # 748
    None, # 749
    None, # 750
    None, # 751
    None, # 752
    None, # 753
    None, # 754
    None, # 755
    None, # 756
    None, # 757
    None, # 758
    None, # 759
    None, # 760
    None, # 761
    None, # 762
    None, # 763
    None, # 764
    None, # 765
    None, # 766
    None, # 767
    None, # 768
    None, # 769
    None, # 770
    None, # 771
    None, # 772
    None, # 773
    None, # 774
    None, # 775
    None, # 776
    None, # 777
    None, # 778
    None, # 779
    None, # 780
    None, # 781
    None, # 782
    None, # 783
    None, # 784
    None, # 785
    None, # 786
    None, # 787
    None, # 788
    None, # 789
    None, # 790
    None, # 791
    None, # 792
    None, # 793
    None, # 794
    None, # 795
    None, # 796
    None, # 797
    None, # 798
    None, # 799
    None, # 800
    None, # 801
    None, # 802
    None, # 803
    None, # 804
    None, # 805
    None, # 806
    None, # 807
    None, # 808
    None, # 809
    None, # 810
    None, # 811
    None, # 812
    None, # 813
    None, # 814
    None, # 815
    None, # 816
    None, # 817
    None, # 818
    None, # 819
    None, # 820
    None, # 821
    None, # 822
    None, # 823
    None, # 824
    None, # 825
    None, # 826
    None, # 827
    None, # 828
    None, # 829
    None, # 830
    None, # 831
    None, # 832
    None, # 833
    None, # 834
    None, # 835
    None, # 836
    None, # 837
    None, # 838
    None, # 839
    None, # 840
    None, # 841
    None, # 842
    None, # 843
    None, # 844
    None, # 845
    None, # 846
    None, # 847
    None, # 848
    None, # 849
    None, # 850
    None, # 851
    None, # 852
    None, # 853
    None, # 854
    None, # 855
    None, # 856
    None, # 857
    None, # 858
    None, # 859
    None, # 860
    None, # 861
    None, # 862
    None, # 863
    None, # 864
    None, # 865
    None, # 866
    None, # 867
    None, # 868
    None, # 869
    None, # 870
    None, # 871
    None, # 872
    None, # 873
    None, # 874
    None, # 875
    None, # 876
    None, # 877
    None, # 878
    None, # 879
    None, # 880
    None, # 881
    None, # 882
    None, # 883
    None, # 884
    None, # 885
    None, # 886
    None, # 887
    None, # 888
    None, # 889
    None, # 890
    None, # 891
    None, # 892
    None, # 893
    None, # 894
    None, # 895
    None, # 896
    None, # 897
    None, # 898
    None, # 899
    None, # 900
    None, # 901
    None, # 902
    None, # 903
    None, # 904
    None, # 905
    None, # 906
    None, # 907
    None, # 908
    None, # 909
    None, # 910
    None, # 911
    None, # 912
    None, # 913
    None, # 914
    None, # 915
    None, # 916
    None, # 917
    None, # 918
    None, # 919
    None, # 920
    None, # 921
    None, # 922
    None, # 923
    None, # 924
    None, # 925
    None, # 926
    None, # 927
    None, # 928
    None, # 929
    None, # 930
    None, # 931
    None, # 932
    None, # 933
    None, # 934
    None, # 935
    None, # 936
    None, # 937
    None, # 938
    None, # 939
    None, # 940
    None, # 941
    None, # 942
    None, # 943
    None, # 944
    None, # 945
    None, # 946
    None, # 947
    None, # 948
    None, # 949
    None, # 950
    None, # 951
    None, # 952
    None, # 953
    None, # 954
    None, # 955
    None, # 956
    None, # 957
    None, # 958
    None, # 959
    None, # 960
    None, # 961
    None, # 962
    None, # 963
    None, # 964
    None, # 965
    None, # 966
    None, # 967
    None, # 968
    None, # 969
    None, # 970
    None, # 971
    None, # 972
    None, # 973
    None, # 974
    None, # 975
    None, # 976
    None, # 977
    None, # 978
    None, # 979
    None, # 980
    None, # 981
    None, # 982
    None, # 983
    None, # 984
    None, # 985
    None, # 986
    None, # 987
    None, # 988
    None, # 989
    None, # 990
    None, # 991
    None, # 992
    None, # 993
    None, # 994
    None, # 995
    None, # 996
    None, # 997
    None, # 998
    None, # 999
    (1000, TType.I32, 'channel_type', None, None, ), # 1000
  )

  def __init__(self, search_type=None, sid=None, req_num=None, user_request=None, page_request=None, timestamp=None, session_id=None, abtest_profile=None, channel_type=None,):
    self.search_type = search_type
    self.sid = sid
    self.req_num = req_num
    self.user_request = user_request
    self.page_request = page_request
    self.timestamp = timestamp
    self.session_id = session_id
    self.abtest_profile = abtest_profile
    self.channel_type = channel_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.search_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.req_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.user_request = UserRequest()
          self.user_request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.page_request = PageRequest()
          self.page_request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.session_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.abtest_profile = AbTestProfile()
          self.abtest_profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1000:
        if ftype == TType.I32:
          self.channel_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UIRequest')
    if self.search_type is not None:
      oprot.writeFieldBegin('search_type', TType.I32, 1)
      oprot.writeI32(self.search_type)
      oprot.writeFieldEnd()
    if self.sid is not None:
      oprot.writeFieldBegin('sid', TType.STRING, 2)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.req_num is not None:
      oprot.writeFieldBegin('req_num', TType.I32, 3)
      oprot.writeI32(self.req_num)
      oprot.writeFieldEnd()
    if self.user_request is not None:
      oprot.writeFieldBegin('user_request', TType.STRUCT, 4)
      self.user_request.write(oprot)
      oprot.writeFieldEnd()
    if self.page_request is not None:
      oprot.writeFieldBegin('page_request', TType.STRUCT, 5)
      self.page_request.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 6)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.session_id is not None:
      oprot.writeFieldBegin('session_id', TType.STRING, 7)
      oprot.writeString(self.session_id)
      oprot.writeFieldEnd()
    if self.abtest_profile is not None:
      oprot.writeFieldBegin('abtest_profile', TType.STRUCT, 8)
      self.abtest_profile.write(oprot)
      oprot.writeFieldEnd()
    if self.channel_type is not None:
      oprot.writeFieldBegin('channel_type', TType.I32, 1000)
      oprot.writeI32(self.channel_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfileServiceRequest:
  """
  Attributes:
   - sid
   - user_request
   - page_request
   - search_type
   - ui_request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRUCT, 'user_request', (UserRequest, UserRequest.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'page_request', (PageRequest, PageRequest.thrift_spec), None, ), # 3
    (4, TType.I32, 'search_type', None, None, ), # 4
    (5, TType.STRUCT, 'ui_request', (UIRequest, UIRequest.thrift_spec), None, ), # 5
  )

  def __init__(self, sid=None, user_request=None, page_request=None, search_type=None, ui_request=None,):
    self.sid = sid
    self.user_request = user_request
    self.page_request = page_request
    self.search_type = search_type
    self.ui_request = ui_request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.user_request = UserRequest()
          self.user_request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.page_request = PageRequest()
          self.page_request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.search_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.ui_request = UIRequest()
          self.ui_request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfileServiceRequest')
    if self.sid is not None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.user_request is not None:
      oprot.writeFieldBegin('user_request', TType.STRUCT, 2)
      self.user_request.write(oprot)
      oprot.writeFieldEnd()
    if self.page_request is not None:
      oprot.writeFieldBegin('page_request', TType.STRUCT, 3)
      self.page_request.write(oprot)
      oprot.writeFieldEnd()
    if self.search_type is not None:
      oprot.writeFieldBegin('search_type', TType.I32, 4)
      oprot.writeI32(self.search_type)
      oprot.writeFieldEnd()
    if self.ui_request is not None:
      oprot.writeFieldBegin('ui_request', TType.STRUCT, 5)
      self.ui_request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfileServiceResponse:
  """
  Attributes:
   - err_code
   - msg
   - user_profile
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'err_code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
    (3, TType.STRUCT, 'user_profile', (UserProfile, UserProfile.thrift_spec), None, ), # 3
  )

  def __init__(self, err_code=None, msg=None, user_profile=None,):
    self.err_code = err_code
    self.msg = msg
    self.user_profile = user_profile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.err_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.user_profile = UserProfile()
          self.user_profile.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfileServiceResponse')
    if self.err_code is not None:
      oprot.writeFieldBegin('err_code', TType.I32, 1)
      oprot.writeI32(self.err_code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.user_profile is not None:
      oprot.writeFieldBegin('user_profile', TType.STRUCT, 3)
      self.user_profile.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageProfileServiceRequest:
  """
  Attributes:
   - sid
   - page_request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRUCT, 'page_request', (PageRequest, PageRequest.thrift_spec), None, ), # 2
  )

  def __init__(self, sid=None, page_request=None,):
    self.sid = sid
    self.page_request = page_request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.page_request = PageRequest()
          self.page_request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageProfileServiceRequest')
    if self.sid is not None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.page_request is not None:
      oprot.writeFieldBegin('page_request', TType.STRUCT, 2)
      self.page_request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageProfileServiceResponse:
  """
  Attributes:
   - err_code
   - msg
   - page_profile
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'err_code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
    (3, TType.STRUCT, 'page_profile', (PageProfile, PageProfile.thrift_spec), None, ), # 3
  )

  def __init__(self, err_code=None, msg=None, page_profile=None,):
    self.err_code = err_code
    self.msg = msg
    self.page_profile = page_profile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.err_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.page_profile = PageProfile()
          self.page_profile.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageProfileServiceResponse')
    if self.err_code is not None:
      oprot.writeFieldBegin('err_code', TType.I32, 1)
      oprot.writeI32(self.err_code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.page_profile is not None:
      oprot.writeFieldBegin('page_profile', TType.STRUCT, 3)
      self.page_profile.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageProfileIndexOperator:
  """
  Attributes:
   - op
   - item
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'op', None, None, ), # 1
    (2, TType.STRUCT, 'item', (ItemInfo, ItemInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, op=None, item=None,):
    self.op = op
    self.item = item

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.op = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.item = ItemInfo()
          self.item.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageProfileIndexOperator')
    if self.op is not None:
      oprot.writeFieldBegin('op', TType.I32, 1)
      oprot.writeI32(self.op)
      oprot.writeFieldEnd()
    if self.item is not None:
      oprot.writeFieldBegin('item', TType.STRUCT, 2)
      self.item.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageProfileOperatorIndexRequest:
  """
  Attributes:
   - sid
   - ops
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.LIST, 'ops', (TType.STRUCT,(PageProfileIndexOperator, PageProfileIndexOperator.thrift_spec)), None, ), # 2
  )

  def __init__(self, sid=None, ops=None,):
    self.sid = sid
    self.ops = ops

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.ops = []
          (_etype272, _size269) = iprot.readListBegin()
          for _i273 in xrange(_size269):
            _elem274 = PageProfileIndexOperator()
            _elem274.read(iprot)
            self.ops.append(_elem274)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageProfileOperatorIndexRequest')
    if self.sid is not None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.ops is not None:
      oprot.writeFieldBegin('ops', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.ops))
      for iter275 in self.ops:
        iter275.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SpecialInfo:
  """
  Attributes:
   - special_id
   - special_tip
   - special_logo
   - special_extra
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'special_id', None, None, ), # 1
    (2, TType.STRING, 'special_tip', None, None, ), # 2
    (3, TType.STRING, 'special_logo', None, None, ), # 3
    (4, TType.LIST, 'special_extra', (TType.STRUCT,(ItemInfo, ItemInfo.thrift_spec)), None, ), # 4
  )

  def __init__(self, special_id=None, special_tip=None, special_logo=None, special_extra=None,):
    self.special_id = special_id
    self.special_tip = special_tip
    self.special_logo = special_logo
    self.special_extra = special_extra

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.special_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.special_tip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.special_logo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.special_extra = []
          (_etype279, _size276) = iprot.readListBegin()
          for _i280 in xrange(_size276):
            _elem281 = ItemInfo()
            _elem281.read(iprot)
            self.special_extra.append(_elem281)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SpecialInfo')
    if self.special_id is not None:
      oprot.writeFieldBegin('special_id', TType.STRING, 1)
      oprot.writeString(self.special_id)
      oprot.writeFieldEnd()
    if self.special_tip is not None:
      oprot.writeFieldBegin('special_tip', TType.STRING, 2)
      oprot.writeString(self.special_tip)
      oprot.writeFieldEnd()
    if self.special_logo is not None:
      oprot.writeFieldBegin('special_logo', TType.STRING, 3)
      oprot.writeString(self.special_logo)
      oprot.writeFieldEnd()
    if self.special_extra is not None:
      oprot.writeFieldBegin('special_extra', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.special_extra))
      for iter282 in self.special_extra:
        iter282.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdInfo:
  """
  Attributes:
   - title
   - img_src
   - subtitle
   - tag
   - docid
   - url
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'title', None, None, ), # 1
    (2, TType.STRING, 'img_src', None, None, ), # 2
    (3, TType.STRING, 'subtitle', None, None, ), # 3
    (4, TType.I32, 'tag', None, None, ), # 4
    (5, TType.STRING, 'docid', None, None, ), # 5
    (6, TType.STRING, 'url', None, None, ), # 6
  )

  def __init__(self, title=None, img_src=None, subtitle=None, tag=None, docid=None, url=None,):
    self.title = title
    self.img_src = img_src
    self.subtitle = subtitle
    self.tag = tag
    self.docid = docid
    self.url = url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.img_src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.subtitle = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.tag = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.docid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdInfo')
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 1)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.img_src is not None:
      oprot.writeFieldBegin('img_src', TType.STRING, 2)
      oprot.writeString(self.img_src)
      oprot.writeFieldEnd()
    if self.subtitle is not None:
      oprot.writeFieldBegin('subtitle', TType.STRING, 3)
      oprot.writeString(self.subtitle)
      oprot.writeFieldEnd()
    if self.tag is not None:
      oprot.writeFieldBegin('tag', TType.I32, 4)
      oprot.writeI32(self.tag)
      oprot.writeFieldEnd()
    if self.docid is not None:
      oprot.writeFieldBegin('docid', TType.STRING, 5)
      oprot.writeString(self.docid)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 6)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeadDocInfo:
  """
  Attributes:
   - has_ad
   - has_head
   - ads
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_ad', None, None, ), # 1
    (2, TType.BOOL, 'has_head', None, None, ), # 2
    (3, TType.LIST, 'ads', (TType.STRUCT,(AdInfo, AdInfo.thrift_spec)), None, ), # 3
  )

  def __init__(self, has_ad=None, has_head=None, ads=None,):
    self.has_ad = has_ad
    self.has_head = has_head
    self.ads = ads

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_ad = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.has_head = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.ads = []
          (_etype286, _size283) = iprot.readListBegin()
          for _i287 in xrange(_size283):
            _elem288 = AdInfo()
            _elem288.read(iprot)
            self.ads.append(_elem288)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeadDocInfo')
    if self.has_ad is not None:
      oprot.writeFieldBegin('has_ad', TType.BOOL, 1)
      oprot.writeBool(self.has_ad)
      oprot.writeFieldEnd()
    if self.has_head is not None:
      oprot.writeFieldBegin('has_head', TType.BOOL, 2)
      oprot.writeBool(self.has_head)
      oprot.writeFieldEnd()
    if self.ads is not None:
      oprot.writeFieldBegin('ads', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.ads))
      for iter289 in self.ads:
        iter289.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RankItemInfo:
  """
  Attributes:
   - item_info
   - special_info
   - head_doc_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'item_info', (ItemInfo, ItemInfo.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'special_info', (SpecialInfo, SpecialInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'head_doc_info', (HeadDocInfo, HeadDocInfo.thrift_spec), None, ), # 3
  )

  def __init__(self, item_info=None, special_info=None, head_doc_info=None,):
    self.item_info = item_info
    self.special_info = special_info
    self.head_doc_info = head_doc_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.item_info = ItemInfo()
          self.item_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.special_info = SpecialInfo()
          self.special_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.head_doc_info = HeadDocInfo()
          self.head_doc_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RankItemInfo')
    if self.item_info is not None:
      oprot.writeFieldBegin('item_info', TType.STRUCT, 1)
      self.item_info.write(oprot)
      oprot.writeFieldEnd()
    if self.special_info is not None:
      oprot.writeFieldBegin('special_info', TType.STRUCT, 2)
      self.special_info.write(oprot)
      oprot.writeFieldEnd()
    if self.head_doc_info is not None:
      oprot.writeFieldBegin('head_doc_info', TType.STRUCT, 3)
      self.head_doc_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RankingServiceResponse:
  """
  Attributes:
   - err_code
   - msg
   - doc_list
   - total
   - appsearch_offset
   - last_click_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'err_code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
    (3, TType.LIST, 'doc_list', (TType.STRUCT,(RankItemInfo, RankItemInfo.thrift_spec)), None, ), # 3
    (4, TType.I32, 'total', None, None, ), # 4
    (5, TType.I32, 'appsearch_offset', None, None, ), # 5
    (6, TType.I64, 'last_click_time', None, None, ), # 6
  )

  def __init__(self, err_code=None, msg=None, doc_list=None, total=None, appsearch_offset=None, last_click_time=None,):
    self.err_code = err_code
    self.msg = msg
    self.doc_list = doc_list
    self.total = total
    self.appsearch_offset = appsearch_offset
    self.last_click_time = last_click_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.err_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.doc_list = []
          (_etype293, _size290) = iprot.readListBegin()
          for _i294 in xrange(_size290):
            _elem295 = RankItemInfo()
            _elem295.read(iprot)
            self.doc_list.append(_elem295)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.appsearch_offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.last_click_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RankingServiceResponse')
    if self.err_code is not None:
      oprot.writeFieldBegin('err_code', TType.I32, 1)
      oprot.writeI32(self.err_code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.doc_list is not None:
      oprot.writeFieldBegin('doc_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.doc_list))
      for iter296 in self.doc_list:
        iter296.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 4)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.appsearch_offset is not None:
      oprot.writeFieldBegin('appsearch_offset', TType.I32, 5)
      oprot.writeI32(self.appsearch_offset)
      oprot.writeFieldEnd()
    if self.last_click_time is not None:
      oprot.writeFieldBegin('last_click_time', TType.I64, 6)
      oprot.writeI64(self.last_click_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RetrievalServiceRequest:
  """
  Attributes:
   - ui_request
   - min_recall_num
   - max_recall_num
   - label_infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ui_request', (UIRequest, UIRequest.thrift_spec), None, ), # 1
    (2, TType.I32, 'min_recall_num', None, None, ), # 2
    (3, TType.I32, 'max_recall_num', None, None, ), # 3
    (4, TType.MAP, 'label_infos', (TType.I32,None,TType.LIST,(TType.STRUCT,(LabelInfo, LabelInfo.thrift_spec))), None, ), # 4
  )

  def __init__(self, ui_request=None, min_recall_num=None, max_recall_num=None, label_infos=None,):
    self.ui_request = ui_request
    self.min_recall_num = min_recall_num
    self.max_recall_num = max_recall_num
    self.label_infos = label_infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ui_request = UIRequest()
          self.ui_request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.min_recall_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.max_recall_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.label_infos = {}
          (_ktype298, _vtype299, _size297 ) = iprot.readMapBegin()
          for _i301 in xrange(_size297):
            _key302 = iprot.readI32();
            _val303 = []
            (_etype307, _size304) = iprot.readListBegin()
            for _i308 in xrange(_size304):
              _elem309 = LabelInfo()
              _elem309.read(iprot)
              _val303.append(_elem309)
            iprot.readListEnd()
            self.label_infos[_key302] = _val303
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RetrievalServiceRequest')
    if self.ui_request is not None:
      oprot.writeFieldBegin('ui_request', TType.STRUCT, 1)
      self.ui_request.write(oprot)
      oprot.writeFieldEnd()
    if self.min_recall_num is not None:
      oprot.writeFieldBegin('min_recall_num', TType.I32, 2)
      oprot.writeI32(self.min_recall_num)
      oprot.writeFieldEnd()
    if self.max_recall_num is not None:
      oprot.writeFieldBegin('max_recall_num', TType.I32, 3)
      oprot.writeI32(self.max_recall_num)
      oprot.writeFieldEnd()
    if self.label_infos is not None:
      oprot.writeFieldBegin('label_infos', TType.MAP, 4)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.label_infos))
      for kiter310,viter311 in self.label_infos.items():
        oprot.writeI32(kiter310)
        oprot.writeListBegin(TType.STRUCT, len(viter311))
        for iter312 in viter311:
          iter312.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RetrievalServiceResponse:
  """
  Attributes:
   - err_code
   - msg
   - items
   - page_profile
   - user_profile
   - total
   - control_level
   - control_grade
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'err_code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
    (3, TType.LIST, 'items', (TType.STRUCT,(ItemInfo, ItemInfo.thrift_spec)), None, ), # 3
    (4, TType.STRUCT, 'page_profile', (PageProfile, PageProfile.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'user_profile', (UserProfile, UserProfile.thrift_spec), None, ), # 5
    (6, TType.I32, 'total', None, None, ), # 6
    (7, TType.I32, 'control_level', None, None, ), # 7
    (8, TType.I32, 'control_grade', None, None, ), # 8
  )

  def __init__(self, err_code=None, msg=None, items=None, page_profile=None, user_profile=None, total=None, control_level=None, control_grade=None,):
    self.err_code = err_code
    self.msg = msg
    self.items = items
    self.page_profile = page_profile
    self.user_profile = user_profile
    self.total = total
    self.control_level = control_level
    self.control_grade = control_grade

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.err_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.items = []
          (_etype316, _size313) = iprot.readListBegin()
          for _i317 in xrange(_size313):
            _elem318 = ItemInfo()
            _elem318.read(iprot)
            self.items.append(_elem318)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.page_profile = PageProfile()
          self.page_profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.user_profile = UserProfile()
          self.user_profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.control_level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.control_grade = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RetrievalServiceResponse')
    if self.err_code is not None:
      oprot.writeFieldBegin('err_code', TType.I32, 1)
      oprot.writeI32(self.err_code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.items is not None:
      oprot.writeFieldBegin('items', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.items))
      for iter319 in self.items:
        iter319.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.page_profile is not None:
      oprot.writeFieldBegin('page_profile', TType.STRUCT, 4)
      self.page_profile.write(oprot)
      oprot.writeFieldEnd()
    if self.user_profile is not None:
      oprot.writeFieldBegin('user_profile', TType.STRUCT, 5)
      self.user_profile.write(oprot)
      oprot.writeFieldEnd()
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 6)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.control_level is not None:
      oprot.writeFieldBegin('control_level', TType.I32, 7)
      oprot.writeI32(self.control_level)
      oprot.writeFieldEnd()
    if self.control_grade is not None:
      oprot.writeFieldBegin('control_grade', TType.I32, 8)
      oprot.writeI32(self.control_grade)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IndexServiceSearchRequest:
  """
  Attributes:
   - ui_request
   - user_profile
   - page_profile
   - min_recall_num
   - max_recall_num
   - label_infos
   - docid_blacklist
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ui_request', (UIRequest, UIRequest.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'user_profile', (UserProfile, UserProfile.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'page_profile', (PageProfile, PageProfile.thrift_spec), None, ), # 3
    (4, TType.I32, 'min_recall_num', None, None, ), # 4
    (5, TType.I32, 'max_recall_num', None, None, ), # 5
    (6, TType.MAP, 'label_infos', (TType.I32,None,TType.LIST,(TType.STRUCT,(LabelInfo, LabelInfo.thrift_spec))), None, ), # 6
    (7, TType.SET, 'docid_blacklist', (TType.I64,None), None, ), # 7
  )

  def __init__(self, ui_request=None, user_profile=None, page_profile=None, min_recall_num=None, max_recall_num=None, label_infos=None, docid_blacklist=None,):
    self.ui_request = ui_request
    self.user_profile = user_profile
    self.page_profile = page_profile
    self.min_recall_num = min_recall_num
    self.max_recall_num = max_recall_num
    self.label_infos = label_infos
    self.docid_blacklist = docid_blacklist

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ui_request = UIRequest()
          self.ui_request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.user_profile = UserProfile()
          self.user_profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.page_profile = PageProfile()
          self.page_profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.min_recall_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.max_recall_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.label_infos = {}
          (_ktype321, _vtype322, _size320 ) = iprot.readMapBegin()
          for _i324 in xrange(_size320):
            _key325 = iprot.readI32();
            _val326 = []
            (_etype330, _size327) = iprot.readListBegin()
            for _i331 in xrange(_size327):
              _elem332 = LabelInfo()
              _elem332.read(iprot)
              _val326.append(_elem332)
            iprot.readListEnd()
            self.label_infos[_key325] = _val326
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.SET:
          self.docid_blacklist = set()
          (_etype336, _size333) = iprot.readSetBegin()
          for _i337 in xrange(_size333):
            _elem338 = iprot.readI64();
            self.docid_blacklist.add(_elem338)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IndexServiceSearchRequest')
    if self.ui_request is not None:
      oprot.writeFieldBegin('ui_request', TType.STRUCT, 1)
      self.ui_request.write(oprot)
      oprot.writeFieldEnd()
    if self.user_profile is not None:
      oprot.writeFieldBegin('user_profile', TType.STRUCT, 2)
      self.user_profile.write(oprot)
      oprot.writeFieldEnd()
    if self.page_profile is not None:
      oprot.writeFieldBegin('page_profile', TType.STRUCT, 3)
      self.page_profile.write(oprot)
      oprot.writeFieldEnd()
    if self.min_recall_num is not None:
      oprot.writeFieldBegin('min_recall_num', TType.I32, 4)
      oprot.writeI32(self.min_recall_num)
      oprot.writeFieldEnd()
    if self.max_recall_num is not None:
      oprot.writeFieldBegin('max_recall_num', TType.I32, 5)
      oprot.writeI32(self.max_recall_num)
      oprot.writeFieldEnd()
    if self.label_infos is not None:
      oprot.writeFieldBegin('label_infos', TType.MAP, 6)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.label_infos))
      for kiter339,viter340 in self.label_infos.items():
        oprot.writeI32(kiter339)
        oprot.writeListBegin(TType.STRUCT, len(viter340))
        for iter341 in viter340:
          iter341.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.docid_blacklist is not None:
      oprot.writeFieldBegin('docid_blacklist', TType.SET, 7)
      oprot.writeSetBegin(TType.I64, len(self.docid_blacklist))
      for iter342 in self.docid_blacklist:
        oprot.writeI64(iter342)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IndexServiceSearchResponse:
  """
  Attributes:
   - err_code
   - msg
   - rt_items
   - hist_items
   - users
   - total
   - items
   - control_level
   - control_grade
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'err_code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
    (3, TType.LIST, 'rt_items', (TType.STRUCT,(ItemInfo, ItemInfo.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'hist_items', (TType.STRUCT,(ItemInfo, ItemInfo.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'users', (TType.STRUCT,(UserInfo, UserInfo.thrift_spec)), None, ), # 5
    (6, TType.I32, 'total', None, None, ), # 6
    (7, TType.LIST, 'items', (TType.STRUCT,(ItemInfo, ItemInfo.thrift_spec)), None, ), # 7
    (8, TType.I32, 'control_level', None, None, ), # 8
    (9, TType.I32, 'control_grade', None, None, ), # 9
  )

  def __init__(self, err_code=None, msg=None, rt_items=None, hist_items=None, users=None, total=None, items=None, control_level=None, control_grade=None,):
    self.err_code = err_code
    self.msg = msg
    self.rt_items = rt_items
    self.hist_items = hist_items
    self.users = users
    self.total = total
    self.items = items
    self.control_level = control_level
    self.control_grade = control_grade

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.err_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.rt_items = []
          (_etype346, _size343) = iprot.readListBegin()
          for _i347 in xrange(_size343):
            _elem348 = ItemInfo()
            _elem348.read(iprot)
            self.rt_items.append(_elem348)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.hist_items = []
          (_etype352, _size349) = iprot.readListBegin()
          for _i353 in xrange(_size349):
            _elem354 = ItemInfo()
            _elem354.read(iprot)
            self.hist_items.append(_elem354)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.users = []
          (_etype358, _size355) = iprot.readListBegin()
          for _i359 in xrange(_size355):
            _elem360 = UserInfo()
            _elem360.read(iprot)
            self.users.append(_elem360)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.items = []
          (_etype364, _size361) = iprot.readListBegin()
          for _i365 in xrange(_size361):
            _elem366 = ItemInfo()
            _elem366.read(iprot)
            self.items.append(_elem366)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.control_level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.control_grade = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IndexServiceSearchResponse')
    if self.err_code is not None:
      oprot.writeFieldBegin('err_code', TType.I32, 1)
      oprot.writeI32(self.err_code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.rt_items is not None:
      oprot.writeFieldBegin('rt_items', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.rt_items))
      for iter367 in self.rt_items:
        iter367.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hist_items is not None:
      oprot.writeFieldBegin('hist_items', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.hist_items))
      for iter368 in self.hist_items:
        iter368.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.users is not None:
      oprot.writeFieldBegin('users', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.users))
      for iter369 in self.users:
        iter369.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 6)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.items is not None:
      oprot.writeFieldBegin('items', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.items))
      for iter370 in self.items:
        iter370.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.control_level is not None:
      oprot.writeFieldBegin('control_level', TType.I32, 8)
      oprot.writeI32(self.control_level)
      oprot.writeFieldEnd()
    if self.control_grade is not None:
      oprot.writeFieldBegin('control_grade', TType.I32, 9)
      oprot.writeI32(self.control_grade)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IndexBuildItem:
  """
  Attributes:
   - op
   - item
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'op', None, None, ), # 1
    (2, TType.STRUCT, 'item', (ItemInfo, ItemInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, op=None, item=None,):
    self.op = op
    self.item = item

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.op = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.item = ItemInfo()
          self.item.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IndexBuildItem')
    if self.op is not None:
      oprot.writeFieldBegin('op', TType.I32, 1)
      oprot.writeI32(self.op)
      oprot.writeFieldEnd()
    if self.item is not None:
      oprot.writeFieldBegin('item', TType.STRUCT, 2)
      self.item.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IndexServiceBuildRequest:
  """
  Attributes:
   - sid
   - search_type
   - items
   - page_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.I32, 'search_type', None, None, ), # 2
    (3, TType.LIST, 'items', (TType.STRUCT,(IndexBuildItem, IndexBuildItem.thrift_spec)), None, ), # 3
    (4, TType.STRING, 'page_id', None, None, ), # 4
  )

  def __init__(self, sid=None, search_type=None, items=None, page_id=None,):
    self.sid = sid
    self.search_type = search_type
    self.items = items
    self.page_id = page_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.search_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.items = []
          (_etype374, _size371) = iprot.readListBegin()
          for _i375 in xrange(_size371):
            _elem376 = IndexBuildItem()
            _elem376.read(iprot)
            self.items.append(_elem376)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.page_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IndexServiceBuildRequest')
    if self.sid is not None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.search_type is not None:
      oprot.writeFieldBegin('search_type', TType.I32, 2)
      oprot.writeI32(self.search_type)
      oprot.writeFieldEnd()
    if self.items is not None:
      oprot.writeFieldBegin('items', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.items))
      for iter377 in self.items:
        iter377.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.page_id is not None:
      oprot.writeFieldBegin('page_id', TType.STRING, 4)
      oprot.writeString(self.page_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IndexServiceBuildResponse:
  """
  Attributes:
   - err_code
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'err_code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
  )

  def __init__(self, err_code=None, msg=None,):
    self.err_code = err_code
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.err_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IndexServiceBuildResponse')
    if self.err_code is not None:
      oprot.writeFieldBegin('err_code', TType.I32, 1)
      oprot.writeI32(self.err_code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IndexServiceCmdRequest:
  """
  Attributes:
   - search_type
   - label_id
   - docid
   - op
   - page_id
   - kw
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'search_type', None, None, ), # 1
    (2, TType.I32, 'label_id', None, None, ), # 2
    (3, TType.STRING, 'docid', None, None, ), # 3
    (4, TType.I32, 'op', None, None, ), # 4
    (5, TType.STRING, 'page_id', None, None, ), # 5
    (6, TType.STRING, 'kw', None, None, ), # 6
  )

  def __init__(self, search_type=None, label_id=None, docid=None, op=None, page_id=None, kw=None,):
    self.search_type = search_type
    self.label_id = label_id
    self.docid = docid
    self.op = op
    self.page_id = page_id
    self.kw = kw

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.search_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.label_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.docid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.op = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.page_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.kw = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IndexServiceCmdRequest')
    if self.search_type is not None:
      oprot.writeFieldBegin('search_type', TType.I32, 1)
      oprot.writeI32(self.search_type)
      oprot.writeFieldEnd()
    if self.label_id is not None:
      oprot.writeFieldBegin('label_id', TType.I32, 2)
      oprot.writeI32(self.label_id)
      oprot.writeFieldEnd()
    if self.docid is not None:
      oprot.writeFieldBegin('docid', TType.STRING, 3)
      oprot.writeString(self.docid)
      oprot.writeFieldEnd()
    if self.op is not None:
      oprot.writeFieldBegin('op', TType.I32, 4)
      oprot.writeI32(self.op)
      oprot.writeFieldEnd()
    if self.page_id is not None:
      oprot.writeFieldBegin('page_id', TType.STRING, 5)
      oprot.writeString(self.page_id)
      oprot.writeFieldEnd()
    if self.kw is not None:
      oprot.writeFieldBegin('kw', TType.STRING, 6)
      oprot.writeString(self.kw)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IndexServiceCmdResponse:
  """
  Attributes:
   - items
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'items', (TType.STRUCT,(ItemInfo, ItemInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, items=None,):
    self.items = items

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.items = []
          (_etype381, _size378) = iprot.readListBegin()
          for _i382 in xrange(_size378):
            _elem383 = ItemInfo()
            _elem383.read(iprot)
            self.items.append(_elem383)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IndexServiceCmdResponse')
    if self.items is not None:
      oprot.writeFieldBegin('items', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.items))
      for iter384 in self.items:
        iter384.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PredictResult:
  """
  Attributes:
   - item_id
   - pctr
   - pss
   - float_pctr
   - textual_feature_values
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'item_id', None, None, ), # 1
    (2, TType.I32, 'pctr', None, None, ), # 2
    (3, TType.I32, 'pss', None, None, ), # 3
    (4, TType.DOUBLE, 'float_pctr', None, None, ), # 4
    (5, TType.LIST, 'textual_feature_values', (TType.STRING,None), None, ), # 5
  )

  def __init__(self, item_id=None, pctr=None, pss=None, float_pctr=None, textual_feature_values=None,):
    self.item_id = item_id
    self.pctr = pctr
    self.pss = pss
    self.float_pctr = float_pctr
    self.textual_feature_values = textual_feature_values

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.item_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.pctr = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pss = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.float_pctr = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.textual_feature_values = []
          (_etype388, _size385) = iprot.readListBegin()
          for _i389 in xrange(_size385):
            _elem390 = iprot.readString();
            self.textual_feature_values.append(_elem390)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PredictResult')
    if self.item_id is not None:
      oprot.writeFieldBegin('item_id', TType.STRING, 1)
      oprot.writeString(self.item_id)
      oprot.writeFieldEnd()
    if self.pctr is not None:
      oprot.writeFieldBegin('pctr', TType.I32, 2)
      oprot.writeI32(self.pctr)
      oprot.writeFieldEnd()
    if self.pss is not None:
      oprot.writeFieldBegin('pss', TType.I32, 3)
      oprot.writeI32(self.pss)
      oprot.writeFieldEnd()
    if self.float_pctr is not None:
      oprot.writeFieldBegin('float_pctr', TType.DOUBLE, 4)
      oprot.writeDouble(self.float_pctr)
      oprot.writeFieldEnd()
    if self.textual_feature_values is not None:
      oprot.writeFieldBegin('textual_feature_values', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.textual_feature_values))
      for iter391 in self.textual_feature_values:
        oprot.writeString(iter391)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ContinousValueFeature:
  """
  Attributes:
   - dimension_name
   - dimension_value
   - dimension_sign
   - dimension_show
   - dimension_click
   - dimension_coec
   - dimension_lr_weight
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dimension_name', None, None, ), # 1
    (2, TType.STRING, 'dimension_value', None, None, ), # 2
    (3, TType.I64, 'dimension_sign', None, None, ), # 3
    (4, TType.I32, 'dimension_show', None, None, ), # 4
    (5, TType.I32, 'dimension_click', None, None, ), # 5
    (6, TType.DOUBLE, 'dimension_coec', None, None, ), # 6
    (7, TType.DOUBLE, 'dimension_lr_weight', None, None, ), # 7
  )

  def __init__(self, dimension_name=None, dimension_value=None, dimension_sign=None, dimension_show=None, dimension_click=None, dimension_coec=None, dimension_lr_weight=None,):
    self.dimension_name = dimension_name
    self.dimension_value = dimension_value
    self.dimension_sign = dimension_sign
    self.dimension_show = dimension_show
    self.dimension_click = dimension_click
    self.dimension_coec = dimension_coec
    self.dimension_lr_weight = dimension_lr_weight

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dimension_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.dimension_value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.dimension_sign = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.dimension_show = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.dimension_click = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.dimension_coec = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.dimension_lr_weight = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContinousValueFeature')
    if self.dimension_name is not None:
      oprot.writeFieldBegin('dimension_name', TType.STRING, 1)
      oprot.writeString(self.dimension_name)
      oprot.writeFieldEnd()
    if self.dimension_value is not None:
      oprot.writeFieldBegin('dimension_value', TType.STRING, 2)
      oprot.writeString(self.dimension_value)
      oprot.writeFieldEnd()
    if self.dimension_sign is not None:
      oprot.writeFieldBegin('dimension_sign', TType.I64, 3)
      oprot.writeI64(self.dimension_sign)
      oprot.writeFieldEnd()
    if self.dimension_show is not None:
      oprot.writeFieldBegin('dimension_show', TType.I32, 4)
      oprot.writeI32(self.dimension_show)
      oprot.writeFieldEnd()
    if self.dimension_click is not None:
      oprot.writeFieldBegin('dimension_click', TType.I32, 5)
      oprot.writeI32(self.dimension_click)
      oprot.writeFieldEnd()
    if self.dimension_coec is not None:
      oprot.writeFieldBegin('dimension_coec', TType.DOUBLE, 6)
      oprot.writeDouble(self.dimension_coec)
      oprot.writeFieldEnd()
    if self.dimension_lr_weight is not None:
      oprot.writeFieldBegin('dimension_lr_weight', TType.DOUBLE, 7)
      oprot.writeDouble(self.dimension_lr_weight)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PredictionServiceRequest:
  """
  Attributes:
   - predict_type
   - ui_request
   - user_profile
   - page_profile
   - item_infos
   - cvfs
   - is_debug_on
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'predict_type', None, None, ), # 1
    (2, TType.STRUCT, 'ui_request', (UIRequest, UIRequest.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'user_profile', (UserProfile, UserProfile.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'page_profile', (PageProfile, PageProfile.thrift_spec), None, ), # 4
    (5, TType.LIST, 'item_infos', (TType.STRUCT,(ItemInfo, ItemInfo.thrift_spec)), None, ), # 5
    (6, TType.MAP, 'cvfs', (TType.I32,None,TType.LIST,(TType.STRUCT,(ContinousValueFeature, ContinousValueFeature.thrift_spec))), None, ), # 6
    (7, TType.BOOL, 'is_debug_on', None, False, ), # 7
  )

  def __init__(self, predict_type=None, ui_request=None, user_profile=None, page_profile=None, item_infos=None, cvfs=None, is_debug_on=thrift_spec[7][4],):
    self.predict_type = predict_type
    self.ui_request = ui_request
    self.user_profile = user_profile
    self.page_profile = page_profile
    self.item_infos = item_infos
    self.cvfs = cvfs
    self.is_debug_on = is_debug_on

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.predict_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ui_request = UIRequest()
          self.ui_request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.user_profile = UserProfile()
          self.user_profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.page_profile = PageProfile()
          self.page_profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.item_infos = []
          (_etype395, _size392) = iprot.readListBegin()
          for _i396 in xrange(_size392):
            _elem397 = ItemInfo()
            _elem397.read(iprot)
            self.item_infos.append(_elem397)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.cvfs = {}
          (_ktype399, _vtype400, _size398 ) = iprot.readMapBegin()
          for _i402 in xrange(_size398):
            _key403 = iprot.readI32();
            _val404 = []
            (_etype408, _size405) = iprot.readListBegin()
            for _i409 in xrange(_size405):
              _elem410 = ContinousValueFeature()
              _elem410.read(iprot)
              _val404.append(_elem410)
            iprot.readListEnd()
            self.cvfs[_key403] = _val404
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.is_debug_on = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PredictionServiceRequest')
    if self.predict_type is not None:
      oprot.writeFieldBegin('predict_type', TType.I32, 1)
      oprot.writeI32(self.predict_type)
      oprot.writeFieldEnd()
    if self.ui_request is not None:
      oprot.writeFieldBegin('ui_request', TType.STRUCT, 2)
      self.ui_request.write(oprot)
      oprot.writeFieldEnd()
    if self.user_profile is not None:
      oprot.writeFieldBegin('user_profile', TType.STRUCT, 3)
      self.user_profile.write(oprot)
      oprot.writeFieldEnd()
    if self.page_profile is not None:
      oprot.writeFieldBegin('page_profile', TType.STRUCT, 4)
      self.page_profile.write(oprot)
      oprot.writeFieldEnd()
    if self.item_infos is not None:
      oprot.writeFieldBegin('item_infos', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.item_infos))
      for iter411 in self.item_infos:
        iter411.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cvfs is not None:
      oprot.writeFieldBegin('cvfs', TType.MAP, 6)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.cvfs))
      for kiter412,viter413 in self.cvfs.items():
        oprot.writeI32(kiter412)
        oprot.writeListBegin(TType.STRUCT, len(viter413))
        for iter414 in viter413:
          iter414.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.is_debug_on is not None:
      oprot.writeFieldBegin('is_debug_on', TType.BOOL, 7)
      oprot.writeBool(self.is_debug_on)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PredictionServiceResponse:
  """
  Attributes:
   - err_code
   - msg
   - predict_results
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'err_code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
    (3, TType.LIST, 'predict_results', (TType.STRUCT,(PredictResult, PredictResult.thrift_spec)), None, ), # 3
  )

  def __init__(self, err_code=None, msg=None, predict_results=None,):
    self.err_code = err_code
    self.msg = msg
    self.predict_results = predict_results

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.err_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.predict_results = []
          (_etype418, _size415) = iprot.readListBegin()
          for _i419 in xrange(_size415):
            _elem420 = PredictResult()
            _elem420.read(iprot)
            self.predict_results.append(_elem420)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PredictionServiceResponse')
    if self.err_code is not None:
      oprot.writeFieldBegin('err_code', TType.I32, 1)
      oprot.writeI32(self.err_code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.predict_results is not None:
      oprot.writeFieldBegin('predict_results', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.predict_results))
      for iter421 in self.predict_results:
        iter421.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExtractRequestInfo:
  """
  Attributes:
   - item_type
   - doc_id
   - title
   - desc
   - body
   - text
   - cmsid
   - ptime
   - lmodify
   - time_type
   - entity_type
   - continousplay
   - man_made_time
   - origion
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'item_type', None, None, ), # 1
    (2, TType.STRING, 'doc_id', None, None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.STRING, 'desc', None, None, ), # 4
    (5, TType.STRING, 'body', None, None, ), # 5
    (6, TType.STRING, 'text', None, None, ), # 6
    (7, TType.STRING, 'cmsid', None, None, ), # 7
    (8, TType.STRING, 'ptime', None, None, ), # 8
    (9, TType.STRING, 'lmodify', None, None, ), # 9
    (10, TType.I32, 'time_type', None, None, ), # 10
    (11, TType.I32, 'entity_type', None, None, ), # 11
    (12, TType.STRING, 'continousplay', None, None, ), # 12
    (13, TType.STRING, 'man_made_time', None, None, ), # 13
    (14, TType.STRING, 'origion', None, None, ), # 14
  )

  def __init__(self, item_type=None, doc_id=None, title=None, desc=None, body=None, text=None, cmsid=None, ptime=None, lmodify=None, time_type=None, entity_type=None, continousplay=None, man_made_time=None, origion=None,):
    self.item_type = item_type
    self.doc_id = doc_id
    self.title = title
    self.desc = desc
    self.body = body
    self.text = text
    self.cmsid = cmsid
    self.ptime = ptime
    self.lmodify = lmodify
    self.time_type = time_type
    self.entity_type = entity_type
    self.continousplay = continousplay
    self.man_made_time = man_made_time
    self.origion = origion

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.item_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.doc_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.desc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.body = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.cmsid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.ptime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.lmodify = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.time_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.entity_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.continousplay = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.man_made_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.origion = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExtractRequestInfo')
    if self.item_type is not None:
      oprot.writeFieldBegin('item_type', TType.I32, 1)
      oprot.writeI32(self.item_type)
      oprot.writeFieldEnd()
    if self.doc_id is not None:
      oprot.writeFieldBegin('doc_id', TType.STRING, 2)
      oprot.writeString(self.doc_id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.desc is not None:
      oprot.writeFieldBegin('desc', TType.STRING, 4)
      oprot.writeString(self.desc)
      oprot.writeFieldEnd()
    if self.body is not None:
      oprot.writeFieldBegin('body', TType.STRING, 5)
      oprot.writeString(self.body)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 6)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.cmsid is not None:
      oprot.writeFieldBegin('cmsid', TType.STRING, 7)
      oprot.writeString(self.cmsid)
      oprot.writeFieldEnd()
    if self.ptime is not None:
      oprot.writeFieldBegin('ptime', TType.STRING, 8)
      oprot.writeString(self.ptime)
      oprot.writeFieldEnd()
    if self.lmodify is not None:
      oprot.writeFieldBegin('lmodify', TType.STRING, 9)
      oprot.writeString(self.lmodify)
      oprot.writeFieldEnd()
    if self.time_type is not None:
      oprot.writeFieldBegin('time_type', TType.I32, 10)
      oprot.writeI32(self.time_type)
      oprot.writeFieldEnd()
    if self.entity_type is not None:
      oprot.writeFieldBegin('entity_type', TType.I32, 11)
      oprot.writeI32(self.entity_type)
      oprot.writeFieldEnd()
    if self.continousplay is not None:
      oprot.writeFieldBegin('continousplay', TType.STRING, 12)
      oprot.writeString(self.continousplay)
      oprot.writeFieldEnd()
    if self.man_made_time is not None:
      oprot.writeFieldBegin('man_made_time', TType.STRING, 13)
      oprot.writeString(self.man_made_time)
      oprot.writeFieldEnd()
    if self.origion is not None:
      oprot.writeFieldBegin('origion', TType.STRING, 14)
      oprot.writeString(self.origion)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExtractResultInfo:
  """
  Attributes:
   - doc_id
   - label_infos
   - title_seg_words
   - body_seg_words
   - time_dis
   - dead_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'doc_id', None, None, ), # 1
    (2, TType.MAP, 'label_infos', (TType.I32,None,TType.LIST,(TType.STRUCT,(LabelInfo, LabelInfo.thrift_spec))), None, ), # 2
    (3, TType.LIST, 'title_seg_words', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'body_seg_words', (TType.STRING,None), None, ), # 4
    (5, TType.I64, 'time_dis', None, None, ), # 5
    (6, TType.I64, 'dead_time', None, None, ), # 6
  )

  def __init__(self, doc_id=None, label_infos=None, title_seg_words=None, body_seg_words=None, time_dis=None, dead_time=None,):
    self.doc_id = doc_id
    self.label_infos = label_infos
    self.title_seg_words = title_seg_words
    self.body_seg_words = body_seg_words
    self.time_dis = time_dis
    self.dead_time = dead_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.doc_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.label_infos = {}
          (_ktype423, _vtype424, _size422 ) = iprot.readMapBegin()
          for _i426 in xrange(_size422):
            _key427 = iprot.readI32();
            _val428 = []
            (_etype432, _size429) = iprot.readListBegin()
            for _i433 in xrange(_size429):
              _elem434 = LabelInfo()
              _elem434.read(iprot)
              _val428.append(_elem434)
            iprot.readListEnd()
            self.label_infos[_key427] = _val428
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.title_seg_words = []
          (_etype438, _size435) = iprot.readListBegin()
          for _i439 in xrange(_size435):
            _elem440 = iprot.readString();
            self.title_seg_words.append(_elem440)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.body_seg_words = []
          (_etype444, _size441) = iprot.readListBegin()
          for _i445 in xrange(_size441):
            _elem446 = iprot.readString();
            self.body_seg_words.append(_elem446)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.time_dis = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.dead_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExtractResultInfo')
    if self.doc_id is not None:
      oprot.writeFieldBegin('doc_id', TType.STRING, 1)
      oprot.writeString(self.doc_id)
      oprot.writeFieldEnd()
    if self.label_infos is not None:
      oprot.writeFieldBegin('label_infos', TType.MAP, 2)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.label_infos))
      for kiter447,viter448 in self.label_infos.items():
        oprot.writeI32(kiter447)
        oprot.writeListBegin(TType.STRUCT, len(viter448))
        for iter449 in viter448:
          iter449.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.title_seg_words is not None:
      oprot.writeFieldBegin('title_seg_words', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.title_seg_words))
      for iter450 in self.title_seg_words:
        oprot.writeString(iter450)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.body_seg_words is not None:
      oprot.writeFieldBegin('body_seg_words', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.body_seg_words))
      for iter451 in self.body_seg_words:
        oprot.writeString(iter451)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.time_dis is not None:
      oprot.writeFieldBegin('time_dis', TType.I64, 5)
      oprot.writeI64(self.time_dis)
      oprot.writeFieldEnd()
    if self.dead_time is not None:
      oprot.writeFieldBegin('dead_time', TType.I64, 6)
      oprot.writeI64(self.dead_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExtractServiceRequest:
  """
  Attributes:
   - extract_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'extract_list', (TType.STRUCT,(ExtractRequestInfo, ExtractRequestInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, extract_list=None,):
    self.extract_list = extract_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.extract_list = []
          (_etype455, _size452) = iprot.readListBegin()
          for _i456 in xrange(_size452):
            _elem457 = ExtractRequestInfo()
            _elem457.read(iprot)
            self.extract_list.append(_elem457)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExtractServiceRequest')
    if self.extract_list is not None:
      oprot.writeFieldBegin('extract_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.extract_list))
      for iter458 in self.extract_list:
        iter458.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExtractServiceResponse:
  """
  Attributes:
   - extract_results
   - err_code
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'extract_results', (TType.STRUCT,(ExtractResultInfo, ExtractResultInfo.thrift_spec)), None, ), # 1
    (2, TType.I32, 'err_code', None, None, ), # 2
    (3, TType.STRING, 'msg', None, None, ), # 3
  )

  def __init__(self, extract_results=None, err_code=None, msg=None,):
    self.extract_results = extract_results
    self.err_code = err_code
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.extract_results = []
          (_etype462, _size459) = iprot.readListBegin()
          for _i463 in xrange(_size459):
            _elem464 = ExtractResultInfo()
            _elem464.read(iprot)
            self.extract_results.append(_elem464)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.err_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExtractServiceResponse')
    if self.extract_results is not None:
      oprot.writeFieldBegin('extract_results', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.extract_results))
      for iter465 in self.extract_results:
        iter465.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.err_code is not None:
      oprot.writeFieldBegin('err_code', TType.I32, 2)
      oprot.writeI32(self.err_code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 3)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExtractServiceLoadInfo:
  """
  Attributes:
   - load_type
   - file_path
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'load_type', None, None, ), # 1
    (2, TType.STRING, 'file_path', None, None, ), # 2
  )

  def __init__(self, load_type=None, file_path=None,):
    self.load_type = load_type
    self.file_path = file_path

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.load_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.file_path = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExtractServiceLoadInfo')
    if self.load_type is not None:
      oprot.writeFieldBegin('load_type', TType.I32, 1)
      oprot.writeI32(self.load_type)
      oprot.writeFieldEnd()
    if self.file_path is not None:
      oprot.writeFieldBegin('file_path', TType.STRING, 2)
      oprot.writeString(self.file_path)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExtractServiceLoadRequest:
  """
  Attributes:
   - load_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'load_list', (TType.STRUCT,(ExtractServiceLoadInfo, ExtractServiceLoadInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, load_list=None,):
    self.load_list = load_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.load_list = []
          (_etype469, _size466) = iprot.readListBegin()
          for _i470 in xrange(_size466):
            _elem471 = ExtractServiceLoadInfo()
            _elem471.read(iprot)
            self.load_list.append(_elem471)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExtractServiceLoadRequest')
    if self.load_list is not None:
      oprot.writeFieldBegin('load_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.load_list))
      for iter472 in self.load_list:
        iter472.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExtractServiceLoadResponse:
  """
  Attributes:
   - err_code
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'err_code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
  )

  def __init__(self, err_code=None, msg=None,):
    self.err_code = err_code
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.err_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExtractServiceLoadResponse')
    if self.err_code is not None:
      oprot.writeFieldBegin('err_code', TType.I32, 1)
      oprot.writeI32(self.err_code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NewsQualityResponseInfo:
  """
  Attributes:
   - doc_id
   - same_pic_docid_list
   - quality_score
   - category_1
   - legal_doc_title
   - delete_for_newsquality
   - sansu_score
   - time_distance
   - expire_time
   - time_distance2
   - expire_time2
   - detail_category_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'doc_id', None, None, ), # 1
    (2, TType.LIST, 'same_pic_docid_list', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'quality_score', None, None, ), # 3
    (4, TType.STRING, 'category_1', None, None, ), # 4
    (5, TType.BOOL, 'legal_doc_title', None, None, ), # 5
    (6, TType.BOOL, 'delete_for_newsquality', None, None, ), # 6
    (7, TType.I32, 'sansu_score', None, None, ), # 7
    (8, TType.I64, 'time_distance', None, None, ), # 8
    (9, TType.I64, 'expire_time', None, None, ), # 9
    (10, TType.I64, 'time_distance2', None, None, ), # 10
    (11, TType.I64, 'expire_time2', None, None, ), # 11
    (12, TType.LIST, 'detail_category_list', (TType.STRING,None), None, ), # 12
  )

  def __init__(self, doc_id=None, same_pic_docid_list=None, quality_score=None, category_1=None, legal_doc_title=None, delete_for_newsquality=None, sansu_score=None, time_distance=None, expire_time=None, time_distance2=None, expire_time2=None, detail_category_list=None,):
    self.doc_id = doc_id
    self.same_pic_docid_list = same_pic_docid_list
    self.quality_score = quality_score
    self.category_1 = category_1
    self.legal_doc_title = legal_doc_title
    self.delete_for_newsquality = delete_for_newsquality
    self.sansu_score = sansu_score
    self.time_distance = time_distance
    self.expire_time = expire_time
    self.time_distance2 = time_distance2
    self.expire_time2 = expire_time2
    self.detail_category_list = detail_category_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.doc_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.same_pic_docid_list = []
          (_etype476, _size473) = iprot.readListBegin()
          for _i477 in xrange(_size473):
            _elem478 = iprot.readString();
            self.same_pic_docid_list.append(_elem478)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.quality_score = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.category_1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.legal_doc_title = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.delete_for_newsquality = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.sansu_score = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.time_distance = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.expire_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.time_distance2 = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.expire_time2 = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.detail_category_list = []
          (_etype482, _size479) = iprot.readListBegin()
          for _i483 in xrange(_size479):
            _elem484 = iprot.readString();
            self.detail_category_list.append(_elem484)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NewsQualityResponseInfo')
    if self.doc_id is not None:
      oprot.writeFieldBegin('doc_id', TType.STRING, 1)
      oprot.writeString(self.doc_id)
      oprot.writeFieldEnd()
    if self.same_pic_docid_list is not None:
      oprot.writeFieldBegin('same_pic_docid_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.same_pic_docid_list))
      for iter485 in self.same_pic_docid_list:
        oprot.writeString(iter485)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.quality_score is not None:
      oprot.writeFieldBegin('quality_score', TType.I32, 3)
      oprot.writeI32(self.quality_score)
      oprot.writeFieldEnd()
    if self.category_1 is not None:
      oprot.writeFieldBegin('category_1', TType.STRING, 4)
      oprot.writeString(self.category_1)
      oprot.writeFieldEnd()
    if self.legal_doc_title is not None:
      oprot.writeFieldBegin('legal_doc_title', TType.BOOL, 5)
      oprot.writeBool(self.legal_doc_title)
      oprot.writeFieldEnd()
    if self.delete_for_newsquality is not None:
      oprot.writeFieldBegin('delete_for_newsquality', TType.BOOL, 6)
      oprot.writeBool(self.delete_for_newsquality)
      oprot.writeFieldEnd()
    if self.sansu_score is not None:
      oprot.writeFieldBegin('sansu_score', TType.I32, 7)
      oprot.writeI32(self.sansu_score)
      oprot.writeFieldEnd()
    if self.time_distance is not None:
      oprot.writeFieldBegin('time_distance', TType.I64, 8)
      oprot.writeI64(self.time_distance)
      oprot.writeFieldEnd()
    if self.expire_time is not None:
      oprot.writeFieldBegin('expire_time', TType.I64, 9)
      oprot.writeI64(self.expire_time)
      oprot.writeFieldEnd()
    if self.time_distance2 is not None:
      oprot.writeFieldBegin('time_distance2', TType.I64, 10)
      oprot.writeI64(self.time_distance2)
      oprot.writeFieldEnd()
    if self.expire_time2 is not None:
      oprot.writeFieldBegin('expire_time2', TType.I64, 11)
      oprot.writeI64(self.expire_time2)
      oprot.writeFieldEnd()
    if self.detail_category_list is not None:
      oprot.writeFieldBegin('detail_category_list', TType.LIST, 12)
      oprot.writeListBegin(TType.STRING, len(self.detail_category_list))
      for iter486 in self.detail_category_list:
        oprot.writeString(iter486)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NewsQaulityResponse:
  """
  Attributes:
   - news_quality_results
   - err_code
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'news_quality_results', (TType.STRUCT,(NewsQualityResponseInfo, NewsQualityResponseInfo.thrift_spec)), None, ), # 1
    (2, TType.I32, 'err_code', None, None, ), # 2
    (3, TType.STRING, 'msg', None, None, ), # 3
  )

  def __init__(self, news_quality_results=None, err_code=None, msg=None,):
    self.news_quality_results = news_quality_results
    self.err_code = err_code
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.news_quality_results = []
          (_etype490, _size487) = iprot.readListBegin()
          for _i491 in xrange(_size487):
            _elem492 = NewsQualityResponseInfo()
            _elem492.read(iprot)
            self.news_quality_results.append(_elem492)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.err_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NewsQaulityResponse')
    if self.news_quality_results is not None:
      oprot.writeFieldBegin('news_quality_results', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.news_quality_results))
      for iter493 in self.news_quality_results:
        iter493.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.err_code is not None:
      oprot.writeFieldBegin('err_code', TType.I32, 2)
      oprot.writeI32(self.err_code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 3)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NewsQualityRequestForTimer:
  """
  Attributes:
   - cmsid
   - ptime
   - lmodify
   - entity_type
   - continousplay
   - man_made_time
   - origion
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cmsid', None, None, ), # 1
    (2, TType.STRING, 'ptime', None, None, ), # 2
    (3, TType.STRING, 'lmodify', None, None, ), # 3
    (4, TType.I32, 'entity_type', None, None, ), # 4
    (5, TType.STRING, 'continousplay', None, None, ), # 5
    (6, TType.STRING, 'man_made_time', None, None, ), # 6
    (7, TType.STRING, 'origion', None, None, ), # 7
  )

  def __init__(self, cmsid=None, ptime=None, lmodify=None, entity_type=None, continousplay=None, man_made_time=None, origion=None,):
    self.cmsid = cmsid
    self.ptime = ptime
    self.lmodify = lmodify
    self.entity_type = entity_type
    self.continousplay = continousplay
    self.man_made_time = man_made_time
    self.origion = origion

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cmsid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ptime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.lmodify = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.entity_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.continousplay = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.man_made_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.origion = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NewsQualityRequestForTimer')
    if self.cmsid is not None:
      oprot.writeFieldBegin('cmsid', TType.STRING, 1)
      oprot.writeString(self.cmsid)
      oprot.writeFieldEnd()
    if self.ptime is not None:
      oprot.writeFieldBegin('ptime', TType.STRING, 2)
      oprot.writeString(self.ptime)
      oprot.writeFieldEnd()
    if self.lmodify is not None:
      oprot.writeFieldBegin('lmodify', TType.STRING, 3)
      oprot.writeString(self.lmodify)
      oprot.writeFieldEnd()
    if self.entity_type is not None:
      oprot.writeFieldBegin('entity_type', TType.I32, 4)
      oprot.writeI32(self.entity_type)
      oprot.writeFieldEnd()
    if self.continousplay is not None:
      oprot.writeFieldBegin('continousplay', TType.STRING, 5)
      oprot.writeString(self.continousplay)
      oprot.writeFieldEnd()
    if self.man_made_time is not None:
      oprot.writeFieldBegin('man_made_time', TType.STRING, 6)
      oprot.writeString(self.man_made_time)
      oprot.writeFieldEnd()
    if self.origion is not None:
      oprot.writeFieldBegin('origion', TType.STRING, 7)
      oprot.writeString(self.origion)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NewsQaulityRequestInfo:
  """
  Attributes:
   - doc_id
   - title
   - body
   - imgsrc
   - img
   - source
   - skip_type
   - timer_info
   - message_for_reuse_docs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'doc_id', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'body', None, None, ), # 3
    (4, TType.STRING, 'imgsrc', None, None, ), # 4
    (5, TType.STRING, 'img', None, None, ), # 5
    (6, TType.STRING, 'source', None, None, ), # 6
    (7, TType.I32, 'skip_type', None, None, ), # 7
    (8, TType.STRUCT, 'timer_info', (NewsQualityRequestForTimer, NewsQualityRequestForTimer.thrift_spec), None, ), # 8
    (9, TType.STRING, 'message_for_reuse_docs', None, None, ), # 9
  )

  def __init__(self, doc_id=None, title=None, body=None, imgsrc=None, img=None, source=None, skip_type=None, timer_info=None, message_for_reuse_docs=None,):
    self.doc_id = doc_id
    self.title = title
    self.body = body
    self.imgsrc = imgsrc
    self.img = img
    self.source = source
    self.skip_type = skip_type
    self.timer_info = timer_info
    self.message_for_reuse_docs = message_for_reuse_docs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.doc_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.body = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.imgsrc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.img = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.skip_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.timer_info = NewsQualityRequestForTimer()
          self.timer_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.message_for_reuse_docs = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NewsQaulityRequestInfo')
    if self.doc_id is not None:
      oprot.writeFieldBegin('doc_id', TType.STRING, 1)
      oprot.writeString(self.doc_id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.body is not None:
      oprot.writeFieldBegin('body', TType.STRING, 3)
      oprot.writeString(self.body)
      oprot.writeFieldEnd()
    if self.imgsrc is not None:
      oprot.writeFieldBegin('imgsrc', TType.STRING, 4)
      oprot.writeString(self.imgsrc)
      oprot.writeFieldEnd()
    if self.img is not None:
      oprot.writeFieldBegin('img', TType.STRING, 5)
      oprot.writeString(self.img)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 6)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.skip_type is not None:
      oprot.writeFieldBegin('skip_type', TType.I32, 7)
      oprot.writeI32(self.skip_type)
      oprot.writeFieldEnd()
    if self.timer_info is not None:
      oprot.writeFieldBegin('timer_info', TType.STRUCT, 8)
      self.timer_info.write(oprot)
      oprot.writeFieldEnd()
    if self.message_for_reuse_docs is not None:
      oprot.writeFieldBegin('message_for_reuse_docs', TType.STRING, 9)
      oprot.writeString(self.message_for_reuse_docs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NewsQaulityRequest:
  """
  Attributes:
   - news_quality_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'news_quality_list', (TType.STRUCT,(NewsQaulityRequestInfo, NewsQaulityRequestInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, news_quality_list=None,):
    self.news_quality_list = news_quality_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.news_quality_list = []
          (_etype497, _size494) = iprot.readListBegin()
          for _i498 in xrange(_size494):
            _elem499 = NewsQaulityRequestInfo()
            _elem499.read(iprot)
            self.news_quality_list.append(_elem499)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NewsQaulityRequest')
    if self.news_quality_list is not None:
      oprot.writeFieldBegin('news_quality_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.news_quality_list))
      for iter500 in self.news_quality_list:
        iter500.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SameVideoRequest:
  """
  Attributes:
   - vid
   - title
   - video_url
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'vid', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'video_url', None, None, ), # 3
  )

  def __init__(self, vid=None, title=None, video_url=None,):
    self.vid = vid
    self.title = title
    self.video_url = video_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.vid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.video_url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SameVideoRequest')
    if self.vid is not None:
      oprot.writeFieldBegin('vid', TType.STRING, 1)
      oprot.writeString(self.vid)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.video_url is not None:
      oprot.writeFieldBegin('video_url', TType.STRING, 3)
      oprot.writeString(self.video_url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SameVideoResponse:
  """
  Attributes:
   - has_same_video
   - same_video
   - err_code
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_same_video', None, None, ), # 1
    (2, TType.STRING, 'same_video', None, None, ), # 2
    (3, TType.I32, 'err_code', None, None, ), # 3
  )

  def __init__(self, has_same_video=None, same_video=None, err_code=None,):
    self.has_same_video = has_same_video
    self.same_video = same_video
    self.err_code = err_code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_same_video = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.same_video = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.err_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SameVideoResponse')
    if self.has_same_video is not None:
      oprot.writeFieldBegin('has_same_video', TType.BOOL, 1)
      oprot.writeBool(self.has_same_video)
      oprot.writeFieldEnd()
    if self.same_video is not None:
      oprot.writeFieldBegin('same_video', TType.STRING, 2)
      oprot.writeString(self.same_video)
      oprot.writeFieldEnd()
    if self.err_code is not None:
      oprot.writeFieldBegin('err_code', TType.I32, 3)
      oprot.writeI32(self.err_code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
